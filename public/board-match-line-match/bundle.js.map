{"version":3,"file":"bundle.js","sources":["../../node_modules/@phaserjs/phaser/GameInstance.js","../../node_modules/@phaserjs/phaser/config/BackgroundColor.js","../../node_modules/@phaserjs/phaser/config/Size.js","../../node_modules/@phaserjs/phaser/renderer/BindingQueue.js","../../node_modules/@phaserjs/phaser/config/SetRenderer.js","../../node_modules/@phaserjs/phaser/config/DefaultOrigin.js","../../node_modules/@phaserjs/phaser/config/Parent.js","../../node_modules/@phaserjs/phaser/config/MaxTextures.js","../../node_modules/@phaserjs/phaser/dom/GetElement.js","../../node_modules/@phaserjs/phaser/config/Scenes.js","../../node_modules/@phaserjs/phaser/config/WebGLContext.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/GL.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/fbo/FBOSystem.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/CreateGLTexture.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/DeleteGLTexture.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/GLTextureBinding.js","../../node_modules/@phaserjs/phaser/math/pow2/IsSizePowerOfTwo.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/SetGLTextureFilterMode.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/UpdateGLTexture.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/fbo/DeleteFramebuffer.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/buffers/IndexedBuffer.js","../../node_modules/@phaserjs/phaser/textures/Frame.js","../../node_modules/@phaserjs/phaser/textures/Texture.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/WebGLRendererInstance.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/SingleTextureQuadShader.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/fbo/CreateFramebuffer.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/MultiTextureQuadShader.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/ShaderSystem.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CheckShaderMaxIfStatements.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/textures/TextureSystem.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/WebGLRenderer.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/cameras/Ortho.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/colors/GetRGBArray.js","../../node_modules/@phaserjs/phaser/math/matrix2d-funcs/ExactEquals.js","../../node_modules/@phaserjs/phaser/math/matrix2d/Matrix2D.js","../../node_modules/@phaserjs/phaser/geom/rectangle/Rectangle.js","../../node_modules/@phaserjs/phaser/geom/rectangle/Contains.js","../../node_modules/@phaserjs/phaser/utils/NOOP.js","../../node_modules/@phaserjs/phaser/math/vec2/Vec2Callback.js","../../node_modules/@phaserjs/phaser/camera/StaticCamera.js","../../node_modules/@phaserjs/phaser/display/RemoveChild.js","../../node_modules/@phaserjs/phaser/display/GetChildIndex.js","../../node_modules/@phaserjs/phaser/display/RemoveChildAt.js","../../node_modules/@phaserjs/phaser/events/Emit.js","../../node_modules/@phaserjs/phaser/display/SetParent.js","../../node_modules/@phaserjs/phaser/display/SetWorld.js","../../node_modules/@phaserjs/phaser/gameobjects/events/RemovedFromWorldEvent.js","../../node_modules/@phaserjs/phaser/gameobjects/events/AddedToWorldEvent.js","../../node_modules/@phaserjs/phaser/display/DepthFirstSearch.js","../../node_modules/@phaserjs/phaser/display/AddChild.js","../../node_modules/@phaserjs/phaser/gameobjects/DIRTY_CONST.js","../../node_modules/@phaserjs/phaser/display/RemoveChildrenBetween.js","../../node_modules/@phaserjs/phaser/events/EventInstance.js","../../node_modules/@phaserjs/phaser/events/Off.js","../../node_modules/@phaserjs/phaser/events/On.js","../../node_modules/@phaserjs/phaser/events/Once.js","../../node_modules/@phaserjs/phaser/scenes/SceneManagerInstance.js","../../node_modules/@phaserjs/phaser/scenes/SceneManager.js","../../node_modules/@phaserjs/phaser/scenes/CreateSceneRenderData.js","../../node_modules/@phaserjs/phaser/scenes/ResetSceneRenderData.js","../../node_modules/@phaserjs/phaser/textures/CreateCanvas.js","../../node_modules/@phaserjs/phaser/textures/TextureManagerInstance.js","../../node_modules/@phaserjs/phaser/textures/TextureManager.js","../../node_modules/@phaserjs/phaser/gameobjects/components/transform/GetVertices.js","../../node_modules/@phaserjs/phaser/gameobjects/components/bounds/BoundsComponent.js","../../node_modules/@phaserjs/phaser/gameobjects/components/input/InputComponent.js","../../node_modules/@phaserjs/phaser/math/vec2/Vec2.js","../../node_modules/@phaserjs/phaser/math/matrix2d/Copy.js","../../node_modules/@phaserjs/phaser/gameobjects/components/transform/TransformComponent.js","../../node_modules/@phaserjs/phaser/gameobjects/components/transform/UpdateLocalTransform.js","../../node_modules/@phaserjs/phaser/gameobjects/components/transform/UpdateWorldTransform.js","../../node_modules/@phaserjs/phaser/gameobjects/GameObject.js","../../node_modules/@phaserjs/phaser/display/ReparentChildren.js","../../node_modules/@phaserjs/phaser/display/DestroyChildren.js","../../node_modules/@phaserjs/phaser/gameobjects/events/DestroyEvent.js","../../node_modules/@phaserjs/phaser/gameobjects/container/Container.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/colors/PackColor.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/colors/PackColors.js","../../node_modules/@phaserjs/phaser/gameobjects/sprite/SetFrame.js","../../node_modules/@phaserjs/phaser/gameobjects/sprite/Sprite.js","../../node_modules/@phaserjs/phaser/gameobjects/sprite/SetTexture.js","../../node_modules/@phaserjs/phaser/gameobjects/sprite/UpdateVertices.js","../../node_modules/@phaserjs/phaser/renderer/webgl1/draw/BatchTexturedQuad.js","../../node_modules/@phaserjs/phaser/renderer/canvas/draw/DrawTexturedQuad.js","../../node_modules/@phaserjs/phaser/textures/types/CanvasTexture.js","../../node_modules/@phaserjs/phaser/gameobjects/text/Text.js","../../node_modules/@phaserjs/phaser/world/UpdateCachedLayers.js","../../node_modules/@phaserjs/phaser/world/HasDirtyChildren.js","../../node_modules/@phaserjs/phaser/world/BuildRenderList.js","../../node_modules/@phaserjs/phaser/world/WorldDepthFirstSearch.js","../../node_modules/@phaserjs/phaser/world/CalculateTotalRenderable.js","../../node_modules/@phaserjs/phaser/world/ResetWorldRenderData.js","../../node_modules/@phaserjs/phaser/world/BaseWorld.js","../../node_modules/@phaserjs/phaser/gameobjects/events/UpdateEvent.js","../../node_modules/@phaserjs/phaser/gameobjects/events/PostUpdateEvent.js","../../node_modules/@phaserjs/phaser/world/events/WorldRenderEvent.js","../../node_modules/@phaserjs/phaser/world/MergeRenderData.js","../../node_modules/@phaserjs/phaser/display/RemoveChildren.js","../../node_modules/@phaserjs/phaser/world/events/WorldShutdownEvent.js","../../node_modules/@phaserjs/phaser/world/StaticWorld.js","../../node_modules/@phaserjs/phaser/world/CreateWorldRenderData.js","../../node_modules/@phaserjs/phaser/scenes/Install.js","../../node_modules/@phaserjs/phaser/scenes/GetConfigValue.js","../../node_modules/@phaserjs/phaser/gameobjects/sprite/SetAlpha.js","../../src/board/board/boarddata/methods/Key.ts","../../src/board/board/boarddata/methods/ZMap.ts","../../src/board/board/boarddata/methods/ChessSet.ts","../../src/board/board/boarddata/methods/AddChess.ts","../../src/board/board/boarddata/methods/GetChess.ts","../../src/board/board/boarddata/methods/GetMaxMinMapKey.ts","../../src/board/board/boarddata/BoardData.ts","../../src/board/board/boarddata/methods/RemoveChess.ts","../../src/board/board/boarddata/methods/HasChess.ts","../../src/board/board/boarddata/methods/Contains.ts","../../src/board/board/boarddata/methods/GetXYZ.ts","../../src/board/board/boarddata/SetBoardWidth.ts","../../src/board/board/boarddata/SetBoardHeight.ts","../../src/board/board/tileposition/TileXYZToChess.ts","../../src/board/chess/ChessData.ts","../../src/board/chess/GetChessData.ts","../../src/board/board/worldposition/GridAlign.ts","../../src/board/board/worldposition/AngleBetween.ts","../../src/utils/math/angle/Between.ts","../../src/utils/math/angle/RadToDeg.ts","../../src/utils/math/angle/ShortestBetween.ts","../../src/board/board/worldposition/AngleToward.ts","../../src/board/grid/IGrid.ts","../../src/board/board/ILogicBoard.ts","../../src/board/board/tileposition/ForEachTileXY.ts","../../src/utils/math/RandomInt.ts","../../src/board/board/empty/GetRandomEmptyTileXY.ts","../../src/utils/array/GetRandom.ts","../../src/board/board/neighbors/GetTileXYAtDirection.ts","../../src/utils/math/Wrap.ts","../../src/board/board/tileposition/GetWrapTileXY.ts","../../src/board/board/blocker/HasEdgeBlocker.ts","../../src/utils/math/angle/Normalize.ts","../../src/utils/math/fuzzy/Equal.ts","../../src/board/board/worldposition/IsAngleInCone.ts","../../src/board/board/transform/Mirror.ts","../../src/board/board/transform/Offset.ts","../../src/board/board/transform/Rotate.ts","../../src/board/board/chess/SwapChess.ts","../../src/board/board/tileposition/TileXYToChessArray.ts","../../src/board/board/worldposition/WorldXYSnapToGrid.ts","../../src/board/grid/quad/IQuadBase.ts","../../src/board/grid/quad/DirectionToDeltaXY.ts","../../src/board/grid/quad/DeltaTileXYToDirection.ts","../../src/board/grid/hexagon/IHexagonBase.ts","../../src/board/grid/hexagon/HexagonBase.ts","../../src/board/grid/hexagon/CubeTransfer.ts","../../src/board/grid/hexagon/DirectionBetween.ts","../../src/board/grid/hexagon/GetDistance.ts","../../src/board/grid/hexagon/GetWorldXY.ts","../../src/utils/math/angle/DegToRad.ts","../../src/board/grid/hexagon/GetGridPoints.ts","../../src/board/grid/hexagon/DirectionToDeltaTileXY.ts","../../src/board/grid/hexagon/DeltaTileXYToDirection.ts","../../src/board/grid/hexagon/GetParity.ts","../../src/board/grid/hexagon/GetNeighborTileDirection.ts","../../src/board/grid/hexagon/GetTileXYAtDirection.ts","../../src/board/grid/hexagon/GetTileXY.ts","../../src/board/grid/hexagon/Mirror.ts","../../src/board/grid/hexagon/Offset.ts","../../src/board/grid/hexagon/Rotate.ts","../../src/board/grid/hexagon/Hexagon.ts","../../src/board/grid/utils/DirectionNormalize.ts","../../src/board/grid/utils/FillPositionArray.ts","../../src/board/grid/hexagon/GetNeighborTileXY.ts","../../src/board/grid/hexagon/GetOppositeDirection.ts","../../src/board/grid/hexagon/RingToTileXYArray.ts","../../src/board/grid/utils/SaveOrigin.ts","../../src/board/match/MatchAtDir.ts","../../src/board/match/MatchBoard.ts","../../src/board/match/Group.ts","../../src/board/match/Match.ts","../../src/texture/canvastexture/DrawCanvasTexture.ts","../../src/utils/canvas/GetStyle.ts","../../src/texture/canvastexture/CreatePolygonTexture.ts","../../src/texture/canvastexture/CreateTriangleTexture.ts","../../examples/board-match/line-match.ts","../../src/board/board/LogicBoard.ts","../../src/board/board/chess/AddChess.ts","../../src/board/board/worldposition/AngleSnapToDirection.ts","../../src/board/board/neighbors/AreNeighbors.ts","../../src/board/board/tileposition/ChessToTileXYZ.ts","../../src/board/board/utils/IsTileXYZ.ts","../../src/utils/object/IsPlainObject.ts","../../src/board/board/tileposition/Contains.ts","../../src/board/board/tileposition/DirectionBetween.ts","../../src/board/board/ring/FilledRingToTileXYArray.ts","../../src/board/board/transform/Fit.ts","../../src/board/board/chess/GetAllChess.ts","../../src/board/board/tileposition/GetDistance.ts","../../src/board/board/empty/GetEmptyTileXYArray.ts","../../src/board/board/worldposition/GetGridPoints.ts","../../src/board/board/neighbors/GetNeighborChess.ts","../../src/board/board/neighbors/GetNeighborChessDirection.ts","../../src/board/board/neighbors/GetNeighborTileDirection.ts","../../src/board/board/neighbors/GetNeighborTileXY.ts","../../src/board/board/neighbors/GetNeighborTileXYAtAngle.ts","../../src/board/board/tileposition/GetOppositeDirection.ts","../../src/board/board/blocker/HasBlocker.ts","../../src/board/board/tileposition/IsDirectionInCone.ts","../../src/board/board/worldposition/IsOverlappingPoint.ts","../../src/board/board/chess/RemoveAllChess.ts","../../src/board/board/chess/RemoveChess.ts","../../src/board/board/ring/RingToTileXYArray.ts","../../src/board/board/tileposition/TileXYArrayToChessArray.ts","../../src/board/board/tileposition/TileZToChessArray.ts","../../src/board/board/worldposition/TileXYArrayToWorldXYArray.ts","../../src/board/board/worldposition/TileXYToWorldXY.ts","../../src/board/board/worldposition/WorldXYToChess.ts","../../src/board/board/worldposition/WorldXYToTileXY.ts","../../node_modules/@phaserjs/phaser/math/Between.js","../../node_modules/@phaserjs/phaser/gameobjects/sprite/SetTint.js","../../node_modules/@phaserjs/phaser/Game.js","../../node_modules/@phaserjs/phaser/events/EventEmitter.js","../../node_modules/@phaserjs/phaser/dom/DOMContentLoaded.js","../../node_modules/@phaserjs/phaser/dom/AddToDOM.js","../../node_modules/@phaserjs/phaser/config/Banner.js","../../node_modules/@phaserjs/phaser/config/WebGLRenderer.js","../../node_modules/@phaserjs/phaser/scenes/Scene.js"],"sourcesContent":["let instance;\r\nlet frame = 0;\r\nlet elapsed = 0;\r\nconst GameInstance = {\r\n    get: () => {\r\n        return instance;\r\n    },\r\n    set: (game) => {\r\n        instance = game;\r\n    },\r\n    getFrame: () => {\r\n        return frame;\r\n    },\r\n    setFrame: (current) => {\r\n        frame = current;\r\n    },\r\n    getElapsed: () => {\r\n        return elapsed;\r\n    },\r\n    setElapsed: (current) => {\r\n        elapsed = current;\r\n    }\r\n};\n\nexport { GameInstance, elapsed, frame, instance };\n","let bgColor = 0;\r\nfunction BackgroundColor(color = 0) {\r\n    return () => {\r\n        bgColor = color;\r\n    };\r\n}\r\nfunction GetBackgroundColor() {\r\n    return bgColor;\r\n}\n\nexport { BackgroundColor, GetBackgroundColor };\n","let _width = 800;\r\nlet _height = 600;\r\nlet _resolution = 1;\r\nfunction Size(width = 800, height = 600, resolution = 1) {\r\n    if (resolution === 0) {\r\n        resolution = window.devicePixelRatio;\r\n    }\r\n    return () => {\r\n        _width = width;\r\n        _height = height;\r\n        _resolution = resolution;\r\n    };\r\n}\r\nfunction GetWidth() {\r\n    return _width;\r\n}\r\nfunction GetHeight() {\r\n    return _height;\r\n}\r\nfunction GetResolution() {\r\n    return _resolution;\r\n}\n\nexport { GetHeight, GetResolution, GetWidth, Size };\n","const queue = [];\r\nconst BindingQueue = {\r\n    add: (texture) => {\r\n        queue.push(texture);\r\n    },\r\n    get: () => {\r\n        return queue;\r\n    },\r\n    clear: () => {\r\n        queue.length = 0;\r\n    }\r\n};\n\nexport { BindingQueue };\n","let instance;\r\nfunction SetRenderer(renderer) {\r\n    instance = renderer;\r\n}\r\nfunction GetRenderer() {\r\n    return instance;\r\n}\n\nexport { GetRenderer, SetRenderer };\n","let originX = 0.5;\r\nlet originY = 0.5;\r\nfunction DefaultOrigin(x = 0.5, y = x) {\r\n    return () => {\r\n        originX = x;\r\n        originY = y;\r\n    };\r\n}\n\nexport { DefaultOrigin, originX, originY };\n","import { GetElement } from '../dom/GetElement.js';\n\nlet parent;\r\nfunction Parent(parentElement) {\r\n    return () => {\r\n        if (parentElement) {\r\n            parent = GetElement(parentElement);\r\n        }\r\n    };\r\n}\r\nfunction GetParent() {\r\n    return parent;\r\n}\n\nexport { GetParent, Parent };\n","let maxTextures = 0;\r\nfunction MaxTextures(max = 0) {\r\n    return () => {\r\n        maxTextures = max;\r\n    };\r\n}\r\nfunction SetMaxTextures(max) {\r\n    maxTextures = max;\r\n}\r\nfunction GetMaxTextures() {\r\n    return maxTextures;\r\n}\n\nexport { GetMaxTextures, MaxTextures, SetMaxTextures };\n","function GetElement(target) {\r\n    let element;\r\n    if (target) {\r\n        if (typeof target === 'string') {\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1) {\r\n            element = target;\r\n        }\r\n    }\r\n    if (!element) {\r\n        element = document.body;\r\n    }\r\n    return element;\r\n}\n\nexport { GetElement };\n","let _scenes = [];\r\nfunction Scenes(scenes) {\r\n    return () => {\r\n        _scenes = [].concat(scenes);\r\n    };\r\n}\r\nfunction GetScenes() {\r\n    return _scenes;\r\n}\n\nexport { GetScenes, Scenes };\n","let _contextAttributes = {\r\n    alpha: false,\r\n    antialias: false,\r\n    depth: false,\r\n    premultipliedAlpha: false\r\n};\r\nfunction WebGLContext(contextAttributes) {\r\n    return () => {\r\n        _contextAttributes = contextAttributes;\r\n    };\r\n}\r\nfunction GetWebGLContext() {\r\n    return _contextAttributes;\r\n}\n\nexport { GetWebGLContext, WebGLContext };\n","let gl;\r\nconst GL = {\r\n    get: () => {\r\n        return gl;\r\n    },\r\n    set: (context) => {\r\n        gl = context;\r\n    }\r\n};\n\nexport { GL };\n","class FBOSystem {\r\n    constructor(renderer) {\r\n        this.stack = [];\r\n        this.current = null;\r\n        this.renderer = renderer;\r\n    }\r\n    reset() {\r\n        this.stack = [];\r\n        this.current = null;\r\n        const renderer = this.renderer;\r\n        const gl = renderer.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.viewport(0, 0, renderer.width, renderer.height);\r\n    }\r\n    add(framebuffer, clear = true, width = 0, height = 0) {\r\n        this.stack.push({ framebuffer, width, height });\r\n        this.set(framebuffer, clear, width, height);\r\n    }\r\n    set(framebuffer, clear = true, width = 0, height = 0) {\r\n        const renderer = this.renderer;\r\n        const gl = renderer.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        if (clear) {\r\n            gl.clearColor(0, 0, 0, 0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n        if (width > 0) {\r\n            gl.viewport(0, 0, width, height);\r\n        }\r\n        this.current = framebuffer;\r\n    }\r\n    pop() {\r\n        this.stack.pop();\r\n        const len = this.stack.length;\r\n        if (len > 0) {\r\n            const entry = this.stack[len - 1];\r\n            this.set(entry.framebuffer, false, entry.width, entry.height);\r\n        }\r\n        else {\r\n            this.reset();\r\n        }\r\n    }\r\n    rebind() {\r\n        const gl = this.renderer.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.current);\r\n    }\r\n    destroy() {\r\n        this.stack = [];\r\n    }\r\n}\n\nexport { FBOSystem };\n","import { GL } from '../GL.js';\n\nfunction CreateGLTexture(binding) {\r\n    const gl = GL.get();\r\n    if (!gl) {\r\n        return;\r\n    }\r\n    const { parent, flipY, unpackPremultiplyAlpha, minFilter, magFilter, wrapS, wrapT, generateMipmap, isPOT } = binding;\r\n    const source = parent.image;\r\n    let width = parent.width;\r\n    let height = parent.height;\r\n    const glTexture = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, unpackPremultiplyAlpha);\r\n    if (source) {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n        width = source.width;\r\n        height = source.height;\r\n    }\r\n    else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n    if (generateMipmap && isPOT) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    binding.texture = glTexture;\r\n    return glTexture;\r\n}\n\nexport { CreateGLTexture };\n","import { GL } from '../GL.js';\n\nfunction DeleteGLTexture(texture) {\r\n    const gl = GL.get();\r\n    if (!gl) {\r\n        return;\r\n    }\r\n    if (gl.isTexture(texture)) {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\n\nexport { DeleteGLTexture };\n","import { GL } from '../GL.js';\nimport { CreateGLTexture } from './CreateGLTexture.js';\nimport { DeleteFramebuffer } from '../fbo/DeleteFramebuffer.js';\nimport { DeleteGLTexture } from './DeleteGLTexture.js';\nimport { IsSizePowerOfTwo } from '../../../math/pow2/IsSizePowerOfTwo.js';\nimport { SetGLTextureFilterMode } from './SetGLTextureFilterMode.js';\nimport { UpdateGLTexture } from './UpdateGLTexture.js';\n\nclass GLTextureBinding {\r\n    constructor(parent, config = {}) {\r\n        this.index = 0;\r\n        this.indexCounter = -1;\r\n        this.dirtyIndex = true;\r\n        this.unpackPremultiplyAlpha = true;\r\n        this.flipY = false;\r\n        this.isPOT = false;\r\n        this.generateMipmap = false;\r\n        const gl = GL.get();\r\n        this.parent = parent;\r\n        this.isPOT = IsSizePowerOfTwo(parent.width, parent.height);\r\n        const { texture = null, framebuffer = null, unpackPremultiplyAlpha = true, minFilter = gl.LINEAR, magFilter = gl.LINEAR, wrapS = gl.CLAMP_TO_EDGE, wrapT = gl.CLAMP_TO_EDGE, generateMipmap = this.isPOT, flipY = false } = config;\r\n        this.minFilter = minFilter;\r\n        this.magFilter = magFilter;\r\n        this.wrapS = wrapS;\r\n        this.wrapT = wrapT;\r\n        this.generateMipmap = generateMipmap;\r\n        this.flipY = flipY;\r\n        this.unpackPremultiplyAlpha = unpackPremultiplyAlpha;\r\n        if (framebuffer) {\r\n            this.framebuffer = framebuffer;\r\n        }\r\n        if (texture) {\r\n            this.texture = texture;\r\n        }\r\n        else {\r\n            CreateGLTexture(this);\r\n        }\r\n    }\r\n    setFilter(linear) {\r\n        if (this.texture) {\r\n            SetGLTextureFilterMode(this.texture, linear);\r\n        }\r\n    }\r\n    create() {\r\n        const texture = this.texture;\r\n        if (texture) {\r\n            DeleteGLTexture(texture);\r\n        }\r\n        return CreateGLTexture(this);\r\n    }\r\n    update() {\r\n        const texture = this.texture;\r\n        if (!texture) {\r\n            return CreateGLTexture(this);\r\n        }\r\n        else {\r\n            return UpdateGLTexture(this);\r\n        }\r\n    }\r\n    setIndex(index) {\r\n        this.dirtyIndex = (index !== this.index);\r\n        this.index = index;\r\n    }\r\n    destroy() {\r\n        DeleteGLTexture(this.texture);\r\n        DeleteFramebuffer(this.framebuffer);\r\n        this.parent = null;\r\n        this.texture = null;\r\n        this.framebuffer = null;\r\n    }\r\n}\n\nexport { GLTextureBinding };\n","function IsSizePowerOfTwo(width, height) {\r\n    if (width < 1 || height < 1) {\r\n        return false;\r\n    }\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\n\nexport { IsSizePowerOfTwo };\n","import { GL } from '../GL.js';\n\nfunction SetGLTextureFilterMode(texture, linear = true) {\r\n    const gl = GL.get();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n}\n\nexport { SetGLTextureFilterMode };\n","import { GL } from '../GL.js';\n\nfunction UpdateGLTexture(binding) {\r\n    const gl = GL.get();\r\n    const source = binding.parent.image;\r\n    const width = source.width;\r\n    const height = source.height;\r\n    if (width > 0 && height > 0) {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, binding.flipY);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n    }\r\n    return binding.texture;\r\n}\n\nexport { UpdateGLTexture };\n","import { GL } from '../GL.js';\n\nfunction DeleteFramebuffer(framebuffer) {\r\n    const gl = GL.get();\r\n    if (gl && gl.isFramebuffer(framebuffer)) {\r\n        gl.deleteFramebuffer(framebuffer);\r\n    }\r\n}\n\nexport { DeleteFramebuffer };\n","import { GL } from '../GL.js';\n\nclass IndexedBuffer {\r\n    constructor(batchSize, dataSize, indexSize, vertexElementSize, quadIndexSize) {\r\n        this.batchSize = batchSize;\r\n        this.dataSize = dataSize;\r\n        this.indexSize = indexSize;\r\n        this.vertexElementSize = vertexElementSize;\r\n        this.quadIndexSize = quadIndexSize;\r\n        this.vertexByteSize = vertexElementSize * dataSize;\r\n        this.quadByteSize = this.vertexByteSize * 4;\r\n        this.quadElementSize = vertexElementSize * 4;\r\n        this.bufferByteSize = batchSize * this.quadByteSize;\r\n        this.create();\r\n    }\r\n    create() {\r\n        let ibo = [];\r\n        for (let i = 0; i < (this.batchSize * this.indexSize); i += this.indexSize) {\r\n            ibo.push(i + 0, i + 1, i + 2, i + 2, i + 3, i + 0);\r\n        }\r\n        this.data = new ArrayBuffer(this.bufferByteSize);\r\n        this.index = new Uint16Array(ibo);\r\n        this.vertexViewF32 = new Float32Array(this.data);\r\n        this.vertexViewU32 = new Uint32Array(this.data);\r\n        const gl = GL.get();\r\n        this.vertexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.data, gl.DYNAMIC_DRAW);\r\n        this.indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        ibo = [];\r\n    }\r\n    destroy() {\r\n    }\r\n}\n\nexport { IndexedBuffer };\n","class Frame {\r\n    constructor(texture, key, x, y, width, height) {\r\n        this.trimmed = false;\r\n        this.texture = texture;\r\n        this.key = key;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n        this.updateUVs();\r\n    }\r\n    setPivot(x, y) {\r\n        this.pivot = { x, y };\r\n    }\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n        this.updateUVs();\r\n    }\r\n    setSourceSize(width, height) {\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n    }\r\n    setTrim(width, height, x, y, w, h) {\r\n        this.trimmed = true;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n        this.spriteSourceSizeX = x;\r\n        this.spriteSourceSizeY = y;\r\n        this.spriteSourceSizeWidth = w;\r\n        this.spriteSourceSizeHeight = h;\r\n    }\r\n    getExtent(originX, originY) {\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n        let left;\r\n        let right;\r\n        let top;\r\n        let bottom;\r\n        if (this.trimmed) {\r\n            left = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            right = left + this.spriteSourceSizeWidth;\r\n            top = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n            bottom = top + this.spriteSourceSizeHeight;\r\n        }\r\n        else {\r\n            left = -originX * sourceSizeWidth;\r\n            right = left + sourceSizeWidth;\r\n            top = -originY * sourceSizeHeight;\r\n            bottom = top + sourceSizeHeight;\r\n        }\r\n        return { left, right, top, bottom };\r\n    }\r\n    setExtent(child) {\r\n        const transform = child.transform;\r\n        const originX = transform.origin.x;\r\n        const originY = transform.origin.y;\r\n        const sourceSizeWidth = this.sourceSizeWidth;\r\n        const sourceSizeHeight = this.sourceSizeHeight;\r\n        let x;\r\n        let y;\r\n        let width;\r\n        let height;\r\n        if (this.trimmed) {\r\n            x = this.spriteSourceSizeX - (originX * sourceSizeWidth);\r\n            y = this.spriteSourceSizeY - (originY * sourceSizeHeight);\r\n            width = this.spriteSourceSizeWidth;\r\n            height = this.spriteSourceSizeHeight;\r\n        }\r\n        else {\r\n            x = -originX * sourceSizeWidth;\r\n            y = -originY * sourceSizeHeight;\r\n            width = sourceSizeWidth;\r\n            height = sourceSizeHeight;\r\n        }\r\n        transform.setExtent(x, y, width, height);\r\n    }\r\n    updateUVs() {\r\n        const { x, y, width, height } = this;\r\n        const baseTextureWidth = this.texture.width;\r\n        const baseTextureHeight = this.texture.height;\r\n        this.u0 = x / baseTextureWidth;\r\n        this.v0 = y / baseTextureHeight;\r\n        this.u1 = (x + width) / baseTextureWidth;\r\n        this.v1 = (y + height) / baseTextureHeight;\r\n    }\r\n}\n\nexport { Frame };\n","import { BindingQueue } from '../renderer/BindingQueue.js';\nimport { Frame } from './Frame.js';\n\nclass Texture {\r\n    constructor(image, width, height) {\r\n        this.key = '';\r\n        if (image) {\r\n            width = image.width;\r\n            height = image.height;\r\n        }\r\n        this.image = image;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.frames = new Map();\r\n        this.data = {};\r\n        this.addFrame('__BASE', 0, 0, width, height);\r\n        BindingQueue.add(this);\r\n    }\r\n    addFrame(key, x, y, width, height) {\r\n        if (this.frames.has(key)) {\r\n            return null;\r\n        }\r\n        const frame = new Frame(this, key, x, y, width, height);\r\n        this.frames.set(key, frame);\r\n        if (!this.firstFrame || this.firstFrame.key === '__BASE') {\r\n            this.firstFrame = frame;\r\n        }\r\n        return frame;\r\n    }\r\n    getFrame(key) {\r\n        if (!key) {\r\n            return this.firstFrame;\r\n        }\r\n        if (key instanceof Frame) {\r\n            key = key.key;\r\n        }\r\n        let frame = this.frames.get(key);\r\n        if (!frame) {\r\n            console.warn(`Frame missing: ${key}`);\r\n            frame = this.firstFrame;\r\n        }\r\n        return frame;\r\n    }\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        const frame = this.frames.get('__BASE');\r\n        frame.setSize(width, height);\r\n    }\r\n    destroy() {\r\n        if (this.binding) {\r\n            this.binding.destroy();\r\n        }\r\n        this.frames.clear();\r\n        this.data = null;\r\n        this.image = null;\r\n        this.firstFrame = null;\r\n    }\r\n}\n\nexport { Texture };\n","let instance;\r\nconst WebGLRendererInstance = {\r\n    get: () => {\r\n        return instance;\r\n    },\r\n    set: (renderer) => {\r\n        instance = renderer;\r\n    }\r\n};\n\nexport { WebGLRendererInstance, instance };\n","import { GetWidth, GetHeight, GetResolution } from '../../../config/Size.js';\nimport '../../BindingQueue.js';\nimport '../GL.js';\nimport { CreateFramebuffer } from '../fbo/CreateFramebuffer.js';\nimport '../textures/CreateGLTexture.js';\nimport '../fbo/DeleteFramebuffer.js';\nimport '../textures/DeleteGLTexture.js';\nimport '../../../math/pow2/IsSizePowerOfTwo.js';\nimport '../textures/SetGLTextureFilterMode.js';\nimport '../textures/UpdateGLTexture.js';\nimport { GLTextureBinding } from '../textures/GLTextureBinding.js';\nimport { IndexedBuffer } from '../buffers/IndexedBuffer.js';\nimport '../../../textures/Frame.js';\nimport { Texture } from '../../../textures/Texture.js';\nimport { WebGLRendererInstance } from '../WebGLRendererInstance.js';\n\nconst shaderSource = {\r\n    fragmentShader: `\r\n#define SHADER_NAME SINGLE_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture;\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color = texture2D(uTexture, vTextureCoord);\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`,\r\n    vertexShader: `\r\n#define SHADER_NAME SINGLE_QUAD_VERT\r\n\r\nprecision highp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute float aTextureId;\r\nattribute vec4 aTintColor;\r\n\r\nuniform mat4 uProjectionMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nvoid main (void)\r\n{\r\n    vTextureCoord = aTextureCoord;\r\n    vTextureId = aTextureId;\r\n    vTintColor = aTintColor;\r\n\r\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\r\n}`\r\n};\r\nclass SingleTextureQuadShader {\r\n    constructor(config = {}) {\r\n        this.attribs = { aVertexPosition: 0, aTextureCoord: 0, aTextureId: 0, aTintColor: 0 };\r\n        this.uniforms = { uProjectionMatrix: 0, uCameraMatrix: 0, uTexture: 0, uTime: 0, uResolution: 0 };\r\n        this.renderToFBO = false;\r\n        this.renderer = WebGLRendererInstance.get();\r\n        const { batchSize = 4096, dataSize = 4, indexSize = 4, vertexElementSize = 6, quadIndexSize = 6, fragmentShader = shaderSource.fragmentShader, vertexShader = shaderSource.vertexShader, width = GetWidth(), height = GetHeight(), resolution = GetResolution(), renderToFBO = false } = config;\r\n        this.buffer = new IndexedBuffer(batchSize, dataSize, indexSize, vertexElementSize, quadIndexSize);\r\n        this.createShaders(fragmentShader, vertexShader);\r\n        this.count = 0;\r\n        this.renderToFBO = renderToFBO;\r\n        const texture = new Texture(null, width * resolution, height * resolution);\r\n        const binding = new GLTextureBinding(texture);\r\n        texture.binding = binding;\r\n        binding.framebuffer = CreateFramebuffer(binding.texture);\r\n        this.texture = texture;\r\n        this.framebuffer = binding.framebuffer;\r\n    }\r\n    createShaders(fragmentShaderSource, vertexShaderSource) {\r\n        const gl = this.renderer.gl;\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n        gl.compileShader(fragmentShader);\r\n        let failed = false;\r\n        let message = gl.getShaderInfoLog(fragmentShader);\r\n        if (message.length > 0) {\r\n            failed = true;\r\n            console.error(message);\r\n        }\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertexShader, vertexShaderSource);\r\n        gl.compileShader(vertexShader);\r\n        message = gl.getShaderInfoLog(fragmentShader);\r\n        if (message.length > 0) {\r\n            failed = true;\r\n            console.error(message);\r\n        }\r\n        if (failed) {\r\n            return;\r\n        }\r\n        const program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        gl.useProgram(program);\r\n        this.program = program;\r\n        for (const key of Object.keys(this.attribs)) {\r\n            const location = gl.getAttribLocation(program, key);\r\n            gl.enableVertexAttribArray(location);\r\n            this.attribs[key] = location;\r\n        }\r\n        for (const key of Object.keys(this.uniforms)) {\r\n            this.uniforms[key] = gl.getUniformLocation(program, key);\r\n        }\r\n    }\r\n    bind(projectionMatrix, cameraMatrix, textureID) {\r\n        if (!this.program) {\r\n            return false;\r\n        }\r\n        const renderer = this.renderer;\r\n        const gl = renderer.gl;\r\n        const uniforms = this.uniforms;\r\n        gl.useProgram(this.program);\r\n        gl.uniformMatrix4fv(uniforms.uProjectionMatrix, false, projectionMatrix);\r\n        gl.uniformMatrix4fv(uniforms.uCameraMatrix, false, cameraMatrix);\r\n        gl.uniform1i(uniforms.uTexture, renderer.textures.textureIndex[textureID]);\r\n        gl.uniform1f(uniforms.uTime, performance.now());\r\n        gl.uniform2f(uniforms.uResolution, renderer.width, renderer.height);\r\n        this.bindBuffers(this.buffer.indexBuffer, this.buffer.vertexBuffer);\r\n        return true;\r\n    }\r\n    bindBuffers(indexBuffer, vertexBuffer) {\r\n        const gl = this.renderer.gl;\r\n        const stride = this.buffer.vertexByteSize;\r\n        const attribs = this.attribs;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n        gl.vertexAttribPointer(attribs.aVertexPosition, 2, gl.FLOAT, false, stride, 0);\r\n        gl.vertexAttribPointer(attribs.aTextureCoord, 2, gl.FLOAT, false, stride, 8);\r\n        gl.vertexAttribPointer(attribs.aTextureId, 1, gl.FLOAT, false, stride, 16);\r\n        gl.vertexAttribPointer(attribs.aTintColor, 4, gl.UNSIGNED_BYTE, true, stride, 20);\r\n        this.count = 0;\r\n    }\r\n    draw(count) {\r\n        const renderer = this.renderer;\r\n        const gl = renderer.gl;\r\n        const buffer = this.buffer;\r\n        if (count === buffer.batchSize) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, buffer.data, gl.DYNAMIC_DRAW);\r\n        }\r\n        else {\r\n            const view = buffer.vertexViewF32.subarray(0, count * buffer.quadElementSize);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\r\n        }\r\n        if (this.renderToFBO) {\r\n            renderer.fbo.add(this.framebuffer, true);\r\n        }\r\n        gl.drawElements(gl.TRIANGLES, count * buffer.quadIndexSize, gl.UNSIGNED_SHORT, 0);\r\n        if (this.renderToFBO) {\r\n            renderer.fbo.pop();\r\n        }\r\n    }\r\n    flush() {\r\n        const count = this.count;\r\n        if (count === 0) {\r\n            return false;\r\n        }\r\n        this.draw(count);\r\n        this.prevCount = count;\r\n        this.count = 0;\r\n        return true;\r\n    }\r\n}\n\nexport { SingleTextureQuadShader };\n","import { GL } from '../GL.js';\n\nfunction CreateFramebuffer(texture, attachment) {\r\n    const gl = GL.get();\r\n    if (!attachment) {\r\n        attachment = gl.COLOR_ATTACHMENT0;\r\n    }\r\n    const framebuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture, 0);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    return framebuffer;\r\n}\n\nexport { CreateFramebuffer };\n","import '../../../config/Size.js';\nimport '../../BindingQueue.js';\nimport { GetMaxTextures } from '../../../config/MaxTextures.js';\nimport '../GL.js';\nimport '../fbo/CreateFramebuffer.js';\nimport '../textures/CreateGLTexture.js';\nimport '../fbo/DeleteFramebuffer.js';\nimport '../textures/DeleteGLTexture.js';\nimport '../../../math/pow2/IsSizePowerOfTwo.js';\nimport '../textures/SetGLTextureFilterMode.js';\nimport '../textures/UpdateGLTexture.js';\nimport '../textures/GLTextureBinding.js';\nimport '../buffers/IndexedBuffer.js';\nimport '../../../textures/Frame.js';\nimport '../../../textures/Texture.js';\nimport '../WebGLRendererInstance.js';\nimport { SingleTextureQuadShader } from './SingleTextureQuadShader.js';\n\nconst fragmentShader = `\r\n#define SHADER_NAME MULTI_QUAD_FRAG\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture[%count%];\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color;\r\n\r\n    %forloop%\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`;\r\nclass MultiTextureQuadShader extends SingleTextureQuadShader {\r\n    constructor(config = { fragmentShader }) {\r\n        super(config);\r\n    }\r\n    createShaders(fragmentShaderSource, vertexShaderSource) {\r\n        const maxTextures = GetMaxTextures();\r\n        let src = '';\r\n        for (let i = 1; i < maxTextures; i++) {\r\n            if (i > 1) {\r\n                src += '\\n\\telse ';\r\n            }\r\n            if (i < maxTextures - 1) {\r\n                src += `if (vTextureId < ${i}.5)`;\r\n            }\r\n            src += '\\n\\t{';\r\n            src += `\\n\\t\\tcolor = texture2D(uTexture[${i}], vTextureCoord);`;\r\n            src += '\\n\\t}';\r\n        }\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\r\n        fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\r\n        super.createShaders(fragmentShaderSource, vertexShaderSource);\r\n    }\r\n    bind(projectionMatrix, cameraMatrix) {\r\n        if (!this.program) {\r\n            return false;\r\n        }\r\n        const renderer = this.renderer;\r\n        const gl = renderer.gl;\r\n        const uniforms = this.uniforms;\r\n        gl.useProgram(this.program);\r\n        gl.uniformMatrix4fv(uniforms.uProjectionMatrix, false, projectionMatrix);\r\n        gl.uniformMatrix4fv(uniforms.uCameraMatrix, false, cameraMatrix);\r\n        gl.uniform1iv(uniforms.uTexture, renderer.textures.textureIndex);\r\n        gl.uniform1f(uniforms.uTime, performance.now());\r\n        gl.uniform2f(uniforms.uResolution, renderer.width, renderer.height);\r\n        this.bindBuffers(this.buffer.indexBuffer, this.buffer.vertexBuffer);\r\n        return true;\r\n    }\r\n}\n\nexport { MultiTextureQuadShader };\n","import '../../../config/Size.js';\nimport '../../BindingQueue.js';\nimport '../GL.js';\nimport '../fbo/CreateFramebuffer.js';\nimport '../textures/CreateGLTexture.js';\nimport '../fbo/DeleteFramebuffer.js';\nimport '../textures/DeleteGLTexture.js';\nimport '../../../math/pow2/IsSizePowerOfTwo.js';\nimport '../textures/SetGLTextureFilterMode.js';\nimport '../textures/UpdateGLTexture.js';\nimport '../textures/GLTextureBinding.js';\nimport '../buffers/IndexedBuffer.js';\nimport '../../../textures/Frame.js';\nimport '../../../textures/Texture.js';\nimport '../WebGLRendererInstance.js';\nimport { SingleTextureQuadShader } from './SingleTextureQuadShader.js';\n\nclass ShaderSystem {\r\n    constructor(renderer, currentShader) {\r\n        this.renderer = renderer;\r\n        const stackEntry = {\r\n            shader: new currentShader()\r\n        };\r\n        this.stack = [stackEntry];\r\n        this.currentEntry = stackEntry;\r\n        this.current = stackEntry.shader;\r\n        this.singleQuadShader = new SingleTextureQuadShader();\r\n    }\r\n    add(shader, textureID) {\r\n        const stackEntry = { shader, textureID };\r\n        this.stack.push(stackEntry);\r\n        return stackEntry;\r\n    }\r\n    set(shader, textureID) {\r\n        this.flush();\r\n        const renderer = this.renderer;\r\n        const projectionMatrix = renderer.projectionMatrix;\r\n        const cameraMatrix = renderer.currentCamera.matrix;\r\n        const success = shader.bind(projectionMatrix, cameraMatrix, textureID);\r\n        if (success) {\r\n            const entry = this.add(shader, textureID);\r\n            this.currentEntry = entry;\r\n            this.current = shader;\r\n        }\r\n        return success;\r\n    }\r\n    setDefault(textureID) {\r\n        this.set(this.singleQuadShader, textureID);\r\n    }\r\n    pop() {\r\n        this.flush();\r\n        const stack = this.stack;\r\n        if (stack.length > 1) {\r\n            stack.pop();\r\n        }\r\n        this.currentEntry = stack[stack.length - 1];\r\n        this.current = this.currentEntry.shader;\r\n    }\r\n    reset() {\r\n        this.pop();\r\n        this.rebind();\r\n    }\r\n    flush() {\r\n        if (this.current.flush()) {\r\n            this.renderer.flushTotal++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    rebind() {\r\n        const renderer = this.renderer;\r\n        const projectionMatrix = renderer.projectionMatrix;\r\n        const cameraMatrix = renderer.currentCamera.matrix;\r\n        const current = this.currentEntry;\r\n        current.shader.bind(projectionMatrix, cameraMatrix, current.textureID);\r\n    }\r\n    popAndRebind() {\r\n        this.pop();\r\n        this.rebind();\r\n    }\r\n    clear() {\r\n    }\r\n    destroy() {\r\n    }\r\n}\n\nexport { ShaderSystem };\n","const fragTemplate = [\r\n    'precision mediump float;',\r\n    'void main(void){',\r\n    'float test = 0.1;',\r\n    '%forloop%',\r\n    'gl_FragColor = vec4(0.0);',\r\n    '}'\r\n].join('\\n');\r\nfunction GenerateSrc(maxIfs) {\r\n    let src = '';\r\n    for (let i = 0; i < maxIfs; ++i) {\r\n        if (i > 0) {\r\n            src += '\\nelse ';\r\n        }\r\n        if (i < maxIfs - 1) {\r\n            src += `if(test == ${i}.0){}`;\r\n        }\r\n    }\r\n    return src;\r\n}\r\nfunction CheckShaderMaxIfStatements(maxIfs, gl) {\r\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    while (true) {\r\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, GenerateSrc(maxIfs));\r\n        gl.shaderSource(shader, fragmentSrc);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            maxIfs = (maxIfs / 2) | 0;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return maxIfs;\r\n}\n\nexport { CheckShaderMaxIfStatements };\n","import { BindingQueue } from '../../BindingQueue.js';\nimport { SetMaxTextures, GetMaxTextures } from '../../../config/MaxTextures.js';\nimport '../GL.js';\nimport './CreateGLTexture.js';\nimport '../fbo/DeleteFramebuffer.js';\nimport './DeleteGLTexture.js';\nimport '../../../math/pow2/IsSizePowerOfTwo.js';\nimport './SetGLTextureFilterMode.js';\nimport './UpdateGLTexture.js';\nimport { GLTextureBinding } from './GLTextureBinding.js';\nimport { CheckShaderMaxIfStatements } from '../shaders/CheckShaderMaxIfStatements.js';\n\nclass TextureSystem {\r\n    constructor(renderer) {\r\n        this.startActiveTexture = 0;\r\n        this.renderer = renderer;\r\n        this.tempTextures = [];\r\n        this.textureIndex = [];\r\n    }\r\n    init() {\r\n        const gl = this.renderer.gl;\r\n        let maxGPUTextures = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), gl);\r\n        const maxConfigTextures = GetMaxTextures();\r\n        if (maxConfigTextures === 0 || (maxConfigTextures > 0 && maxConfigTextures > maxGPUTextures)) {\r\n            SetMaxTextures(maxGPUTextures);\r\n        }\r\n        else if (maxConfigTextures > 0 && maxConfigTextures < maxGPUTextures) {\r\n            maxGPUTextures = Math.max(8, maxConfigTextures);\r\n        }\r\n        const tempTextures = this.tempTextures;\r\n        if (tempTextures.length) {\r\n            tempTextures.forEach(texture => {\r\n                gl.deleteTexture(texture);\r\n            });\r\n        }\r\n        const index = [];\r\n        for (let texturesIndex = 0; texturesIndex < maxGPUTextures; texturesIndex++) {\r\n            const tempTexture = gl.createTexture();\r\n            gl.activeTexture(gl.TEXTURE0 + texturesIndex);\r\n            gl.bindTexture(gl.TEXTURE_2D, tempTexture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\r\n            tempTextures[texturesIndex] = tempTexture;\r\n            index.push(texturesIndex);\r\n        }\r\n        this.maxTextures = maxGPUTextures;\r\n        this.textureIndex = index;\r\n        this.currentActiveTexture = 1;\r\n    }\r\n    update() {\r\n        const queue = BindingQueue.get();\r\n        for (let i = 0; i < queue.length; i++) {\r\n            const texture = queue[i];\r\n            if (!texture.binding) {\r\n                texture.binding = new GLTextureBinding(texture);\r\n            }\r\n        }\r\n        BindingQueue.clear();\r\n    }\r\n    reset() {\r\n        const gl = this.renderer.gl;\r\n        const temp = this.tempTextures;\r\n        for (let i = 0; i < temp.length; i++) {\r\n            gl.activeTexture(gl.TEXTURE0 + i);\r\n            gl.bindTexture(gl.TEXTURE_2D, temp[i]);\r\n        }\r\n        this.currentActiveTexture = 1;\r\n        this.startActiveTexture++;\r\n    }\r\n    bind(texture, index = 0) {\r\n        const gl = this.renderer.gl;\r\n        const binding = texture.binding;\r\n        binding.setIndex(index);\r\n        gl.activeTexture(gl.TEXTURE0 + index);\r\n        gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n    }\r\n    unbind(index = 0) {\r\n        const gl = this.renderer.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + index);\r\n        gl.bindTexture(gl.TEXTURE_2D, this.tempTextures[index]);\r\n        if (index > 0) {\r\n            this.startActiveTexture++;\r\n        }\r\n    }\r\n    request(texture) {\r\n        const gl = this.renderer.gl;\r\n        const binding = texture.binding;\r\n        const currentActiveTexture = this.currentActiveTexture;\r\n        if (binding.indexCounter >= this.startActiveTexture) {\r\n            return false;\r\n        }\r\n        binding.indexCounter = this.startActiveTexture;\r\n        if (currentActiveTexture < this.maxTextures) {\r\n            binding.setIndex(currentActiveTexture);\r\n            gl.activeTexture(gl.TEXTURE0 + currentActiveTexture);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n            this.currentActiveTexture++;\r\n        }\r\n        else {\r\n            this.renderer.flush();\r\n            this.startActiveTexture++;\r\n            binding.indexCounter = this.startActiveTexture;\r\n            binding.setIndex(1);\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, binding.texture);\r\n            this.currentActiveTexture = 2;\r\n        }\r\n        return true;\r\n    }\r\n}\n\nexport { TextureSystem };\n","import { GetBackgroundColor } from '../../config/BackgroundColor.js';\nimport { GetWidth, GetHeight, GetResolution } from '../../config/Size.js';\nimport '../BindingQueue.js';\nimport '../../config/MaxTextures.js';\nimport { GetWebGLContext } from '../../config/WebGLContext.js';\nimport { FBOSystem } from './fbo/FBOSystem.js';\nimport { GL } from './GL.js';\nimport { GetRGBArray } from './colors/GetRGBArray.js';\nimport { ExactEquals } from '../../math/matrix2d-funcs/ExactEquals.js';\nimport './fbo/CreateFramebuffer.js';\nimport './textures/CreateGLTexture.js';\nimport './fbo/DeleteFramebuffer.js';\nimport './textures/DeleteGLTexture.js';\nimport '../../math/pow2/IsSizePowerOfTwo.js';\nimport './textures/SetGLTextureFilterMode.js';\nimport './textures/UpdateGLTexture.js';\nimport './textures/GLTextureBinding.js';\nimport './buffers/IndexedBuffer.js';\nimport '../../textures/Frame.js';\nimport '../../textures/Texture.js';\nimport { WebGLRendererInstance } from './WebGLRendererInstance.js';\nimport './shaders/SingleTextureQuadShader.js';\nimport { MultiTextureQuadShader } from './shaders/MultiTextureQuadShader.js';\nimport { Ortho } from './cameras/Ortho.js';\nimport { ShaderSystem } from './shaders/ShaderSystem.js';\nimport './shaders/CheckShaderMaxIfStatements.js';\nimport { TextureSystem } from './textures/TextureSystem.js';\n\nclass WebGLRenderer {\r\n    constructor() {\r\n        this.clearColor = [0, 0, 0, 1];\r\n        this.flushTotal = 0;\r\n        this.clearBeforeRender = true;\r\n        this.optimizeRedraw = false;\r\n        this.autoResize = true;\r\n        this.contextLost = false;\r\n        this.currentCamera = null;\r\n        this.width = GetWidth();\r\n        this.height = GetHeight();\r\n        this.resolution = GetResolution();\r\n        this.setBackgroundColor(GetBackgroundColor());\r\n        const canvas = document.createElement('canvas');\r\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\r\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\r\n        this.canvas = canvas;\r\n        this.fbo = new FBOSystem(this);\r\n        this.textures = new TextureSystem(this);\r\n        this.initContext();\r\n        WebGLRendererInstance.set(this);\r\n        this.shaders = new ShaderSystem(this, MultiTextureQuadShader);\r\n    }\r\n    initContext() {\r\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\r\n        GL.set(gl);\r\n        this.gl = gl;\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n        this.resize(this.width, this.height, this.resolution);\r\n        this.textures.init();\r\n    }\r\n    resize(width, height, resolution = 1) {\r\n        this.width = width * resolution;\r\n        this.height = height * resolution;\r\n        this.resolution = resolution;\r\n        const canvas = this.canvas;\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        if (this.autoResize) {\r\n            canvas.style.width = (this.width / resolution).toString() + 'px';\r\n            canvas.style.height = (this.height / resolution).toString() + 'px';\r\n        }\r\n        this.gl.viewport(0, 0, this.width, this.height);\r\n        this.projectionMatrix = Ortho(width, height);\r\n    }\r\n    onContextLost(event) {\r\n        event.preventDefault();\r\n        this.contextLost = true;\r\n    }\r\n    onContextRestored() {\r\n        this.contextLost = false;\r\n        this.initContext();\r\n    }\r\n    setBackgroundColor(color) {\r\n        GetRGBArray(color, this.clearColor);\r\n        return this;\r\n    }\r\n    reset(framebuffer = null, width = this.width, height = this.height) {\r\n        const gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        gl.viewport(0, 0, width, height);\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        this.flushTotal = 0;\r\n        this.currentCamera = null;\r\n        this.textures.update();\r\n    }\r\n    render(renderData) {\r\n        if (this.contextLost) {\r\n            return;\r\n        }\r\n        this.reset();\r\n        if (this.optimizeRedraw && renderData.numDirtyFrames === 0 && renderData.numDirtyCameras === 0) {\r\n            return;\r\n        }\r\n        const gl = this.gl;\r\n        if (this.clearBeforeRender) {\r\n            const cls = this.clearColor;\r\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n        const worlds = renderData.worldData;\r\n        for (let i = 0; i < worlds.length; i++) {\r\n            const { camera, renderList } = worlds[i];\r\n            if (!this.currentCamera || !ExactEquals(camera.worldTransform, this.currentCamera.worldTransform)) {\r\n                this.flush();\r\n                this.currentCamera = camera;\r\n                this.shaders.rebind();\r\n            }\r\n            renderList.forEach(entry => {\r\n                if (entry.children.length) {\r\n                    this.renderNode(entry);\r\n                }\r\n                else {\r\n                    entry.node.renderGL(this);\r\n                }\r\n            });\r\n        }\r\n        this.flush();\r\n    }\r\n    renderNode(entry) {\r\n        entry.node.renderGL(this);\r\n        entry.children.forEach(child => {\r\n            if (child.children.length > 0) {\r\n                this.renderNode(child);\r\n            }\r\n            else {\r\n                child.node.renderGL(this);\r\n            }\r\n        });\r\n        entry.node.postRenderGL(this);\r\n    }\r\n    flush() {\r\n        this.shaders.flush();\r\n    }\r\n    destroy() {\r\n        WebGLRendererInstance.set(undefined);\r\n    }\r\n}\n\nexport { WebGLRenderer };\n","function Ortho(width, height, near = -1, far = 1) {\r\n    const m00 = -2 * (1 / -width);\r\n    const m11 = -2 * (1 / height);\r\n    const m22 = 2 * (1 / (near - far));\r\n    return new Float32Array([m00, 0, 0, 0, 0, m11, 0, 0, 0, 0, m22, 0, -1, 1, 0, 1]);\r\n}\n\nexport { Ortho };\n","function GetRGBArray(color, output = []) {\r\n    const r = color >> 16 & 0xFF;\r\n    const g = color >> 8 & 0xFF;\r\n    const b = color & 0xFF;\r\n    const a = (color > 16777215) ? color >>> 24 : 255;\r\n    output[0] = r / 255;\r\n    output[1] = g / 255;\r\n    output[2] = b / 255;\r\n    output[3] = a / 255;\r\n    return output;\r\n}\n\nexport { GetRGBArray };\n","function ExactEquals(a, b) {\r\n    return (a.a === b.a &&\r\n        a.b === b.b &&\r\n        a.c === b.c &&\r\n        a.d === b.d &&\r\n        a.tx === b.tx &&\r\n        a.ty === b.ty);\r\n}\n\nexport { ExactEquals };\n","class Matrix2D {\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.set(a, b, c, d, tx, ty);\r\n    }\r\n    set(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n        return this;\r\n    }\r\n    identity() {\r\n        return this.set();\r\n    }\r\n    toArray() {\r\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\r\n    }\r\n    fromArray(src) {\r\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\r\n    }\r\n}\n\nexport { Matrix2D };\n","import { Contains } from './Contains.js';\n\nclass Rectangle {\r\n    constructor(x = 0, y = 0, width = 0, height = 0) {\r\n        this.set(x, y, width, height);\r\n    }\r\n    set(x = 0, y = 0, width = 0, height = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    contains(x, y) {\r\n        return Contains(this, x, y);\r\n    }\r\n    set right(value) {\r\n        if (value <= this.x) {\r\n            this.width = 0;\r\n        }\r\n        else {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n    get right() {\r\n        return this.x + this.width;\r\n    }\r\n    set bottom(value) {\r\n        if (value <= this.y) {\r\n            this.height = 0;\r\n        }\r\n        else {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n    get bottom() {\r\n        return this.y + this.height;\r\n    }\r\n}\n\nexport { Rectangle };\n","function Contains(rect, x, y) {\r\n    if (rect.width <= 0 || rect.height <= 0) {\r\n        return false;\r\n    }\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\n\nexport { Contains };\n","function NOOP() {\r\n}\n\nexport { NOOP };\n","import { NOOP } from '../../utils/NOOP.js';\n\nclass Vec2Callback {\r\n    constructor(callback, x = 0, y = 0, compareValue = false) {\r\n        this.compareValue = false;\r\n        this._x = x;\r\n        this._y = y;\r\n        this.callback = callback;\r\n        this.compareValue = compareValue;\r\n    }\r\n    set(x = 0, y = 0) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this.callback(this);\r\n        return this;\r\n    }\r\n    destroy() {\r\n        this.callback = NOOP;\r\n    }\r\n    set x(value) {\r\n        if (!this.compareValue || (this.compareValue && value !== this._x)) {\r\n            this._x = value;\r\n            this.callback(this);\r\n        }\r\n    }\r\n    get x() {\r\n        return this._x;\r\n    }\r\n    set y(value) {\r\n        if (!this.compareValue || (this.compareValue && value !== this._x)) {\r\n            this._y = value;\r\n            this.callback(this);\r\n        }\r\n    }\r\n    get y() {\r\n        return this._y;\r\n    }\r\n}\n\nexport { Vec2Callback };\n","import { GameInstance } from '../GameInstance.js';\nimport { Matrix2D } from '../math/matrix2d/Matrix2D.js';\nimport '../geom/rectangle/Contains.js';\nimport { Rectangle } from '../geom/rectangle/Rectangle.js';\n\nclass StaticCamera {\r\n    constructor() {\r\n        this.type = 'StaticCamera';\r\n        this.dirtyRender = true;\r\n        const game = GameInstance.get();\r\n        this.renderer = game.renderer;\r\n        this.matrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\r\n        this.bounds = new Rectangle();\r\n        this.worldTransform = new Matrix2D();\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        const width = this.renderer.width;\r\n        const height = this.renderer.height;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.bounds.set(0, 0, width, height);\r\n    }\r\n    destroy() {\r\n        this.world = null;\r\n        this.worldTransform = null;\r\n        this.renderer = null;\r\n        this.matrix = null;\r\n        this.bounds = null;\r\n    }\r\n}\n\nexport { StaticCamera };\n","import { GetChildIndex } from './GetChildIndex.js';\nimport { RemoveChildAt } from './RemoveChildAt.js';\n\nfunction RemoveChild(parent, child) {\r\n    const currentIndex = GetChildIndex(parent, child);\r\n    if (currentIndex > -1) {\r\n        RemoveChildAt(parent, currentIndex);\r\n    }\r\n    return child;\r\n}\n\nexport { RemoveChild };\n","function GetChildIndex(parent, child) {\r\n    return parent.children.indexOf(child);\r\n}\n\nexport { GetChildIndex };\n","function RemoveChildAt(parent, index) {\r\n    const children = parent.children;\r\n    let child;\r\n    if (index >= 0 && index < children.length) {\r\n        const removed = children.splice(index, 1);\r\n        if (removed[0]) {\r\n            child = removed[0];\r\n            child.parent = null;\r\n        }\r\n    }\r\n    return child;\r\n}\n\nexport { RemoveChildAt };\n","function Emit(emitter, event, ...args) {\r\n    if (emitter.events.size === 0 || !emitter.events.has(event)) {\r\n        return false;\r\n    }\r\n    const listeners = emitter.events.get(event);\r\n    for (const ee of listeners) {\r\n        ee.callback.apply(ee.context, args);\r\n        if (ee.once) {\r\n            listeners.delete(ee);\r\n        }\r\n    }\r\n    if (listeners.size === 0) {\r\n        emitter.events.delete(event);\r\n    }\r\n    return true;\r\n}\n\nexport { Emit };\n","import { DepthFirstSearch } from './DepthFirstSearch.js';\nimport './GetChildIndex.js';\nimport './RemoveChildAt.js';\nimport { RemoveChild } from './RemoveChild.js';\nimport '../gameobjects/events/AddedToWorldEvent.js';\nimport '../gameobjects/events/RemovedFromWorldEvent.js';\nimport '../events/Emit.js';\nimport { SetWorld } from './SetWorld.js';\n\nfunction SetParent(parent, ...children) {\r\n    children.forEach(child => {\r\n        if (child.parent) {\r\n            RemoveChild(child.parent, child);\r\n        }\r\n        child.parent = parent;\r\n    });\r\n    const parentWorld = parent.world;\r\n    if (parentWorld) {\r\n        SetWorld(parentWorld, ...DepthFirstSearch(parent));\r\n    }\r\n    return children;\r\n}\n\nexport { SetParent };\n","import { AddedToWorldEvent } from '../gameobjects/events/AddedToWorldEvent.js';\nimport { RemovedFromWorldEvent } from '../gameobjects/events/RemovedFromWorldEvent.js';\nimport { Emit } from '../events/Emit.js';\n\nfunction SetWorld(world, ...children) {\r\n    children.forEach(child => {\r\n        if (child.world) {\r\n            Emit(child.world, RemovedFromWorldEvent, child, child.world);\r\n            Emit(child, RemovedFromWorldEvent, child, child.world);\r\n        }\r\n        child.world = world;\r\n        Emit(world, AddedToWorldEvent, child, world);\r\n        Emit(child, AddedToWorldEvent, child, world);\r\n    });\r\n    return children;\r\n}\n\nexport { SetWorld };\n","const RemovedFromWorldEvent = 'removedfromworld';\n\nexport { RemovedFromWorldEvent };\n","const AddedToWorldEvent = 'addedtoworld';\n\nexport { AddedToWorldEvent };\n","function DepthFirstSearch(parent) {\r\n    const stack = [parent];\r\n    const output = [];\r\n    while (stack.length > 0) {\r\n        const node = stack.shift();\r\n        output.push(node);\r\n        const numChildren = node.numChildren;\r\n        if (numChildren > 0) {\r\n            for (let i = numChildren - 1; i >= 0; i--) {\r\n                stack.unshift(node.children[i]);\r\n            }\r\n        }\r\n    }\r\n    output.shift();\r\n    return output;\r\n}\n\nexport { DepthFirstSearch };\n","import './DepthFirstSearch.js';\nimport './GetChildIndex.js';\nimport './RemoveChildAt.js';\nimport './RemoveChild.js';\nimport '../gameobjects/events/AddedToWorldEvent.js';\nimport '../gameobjects/events/RemovedFromWorldEvent.js';\nimport '../events/Emit.js';\nimport './SetWorld.js';\nimport { SetParent } from './SetParent.js';\n\nfunction AddChild(parent, child) {\r\n    parent.children.push(child);\r\n    SetParent(parent, child);\r\n    child.transform.updateWorld();\r\n    return child;\r\n}\n\nexport { AddChild };\n","const DIRTY_CONST = {\r\n    CLEAR: 0,\r\n    TRANSFORM: 1,\r\n    UPDATE: 2,\r\n    CHILD_CACHE: 4,\r\n    POST_RENDER: 8,\r\n    COLORS: 16,\r\n    BOUNDS: 32,\r\n    TEXTURE: 64,\r\n    FRAME: 128,\r\n    ALPHA: 256,\r\n    CHILD: 512,\r\n    DEFAULT: 1 + 2 + 16 + 32,\r\n    USER1: 536870912,\r\n    USER2: 1073741824,\r\n    USER3: 2147483648,\r\n    USER4: 4294967296\r\n};\n\nexport { DIRTY_CONST };\n","function RemoveChildrenBetween(parent, beginIndex = 0, endIndex) {\r\n    const children = parent.children;\r\n    if (endIndex === undefined) {\r\n        endIndex = children.length;\r\n    }\r\n    const range = endIndex - beginIndex;\r\n    if (range > 0 && range <= endIndex) {\r\n        const removed = children.splice(beginIndex, range);\r\n        removed.forEach(child => {\r\n            child.parent = null;\r\n        });\r\n        return removed;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\n\nexport { RemoveChildrenBetween };\n","class EventInstance {\r\n    constructor(callback, context, once = false) {\r\n        this.callback = callback;\r\n        this.context = context;\r\n        this.once = once;\r\n    }\r\n}\n\nexport { EventInstance };\n","import { EventInstance } from './EventInstance.js';\n\nfunction Off(emitter, event, callback, context, once) {\r\n    const events = emitter.events;\r\n    const listeners = events.get(event);\r\n    if (!callback) {\r\n        events.delete(event);\r\n    }\r\n    else if (callback instanceof EventInstance) {\r\n        listeners.delete(callback);\r\n    }\r\n    else {\r\n        const hasContext = !context;\r\n        const hasOnce = (once !== undefined);\r\n        for (const listener of listeners) {\r\n            if ((listener.callback === callback) &&\r\n                (hasContext && listener.context === context) &&\r\n                (hasOnce && listener.once === once)) {\r\n                listeners.delete(listener);\r\n            }\r\n        }\r\n    }\r\n    if (listeners.size === 0) {\r\n        events.delete(event);\r\n    }\r\n    return emitter;\r\n}\n\nexport { Off };\n","import { EventInstance } from './EventInstance.js';\n\nfunction On(emitter, event, callback, context = emitter, once = false) {\r\n    if (typeof callback !== 'function') {\r\n        throw new TypeError('Listener not a function');\r\n    }\r\n    const listener = new EventInstance(callback, context, once);\r\n    const listeners = emitter.events.get(event);\r\n    if (!listeners) {\r\n        emitter.events.set(event, new Set([listener]));\r\n    }\r\n    else {\r\n        listeners.add(listener);\r\n    }\r\n    return listener;\r\n}\n\nexport { On };\n","import './EventInstance.js';\nimport { On } from './On.js';\n\nfunction Once(emitter, event, callback, context = emitter) {\r\n    return On(emitter, event, callback, context, true);\r\n}\n\nexport { Once };\n","let instance;\r\nconst SceneManagerInstance = {\r\n    get: () => {\r\n        return instance;\r\n    },\r\n    set: (manager) => {\r\n        instance = manager;\r\n    }\r\n};\n\nexport { SceneManagerInstance };\n","import { GameInstance } from '../GameInstance.js';\nimport { GetScenes } from '../config/Scenes.js';\nimport { Emit } from '../events/Emit.js';\nimport '../events/EventInstance.js';\nimport '../events/On.js';\nimport { Once } from '../events/Once.js';\nimport { CreateSceneRenderData } from './CreateSceneRenderData.js';\nimport { ResetSceneRenderData } from './ResetSceneRenderData.js';\nimport { SceneManagerInstance } from './SceneManagerInstance.js';\n\nclass SceneManager {\r\n    constructor() {\r\n        this.scenes = new Map();\r\n        this.sceneIndex = 0;\r\n        this.flush = false;\r\n        this.renderResult = CreateSceneRenderData();\r\n        this.game = GameInstance.get();\r\n        SceneManagerInstance.set(this);\r\n        Once(this.game, 'boot', () => this.boot());\r\n    }\r\n    boot() {\r\n        GetScenes().forEach(scene => new scene());\r\n    }\r\n    update(delta, time) {\r\n        for (const scene of this.scenes.values()) {\r\n            Emit(scene, 'update', delta, time);\r\n        }\r\n    }\r\n    render(gameFrame) {\r\n        const results = this.renderResult;\r\n        ResetSceneRenderData(results, gameFrame);\r\n        for (const scene of this.scenes.values()) {\r\n            Emit(scene, 'render', results);\r\n        }\r\n        if (this.flush) {\r\n            results.numDirtyFrames++;\r\n            this.flush = false;\r\n        }\r\n        return results;\r\n    }\r\n}\n\nexport { SceneManager };\n","function CreateSceneRenderData() {\r\n    return {\r\n        gameFrame: 0,\r\n        numTotalFrames: 0,\r\n        numDirtyFrames: 0,\r\n        numDirtyCameras: 0,\r\n        worldData: []\r\n    };\r\n}\n\nexport { CreateSceneRenderData };\n","function ResetSceneRenderData(renderData, gameFrame = 0) {\r\n    renderData.gameFrame = gameFrame;\r\n    renderData.numTotalFrames = 0;\r\n    renderData.numDirtyFrames = 0;\r\n    renderData.numDirtyCameras = 0;\r\n    renderData.worldData.length = 0;\r\n}\n\nexport { ResetSceneRenderData };\n","function CreateCanvas(width, height) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas.getContext('2d');\r\n}\n\nexport { CreateCanvas };\n","let instance;\r\nconst TextureManagerInstance = {\r\n    get: () => {\r\n        return instance;\r\n    },\r\n    set: (manager) => {\r\n        instance = manager;\r\n    }\r\n};\n\nexport { TextureManagerInstance };\n","import '../renderer/BindingQueue.js';\nimport './Frame.js';\nimport { Texture } from './Texture.js';\nimport { CreateCanvas } from './CreateCanvas.js';\nimport { TextureManagerInstance } from './TextureManagerInstance.js';\n\nclass TextureManager {\r\n    constructor() {\r\n        this.textures = new Map();\r\n        this.createDefaultTextures();\r\n        TextureManagerInstance.set(this);\r\n    }\r\n    createDefaultTextures() {\r\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\r\n        const missing = CreateCanvas(32, 32);\r\n        missing.strokeStyle = '#0f0';\r\n        missing.moveTo(0, 0);\r\n        missing.lineTo(32, 32);\r\n        missing.stroke();\r\n        missing.strokeRect(0.5, 0.5, 31, 31);\r\n        this.add('__MISSING', new Texture(missing.canvas));\r\n    }\r\n    get(key) {\r\n        const textures = this.textures;\r\n        if (textures.has(key)) {\r\n            return textures.get(key);\r\n        }\r\n        else {\r\n            return textures.get('__MISSING');\r\n        }\r\n    }\r\n    has(key) {\r\n        return this.textures.has(key);\r\n    }\r\n    add(key, source) {\r\n        let texture;\r\n        const textures = this.textures;\r\n        if (!textures.has(key)) {\r\n            if (source instanceof Texture) {\r\n                texture = source;\r\n            }\r\n            else {\r\n                texture = new Texture(source);\r\n            }\r\n            texture.key = key;\r\n            textures.set(key, texture);\r\n        }\r\n        return texture;\r\n    }\r\n}\n\nexport { TextureManager };\n","function GetVertices(transform) {\r\n    const { a, b, c, d, tx, ty } = transform.world;\r\n    const { x, y, right, bottom } = transform.extent;\r\n    const x0 = (x * a) + (y * c) + tx;\r\n    const y0 = (x * b) + (y * d) + ty;\r\n    const x1 = (x * a) + (bottom * c) + tx;\r\n    const y1 = (x * b) + (bottom * d) + ty;\r\n    const x2 = (right * a) + (bottom * c) + tx;\r\n    const y2 = (right * b) + (bottom * d) + ty;\r\n    const x3 = (right * a) + (y * c) + tx;\r\n    const y3 = (right * b) + (y * d) + ty;\r\n    return { x0, y0, x1, y1, x2, y2, x3, y3 };\r\n}\n\nexport { GetVertices };\n","import '../../../geom/rectangle/Contains.js';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle.js';\nimport { DIRTY_CONST } from '../../DIRTY_CONST.js';\nimport { GetVertices } from '../transform/GetVertices.js';\n\nclass BoundsComponent {\r\n    constructor(entity) {\r\n        this.fixed = false;\r\n        this.includeChildren = true;\r\n        this.visibleOnly = true;\r\n        this.entity = entity;\r\n        this.area = new Rectangle();\r\n    }\r\n    set(x, y, width, height) {\r\n        this.area.set(x, y, width, height);\r\n    }\r\n    get() {\r\n        if (this.entity.isDirty(DIRTY_CONST.BOUNDS) && !this.fixed) {\r\n            this.update();\r\n        }\r\n        return this.area;\r\n    }\r\n    updateLocal() {\r\n        const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(this.entity.transform);\r\n        const x = Math.min(x0, x1, x2, x3);\r\n        const y = Math.min(y0, y1, y2, y3);\r\n        const right = Math.max(x0, x1, x2, x3);\r\n        const bottom = Math.max(y0, y1, y2, y3);\r\n        return this.area.set(x, y, right - x, bottom - y);\r\n    }\r\n    update() {\r\n        const bounds = this.updateLocal();\r\n        this.entity.clearDirty(DIRTY_CONST.BOUNDS);\r\n        if (!this.includeChildren || !this.entity.numChildren) {\r\n            return bounds;\r\n        }\r\n        const visibleOnly = this.visibleOnly;\r\n        const children = this.entity.children;\r\n        let x = bounds.x;\r\n        let y = bounds.y;\r\n        let right = bounds.right;\r\n        let bottom = bounds.bottom;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child = children[i];\r\n            if (!child || (visibleOnly && !child.visible)) {\r\n                continue;\r\n            }\r\n            const childBounds = child.bounds.get();\r\n            if (childBounds.x < x) {\r\n                x = childBounds.x;\r\n            }\r\n            if (childBounds.y < y) {\r\n                y = childBounds.y;\r\n            }\r\n            if (childBounds.right > right) {\r\n                right = childBounds.right;\r\n            }\r\n            if (childBounds.bottom > bottom) {\r\n                bottom = childBounds.bottom;\r\n            }\r\n        }\r\n        return bounds.set(x, y, right - x, bottom - y);\r\n    }\r\n    destroy() {\r\n        this.entity = null;\r\n        this.area = null;\r\n    }\r\n}\n\nexport { BoundsComponent };\n","class InputComponent {\r\n    constructor(entity) {\r\n        this.enabled = false;\r\n        this.enabledChildren = true;\r\n        this.entity = entity;\r\n    }\r\n    destroy() {\r\n        this.entity = null;\r\n        this.hitArea = null;\r\n    }\r\n}\n\nexport { InputComponent };\n","class Vec2 {\r\n    constructor(x = 0, y = 0) {\r\n        this.set(x, y);\r\n    }\r\n    set(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    getArray() {\r\n        return [this.x, this.y];\r\n    }\r\n    fromArray(src) {\r\n        return this.set(src[0], src[1]);\r\n    }\r\n    toString() {\r\n        return `[x=${this.x}, y=${this.y}]`;\r\n    }\r\n}\n\nexport { Vec2 };\n","function Copy(src, target) {\r\n    return target.set(src.a, src.b, src.c, src.d, src.tx, src.ty);\r\n}\n\nexport { Copy };\n","import { Matrix2D } from '../../../math/matrix2d/Matrix2D.js';\nimport '../../../geom/rectangle/Contains.js';\nimport { Rectangle } from '../../../geom/rectangle/Rectangle.js';\nimport '../../../utils/NOOP.js';\nimport { Vec2Callback } from '../../../math/vec2/Vec2Callback.js';\nimport { originX, originY } from '../../../config/DefaultOrigin.js';\nimport { DIRTY_CONST } from '../../DIRTY_CONST.js';\nimport { Vec2 } from '../../../math/vec2/Vec2.js';\nimport { UpdateLocalTransform } from './UpdateLocalTransform.js';\nimport '../../../math/matrix2d/Copy.js';\nimport { UpdateWorldTransform } from './UpdateWorldTransform.js';\n\nclass TransformComponent {\r\n    constructor(entity, x = 0, y = 0) {\r\n        this.passthru = false;\r\n        this._rotation = 0;\r\n        this.entity = entity;\r\n        this.local = new Matrix2D();\r\n        this.world = new Matrix2D();\r\n        this.position = new Vec2Callback(() => this.update(), x, y);\r\n        this.scale = new Vec2Callback(() => this.update(), 1, 1, true);\r\n        this.skew = new Vec2Callback(() => this.update(), 0, 0, true);\r\n        this.origin = new Vec2Callback(() => this.updateExtent(), originX, originY);\r\n        this.extent = new Rectangle();\r\n    }\r\n    update() {\r\n        this.updateLocal();\r\n        this.updateWorld();\r\n    }\r\n    updateLocal() {\r\n        this.entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n        UpdateLocalTransform(this);\r\n    }\r\n    updateWorld() {\r\n        const entity = this.entity;\r\n        entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n        UpdateWorldTransform(entity);\r\n        if (entity.numChildren) {\r\n            this.updateChildren();\r\n        }\r\n    }\r\n    updateChildren() {\r\n        const children = this.entity.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child = children[i];\r\n            child.transform.updateWorld();\r\n        }\r\n    }\r\n    globalToLocal(x, y, out = new Vec2()) {\r\n        const { a, b, c, d, tx, ty } = this.world;\r\n        const id = 1 / ((a * d) + (c * -b));\r\n        out.x = (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id);\r\n        out.y = (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id);\r\n        return out;\r\n    }\r\n    localToGlobal(x, y, out = new Vec2()) {\r\n        const { a, b, c, d, tx, ty } = this.world;\r\n        out.x = (a * x) + (c * y) + tx;\r\n        out.y = (b * x) + (d * y) + ty;\r\n        return out;\r\n    }\r\n    setExtent(x, y, width, height) {\r\n        this.extent.set(x, y, width, height);\r\n        this.entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n    }\r\n    updateExtent(width, height) {\r\n        const extent = this.extent;\r\n        const entity = this.entity;\r\n        if (width !== undefined) {\r\n            extent.width = width;\r\n        }\r\n        if (height !== undefined) {\r\n            extent.height = height;\r\n        }\r\n        extent.x = -(this.origin.x) * extent.width;\r\n        extent.y = -(this.origin.y) * extent.height;\r\n        entity.setDirty(DIRTY_CONST.TRANSFORM, DIRTY_CONST.BOUNDS);\r\n    }\r\n    set rotation(value) {\r\n        if (value !== this._rotation) {\r\n            this._rotation = value;\r\n            this.update();\r\n        }\r\n    }\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n    destroy() {\r\n        this.position.destroy();\r\n        this.scale.destroy();\r\n        this.skew.destroy();\r\n        this.origin.destroy();\r\n        this.entity = null;\r\n        this.local = null;\r\n        this.world = null;\r\n        this.position = null;\r\n        this.scale = null;\r\n        this.skew = null;\r\n        this.origin = null;\r\n        this.extent = null;\r\n    }\r\n}\n\nexport { TransformComponent };\n","function UpdateLocalTransform(transform) {\r\n    const local = transform.local;\r\n    const x = transform.position.x;\r\n    const y = transform.position.y;\r\n    const rotation = transform.rotation;\r\n    const scaleX = transform.scale.x;\r\n    const scaleY = transform.scale.y;\r\n    const skewX = transform.skew.x;\r\n    const skewY = transform.skew.y;\r\n    local.set(Math.cos(rotation + skewY) * scaleX, Math.sin(rotation + skewY) * scaleX, -Math.sin(rotation - skewX) * scaleY, Math.cos(rotation - skewX) * scaleY, x, y);\r\n}\n\nexport { UpdateLocalTransform };\n","import { Copy } from '../../../math/matrix2d/Copy.js';\n\nfunction UpdateWorldTransform(gameObject) {\r\n    const parent = gameObject.parent;\r\n    const transform = gameObject.transform;\r\n    const lt = transform.local;\r\n    const wt = transform.world;\r\n    if (!parent) {\r\n        Copy(lt, wt);\r\n    }\r\n    else if (transform.passthru) {\r\n        Copy(parent.transform.world, wt);\r\n    }\r\n    else {\r\n        const { a, b, c, d, tx, ty } = lt;\r\n        const { a: pa, b: pb, c: pc, d: pd, tx: ptx, ty: pty } = parent.transform.world;\r\n        wt.set(a * pa + b * pc, a * pb + b * pd, c * pa + d * pc, c * pb + d * pd, tx * pa + ty * pc + ptx, tx * pb + ty * pd + pty);\r\n    }\r\n}\n\nexport { UpdateWorldTransform };\n","import { GameInstance } from '../GameInstance.js';\nimport '../math/matrix2d/Matrix2D.js';\nimport '../geom/rectangle/Contains.js';\nimport '../geom/rectangle/Rectangle.js';\nimport '../utils/NOOP.js';\nimport '../math/vec2/Vec2Callback.js';\nimport '../config/DefaultOrigin.js';\nimport '../display/DepthFirstSearch.js';\nimport '../display/GetChildIndex.js';\nimport '../display/RemoveChildAt.js';\nimport '../display/RemoveChild.js';\nimport './events/AddedToWorldEvent.js';\nimport { DestroyEvent } from './events/DestroyEvent.js';\nimport './events/RemovedFromWorldEvent.js';\nimport { Emit } from '../events/Emit.js';\nimport '../display/SetWorld.js';\nimport '../display/SetParent.js';\nimport { DIRTY_CONST } from './DIRTY_CONST.js';\nimport '../display/RemoveChildrenBetween.js';\nimport { DestroyChildren } from '../display/DestroyChildren.js';\nimport { ReparentChildren } from '../display/ReparentChildren.js';\nimport './components/transform/GetVertices.js';\nimport { BoundsComponent } from './components/bounds/BoundsComponent.js';\nimport { InputComponent } from './components/input/InputComponent.js';\nimport '../math/vec2/Vec2.js';\nimport './components/transform/UpdateLocalTransform.js';\nimport '../math/matrix2d/Copy.js';\nimport './components/transform/UpdateWorldTransform.js';\nimport { TransformComponent } from './components/transform/TransformComponent.js';\n\nclass GameObject {\r\n    constructor(x = 0, y = 0) {\r\n        this.type = 'GameObject';\r\n        this.name = '';\r\n        this.willUpdate = true;\r\n        this.willUpdateChildren = true;\r\n        this.willRender = true;\r\n        this.willRenderChildren = true;\r\n        this.willCacheChildren = false;\r\n        this.dirty = 0;\r\n        this.dirtyFrame = 0;\r\n        this.visible = true;\r\n        this.children = [];\r\n        this.events = new Map();\r\n        this.transform = new TransformComponent(this, x, y);\r\n        this.bounds = new BoundsComponent(this);\r\n        this.input = new InputComponent(this);\r\n        this.dirty = DIRTY_CONST.DEFAULT;\r\n        this.transform.update();\r\n    }\r\n    isRenderable() {\r\n        return (this.visible && this.willRender);\r\n    }\r\n    isDirty(flag) {\r\n        return (this.dirty & flag) !== 0;\r\n    }\r\n    clearDirty(flag) {\r\n        if (this.isDirty(flag)) {\r\n            this.dirty ^= flag;\r\n        }\r\n        return this;\r\n    }\r\n    setDirty(flag, flag2) {\r\n        if (!this.isDirty(flag)) {\r\n            this.dirty ^= flag;\r\n            this.dirtyFrame = GameInstance.getFrame();\r\n        }\r\n        if (!this.isDirty(flag2)) {\r\n            this.dirty ^= flag2;\r\n        }\r\n        return this;\r\n    }\r\n    update(delta, time) {\r\n        if (this.willUpdateChildren) {\r\n            const children = this.children;\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (child && child.willUpdate) {\r\n                    child.update(delta, time);\r\n                }\r\n            }\r\n        }\r\n        this.postUpdate(delta, time);\r\n    }\r\n    postUpdate(delta, time) {\r\n    }\r\n    renderGL(renderer) {\r\n    }\r\n    renderCanvas(renderer) {\r\n    }\r\n    postRenderGL(renderer) {\r\n    }\r\n    postRenderCanvas(renderer) {\r\n    }\r\n    get numChildren() {\r\n        return this.children.length;\r\n    }\r\n    destroy(reparentChildren) {\r\n        if (reparentChildren) {\r\n            ReparentChildren(this, reparentChildren);\r\n        }\r\n        else {\r\n            DestroyChildren(this);\r\n        }\r\n        Emit(this, DestroyEvent, this);\r\n        this.transform.destroy();\r\n        this.bounds.destroy();\r\n        this.input.destroy();\r\n        this.events.clear();\r\n        this.world = null;\r\n        this.parent = null;\r\n        this.children = null;\r\n    }\r\n}\n\nexport { GameObject };\n","import './DepthFirstSearch.js';\nimport './GetChildIndex.js';\nimport './RemoveChildAt.js';\nimport './RemoveChild.js';\nimport '../gameobjects/events/AddedToWorldEvent.js';\nimport '../gameobjects/events/RemovedFromWorldEvent.js';\nimport '../events/Emit.js';\nimport './SetWorld.js';\nimport { SetParent } from './SetParent.js';\nimport { RemoveChildrenBetween } from './RemoveChildrenBetween.js';\n\nfunction ReparentChildren(parent, newParent, beginIndex = 0, endIndex) {\r\n    const moved = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n    SetParent(newParent, ...moved);\r\n    moved.forEach(child => {\r\n        child.transform.updateWorld();\r\n    });\r\n    return moved;\r\n}\n\nexport { ReparentChildren };\n","import { RemoveChildrenBetween } from './RemoveChildrenBetween.js';\n\nfunction DestroyChildren(parent, beginIndex = 0, endIndex) {\r\n    const removed = RemoveChildrenBetween(parent, beginIndex, endIndex);\r\n    removed.forEach(child => {\r\n        child.destroy();\r\n    });\r\n}\n\nexport { DestroyChildren };\n","const DestroyEvent = 'destroy';\n\nexport { DestroyEvent };\n","import '../../GameInstance.js';\nimport '../../math/matrix2d/Matrix2D.js';\nimport '../../geom/rectangle/Contains.js';\nimport '../../geom/rectangle/Rectangle.js';\nimport '../../utils/NOOP.js';\nimport '../../math/vec2/Vec2Callback.js';\nimport '../../config/DefaultOrigin.js';\nimport '../../display/DepthFirstSearch.js';\nimport '../../display/GetChildIndex.js';\nimport '../../display/RemoveChildAt.js';\nimport '../../display/RemoveChild.js';\nimport '../events/AddedToWorldEvent.js';\nimport '../events/DestroyEvent.js';\nimport '../events/RemovedFromWorldEvent.js';\nimport '../../events/Emit.js';\nimport '../../display/SetWorld.js';\nimport '../../display/SetParent.js';\nimport { DIRTY_CONST } from '../DIRTY_CONST.js';\nimport '../../display/RemoveChildrenBetween.js';\nimport '../../display/DestroyChildren.js';\nimport '../../display/ReparentChildren.js';\nimport '../components/transform/GetVertices.js';\nimport '../components/bounds/BoundsComponent.js';\nimport '../components/input/InputComponent.js';\nimport '../../math/vec2/Vec2.js';\nimport '../components/transform/UpdateLocalTransform.js';\nimport '../../math/matrix2d/Copy.js';\nimport '../components/transform/UpdateWorldTransform.js';\nimport '../components/transform/TransformComponent.js';\nimport { GameObject } from '../GameObject.js';\n\nclass Container extends GameObject {\r\n    constructor(x = 0, y = 0) {\r\n        super(x, y);\r\n        this._alpha = 1;\r\n        this.type = 'Container';\r\n    }\r\n    setSize(width, height = width) {\r\n        this.transform.updateExtent(width, height);\r\n        return this;\r\n    }\r\n    setPosition(x, y) {\r\n        this.transform.position.set(x, y);\r\n        return this;\r\n    }\r\n    setOrigin(x, y = x) {\r\n        this.transform.origin.set(x, y);\r\n        return this;\r\n    }\r\n    setSkew(x, y = x) {\r\n        this.transform.skew.set(x, y);\r\n        return this;\r\n    }\r\n    setScale(x, y = x) {\r\n        this.transform.scale.set(x, y);\r\n        return this;\r\n    }\r\n    setRotation(value) {\r\n        this.transform.rotation = value;\r\n        return this;\r\n    }\r\n    set width(value) {\r\n        this.transform.updateExtent(value);\r\n    }\r\n    get width() {\r\n        return this.transform.extent.width;\r\n    }\r\n    set height(value) {\r\n        this.transform.updateExtent(undefined, value);\r\n    }\r\n    get height() {\r\n        return this.transform.extent.height;\r\n    }\r\n    set x(value) {\r\n        this.transform.position.x = value;\r\n    }\r\n    get x() {\r\n        return this.transform.position.x;\r\n    }\r\n    set y(value) {\r\n        this.transform.position.y = value;\r\n    }\r\n    get y() {\r\n        return this.transform.position.y;\r\n    }\r\n    set originX(value) {\r\n        this.transform.origin.x = value;\r\n    }\r\n    get originX() {\r\n        return this.transform.origin.x;\r\n    }\r\n    set originY(value) {\r\n        this.transform.origin.y = value;\r\n    }\r\n    get originY() {\r\n        return this.transform.origin.y;\r\n    }\r\n    set skewX(value) {\r\n        this.transform.skew.x = value;\r\n    }\r\n    get skewX() {\r\n        return this.transform.skew.x;\r\n    }\r\n    set skewY(value) {\r\n        this.transform.skew.y = value;\r\n    }\r\n    get skewY() {\r\n        return this.transform.skew.y;\r\n    }\r\n    set scaleX(value) {\r\n        this.transform.scale.x = value;\r\n    }\r\n    get scaleX() {\r\n        return this.transform.scale.x;\r\n    }\r\n    set scaleY(value) {\r\n        this.transform.scale.y = value;\r\n    }\r\n    get scaleY() {\r\n        return this.transform.scale.y;\r\n    }\r\n    set rotation(value) {\r\n        this.transform.rotation = value;\r\n    }\r\n    get rotation() {\r\n        return this.transform.rotation;\r\n    }\r\n    get alpha() {\r\n        return this._alpha;\r\n    }\r\n    set alpha(value) {\r\n        if (value !== this._alpha) {\r\n            this._alpha = value;\r\n            this.setDirty(DIRTY_CONST.TRANSFORM);\r\n        }\r\n    }\r\n}\n\nexport { Container };\n","function PackColor(rgb, alpha) {\r\n    const ua = ((alpha * 255) | 0) & 0xFF;\r\n    return ((ua << 24) | rgb) >>> 0;\r\n}\n\nexport { PackColor };\n","import { PackColor } from './PackColor.js';\n\nfunction PackColors(sprite) {\r\n    const alpha = sprite.vertexAlpha;\r\n    const tint = sprite.vertexTint;\r\n    const color = sprite.vertexColor;\r\n    color[0] = PackColor(tint[0], alpha[0]);\r\n    color[1] = PackColor(tint[1], alpha[1]);\r\n    color[2] = PackColor(tint[2], alpha[2]);\r\n    color[3] = PackColor(tint[3], alpha[3]);\r\n    return sprite;\r\n}\n\nexport { PackColors };\n","function SetFrame(texture, key, ...children) {\r\n    const frame = texture.getFrame(key);\r\n    const { u0, u1, v0, v1, pivot } = frame;\r\n    children.forEach(child => {\r\n        if (!child || frame === child.frame) {\r\n            return;\r\n        }\r\n        child.frame = frame;\r\n        if (pivot) {\r\n            child.setOrigin(pivot.x, pivot.y);\r\n        }\r\n        child.frame.setExtent(child);\r\n        child.hasTexture = true;\r\n        const data = child.vertexData;\r\n        data[2] = u0;\r\n        data[3] = v0;\r\n        data[8] = u0;\r\n        data[9] = v1;\r\n        data[14] = u1;\r\n        data[15] = v1;\r\n        data[20] = u1;\r\n        data[21] = v0;\r\n    });\r\n    return children;\r\n}\n\nexport { SetFrame };\n","import '../../GameInstance.js';\nimport '../../math/matrix2d/Matrix2D.js';\nimport '../../geom/rectangle/Contains.js';\nimport '../../geom/rectangle/Rectangle.js';\nimport '../../utils/NOOP.js';\nimport '../../math/vec2/Vec2Callback.js';\nimport '../../renderer/BindingQueue.js';\nimport '../../config/DefaultOrigin.js';\nimport '../../textures/Frame.js';\nimport '../../textures/Texture.js';\nimport '../../display/DepthFirstSearch.js';\nimport '../../display/GetChildIndex.js';\nimport '../../display/RemoveChildAt.js';\nimport '../../display/RemoveChild.js';\nimport '../events/AddedToWorldEvent.js';\nimport '../events/DestroyEvent.js';\nimport '../events/RemovedFromWorldEvent.js';\nimport '../../events/Emit.js';\nimport '../../display/SetWorld.js';\nimport '../../display/SetParent.js';\nimport { DIRTY_CONST } from '../DIRTY_CONST.js';\nimport '../../display/RemoveChildrenBetween.js';\nimport '../../display/DestroyChildren.js';\nimport '../../display/ReparentChildren.js';\nimport '../../textures/TextureManagerInstance.js';\nimport { BatchTexturedQuad } from '../../renderer/webgl1/draw/BatchTexturedQuad.js';\nimport '../components/transform/GetVertices.js';\nimport '../components/bounds/BoundsComponent.js';\nimport '../components/input/InputComponent.js';\nimport '../../math/vec2/Vec2.js';\nimport '../components/transform/UpdateLocalTransform.js';\nimport '../../math/matrix2d/Copy.js';\nimport '../components/transform/UpdateWorldTransform.js';\nimport '../components/transform/TransformComponent.js';\nimport '../GameObject.js';\nimport { Container } from '../container/Container.js';\nimport { DrawTexturedQuad } from '../../renderer/canvas/draw/DrawTexturedQuad.js';\nimport '../../renderer/webgl1/colors/PackColor.js';\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors.js';\nimport { SetFrame } from './SetFrame.js';\nimport { SetTexture } from './SetTexture.js';\nimport { UpdateVertices } from './UpdateVertices.js';\n\nclass Sprite extends Container {\r\n    constructor(x, y, texture, frame) {\r\n        super(x, y);\r\n        this.hasTexture = false;\r\n        this._tint = 0xffffff;\r\n        this.type = 'Sprite';\r\n        this.vertexData = new Float32Array(24).fill(0);\r\n        this.vertexColor = new Uint32Array(4).fill(4294967295);\r\n        this.vertexAlpha = new Float32Array(4).fill(1);\r\n        this.vertexTint = new Uint32Array(4).fill(0xffffff);\r\n        this.setTexture(texture, frame);\r\n    }\r\n    setTexture(key, frame) {\r\n        SetTexture(key, frame, this);\r\n        return this;\r\n    }\r\n    setFrame(key) {\r\n        SetFrame(this.texture, key, this);\r\n        return this;\r\n    }\r\n    isRenderable() {\r\n        return (this.visible && this.willRender && this.hasTexture && this.alpha > 0);\r\n    }\r\n    preRender() {\r\n        if (this.isDirty(DIRTY_CONST.COLORS)) {\r\n            PackColors(this);\r\n            this.clearDirty(DIRTY_CONST.COLORS);\r\n        }\r\n        if (this.isDirty(DIRTY_CONST.TRANSFORM)) {\r\n            UpdateVertices(this);\r\n            this.clearDirty(DIRTY_CONST.TRANSFORM);\r\n        }\r\n    }\r\n    renderGL(renderer) {\r\n        this.preRender();\r\n        BatchTexturedQuad(this, renderer);\r\n    }\r\n    renderCanvas(renderer) {\r\n        this.preRender();\r\n        DrawTexturedQuad(this, renderer);\r\n    }\r\n    get alpha() {\r\n        return this._alpha;\r\n    }\r\n    set alpha(value) {\r\n        if (value !== this._alpha) {\r\n            this._alpha = value;\r\n            const vertexAlpha = this.vertexAlpha;\r\n            vertexAlpha[0] = value;\r\n            vertexAlpha[1] = value;\r\n            vertexAlpha[2] = value;\r\n            vertexAlpha[3] = value;\r\n            this.setDirty(DIRTY_CONST.ALPHA);\r\n        }\r\n    }\r\n    get tint() {\r\n        return this._tint;\r\n    }\r\n    set tint(value) {\r\n        if (value !== this._tint) {\r\n            this._tint = value;\r\n            const vertexTint = this.vertexTint;\r\n            vertexTint[0] = value;\r\n            vertexTint[1] = value;\r\n            vertexTint[2] = value;\r\n            vertexTint[3] = value;\r\n            this.setDirty(DIRTY_CONST.COLORS);\r\n        }\r\n    }\r\n    destroy(reparentChildren) {\r\n        super.destroy(reparentChildren);\r\n        this.texture = null;\r\n        this.frame = null;\r\n        this.hasTexture = false;\r\n        this.vertexData = null;\r\n        this.vertexColor = null;\r\n        this.vertexAlpha = null;\r\n        this.vertexTint = null;\r\n    }\r\n}\n\nexport { Sprite };\n","import '../../renderer/BindingQueue.js';\nimport '../../textures/Frame.js';\nimport { Texture } from '../../textures/Texture.js';\nimport { TextureManagerInstance } from '../../textures/TextureManagerInstance.js';\nimport { SetFrame } from './SetFrame.js';\n\nfunction SetTexture(key, frame, ...children) {\r\n    if (!key) {\r\n        children.forEach(child => {\r\n            child.texture = null;\r\n            child.frame = null;\r\n            child.hasTexture = false;\r\n        });\r\n    }\r\n    else {\r\n        let texture;\r\n        if (key instanceof Texture) {\r\n            texture = key;\r\n        }\r\n        else {\r\n            texture = TextureManagerInstance.get().get(key);\r\n        }\r\n        if (!texture) {\r\n            console.warn(`Invalid Texture key: ${key}`);\r\n        }\r\n        else {\r\n            children.forEach(child => {\r\n                child.texture = texture;\r\n            });\r\n            SetFrame(texture, frame, ...children);\r\n        }\r\n    }\r\n    return children;\r\n}\n\nexport { SetTexture };\n","import { GetVertices } from '../components/transform/GetVertices.js';\n\nfunction UpdateVertices(sprite) {\r\n    const data = sprite.vertexData;\r\n    const { x0, y0, x1, y1, x2, y2, x3, y3 } = GetVertices(sprite.transform);\r\n    data[0] = x0;\r\n    data[1] = y0;\r\n    data[6] = x1;\r\n    data[7] = y1;\r\n    data[12] = x2;\r\n    data[13] = y2;\r\n    data[18] = x3;\r\n    data[19] = y3;\r\n    return sprite;\r\n}\n\nexport { UpdateVertices };\n","function BatchTexturedQuad(sprite, renderer) {\r\n    const texture = sprite.texture;\r\n    const shader = renderer.shaders.current;\r\n    const buffer = shader.buffer;\r\n    const binding = texture.binding;\r\n    if (shader.count === buffer.batchSize) {\r\n        renderer.flush();\r\n    }\r\n    const data = sprite.vertexData;\r\n    renderer.textures.request(texture);\r\n    const textureIndex = binding.index;\r\n    data[4] = textureIndex;\r\n    data[10] = textureIndex;\r\n    data[16] = textureIndex;\r\n    data[22] = textureIndex;\r\n    const offset = shader.count * buffer.quadElementSize;\r\n    buffer.vertexViewF32.set(data, offset);\r\n    const color = sprite.vertexColor;\r\n    const U32 = buffer.vertexViewU32;\r\n    U32[offset + 5] = color[0];\r\n    U32[offset + 11] = color[2];\r\n    U32[offset + 17] = color[3];\r\n    U32[offset + 23] = color[1];\r\n    shader.count++;\r\n}\n\nexport { BatchTexturedQuad };\n","function DrawTexturedQuad(sprite, renderer) {\r\n    const frame = sprite.frame;\r\n    if (!frame) {\r\n        return;\r\n    }\r\n    const ctx = renderer.ctx;\r\n    const transform = sprite.transform;\r\n    const { a, b, c, d, tx, ty } = transform.world;\r\n    const { x, y } = transform.extent;\r\n    ctx.save();\r\n    ctx.setTransform(a, b, c, d, tx, ty);\r\n    ctx.globalAlpha = sprite.alpha;\r\n    ctx.drawImage(frame.texture.image, frame.x, frame.y, frame.width, frame.height, x, y, frame.width, frame.height);\r\n    ctx.restore();\r\n}\n\nexport { DrawTexturedQuad };\n","import '../../renderer/BindingQueue.js';\nimport '../Frame.js';\nimport { Texture } from '../Texture.js';\nimport { CreateCanvas } from '../CreateCanvas.js';\n\nfunction CanvasTexture(width = 32, height = 32) {\r\n    const ctx = CreateCanvas(width, height);\r\n    return new Texture(ctx.canvas);\r\n}\n\nexport { CanvasTexture };\n","import { GameInstance } from '../../GameInstance.js';\nimport '../../math/matrix2d/Matrix2D.js';\nimport '../../geom/rectangle/Contains.js';\nimport '../../geom/rectangle/Rectangle.js';\nimport '../../utils/NOOP.js';\nimport '../../math/vec2/Vec2Callback.js';\nimport '../../renderer/BindingQueue.js';\nimport '../../config/DefaultOrigin.js';\nimport '../../textures/Frame.js';\nimport '../../textures/Texture.js';\nimport '../../display/DepthFirstSearch.js';\nimport '../../display/GetChildIndex.js';\nimport '../../display/RemoveChildAt.js';\nimport '../../display/RemoveChild.js';\nimport '../events/AddedToWorldEvent.js';\nimport '../events/DestroyEvent.js';\nimport '../events/RemovedFromWorldEvent.js';\nimport '../../events/Emit.js';\nimport '../../display/SetWorld.js';\nimport '../../display/SetParent.js';\nimport { DIRTY_CONST } from '../DIRTY_CONST.js';\nimport '../../display/RemoveChildrenBetween.js';\nimport '../../display/DestroyChildren.js';\nimport '../../display/ReparentChildren.js';\nimport '../../textures/CreateCanvas.js';\nimport '../../textures/TextureManagerInstance.js';\nimport '../../renderer/webgl1/draw/BatchTexturedQuad.js';\nimport '../components/transform/GetVertices.js';\nimport '../components/bounds/BoundsComponent.js';\nimport '../components/input/InputComponent.js';\nimport '../../math/vec2/Vec2.js';\nimport '../components/transform/UpdateLocalTransform.js';\nimport '../../math/matrix2d/Copy.js';\nimport '../components/transform/UpdateWorldTransform.js';\nimport '../components/transform/TransformComponent.js';\nimport '../GameObject.js';\nimport '../container/Container.js';\nimport '../../renderer/canvas/draw/DrawTexturedQuad.js';\nimport '../../renderer/webgl1/colors/PackColor.js';\nimport '../../renderer/webgl1/colors/PackColors.js';\nimport '../sprite/SetFrame.js';\nimport '../sprite/SetTexture.js';\nimport '../sprite/UpdateVertices.js';\nimport { Sprite } from '../sprite/Sprite.js';\nimport { CanvasTexture } from '../../textures/types/CanvasTexture.js';\n\nclass Text extends Sprite {\r\n    constructor(x, y, text = '', font, fillStyle) {\r\n        super(x, y, CanvasTexture());\r\n        this.splitRegExp = /(?:\\r\\n|\\r|\\n)/;\r\n        this.padding = { left: 0, right: 0, top: 0, bottom: 0 };\r\n        this.verticalAlign = 'ascent';\r\n        this.lineSpacing = 0;\r\n        this.font = '16px monospace';\r\n        this.fillStyle = '#fff';\r\n        this.strokeStyle = '';\r\n        this.backgroundStyle = '';\r\n        this.cornerRadius = 0;\r\n        this.textAlign = 'left';\r\n        this.textBaseline = 'alphabetic';\r\n        this.lineWidth = 0;\r\n        this.lineDash = [];\r\n        this.antialias = false;\r\n        this.type = 'Text';\r\n        const game = GameInstance.get();\r\n        this.resolution = game.renderer.resolution;\r\n        this.canvas = this.texture.image;\r\n        this.context = this.canvas.getContext('2d');\r\n        if (font) {\r\n            this.font = font;\r\n        }\r\n        if (fillStyle) {\r\n            this.fillStyle = fillStyle;\r\n        }\r\n        this.setText(text);\r\n    }\r\n    syncContext(canvas, ctx) {\r\n        if (this.preRenderCallback) {\r\n            this.preRenderCallback(canvas, ctx);\r\n        }\r\n        ctx.font = this.font;\r\n        ctx.textBaseline = this.textBaseline;\r\n        ctx.textAlign = this.textAlign;\r\n        ctx.fillStyle = this.fillStyle;\r\n        ctx.strokeStyle = this.strokeStyle;\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.lineCap = 'round';\r\n        ctx.lineJoin = 'round';\r\n        ctx.setLineDash(this.lineDash);\r\n        ctx.imageSmoothingEnabled = this.antialias;\r\n    }\r\n    updateText() {\r\n        const canvas = this.canvas;\r\n        const ctx = this.context;\r\n        const resolution = this.resolution;\r\n        const lines = this._text.split(this.splitRegExp);\r\n        const padding = this.padding;\r\n        const fillStyle = this.fillStyle;\r\n        const strokeStyle = this.strokeStyle;\r\n        const strokeWidth = this.lineWidth;\r\n        const lineSpacing = this.lineSpacing;\r\n        const strokeWidthHalf = (strokeWidth > 0) ? strokeWidth / 2 : 0;\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        this.syncContext(canvas, ctx);\r\n        ctx.textAlign = 'start';\r\n        let maxWidth = 0;\r\n        let maxHeight = 0;\r\n        let y = 0;\r\n        const lineMetrics = [];\r\n        const vAlignAscent = (this.verticalAlign === 'ascent');\r\n        const metrics = ctx.measureText('|MÉq');\r\n        const averageLineHeight = Math.ceil(Math.abs(metrics.actualBoundingBoxAscent) + Math.abs(metrics.actualBoundingBoxDescent)) + strokeWidth;\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const metrics = ctx.measureText(lines[i]);\r\n            const left = metrics.actualBoundingBoxLeft;\r\n            const right = metrics.actualBoundingBoxRight;\r\n            let ascent = metrics.actualBoundingBoxAscent;\r\n            let descent = metrics.actualBoundingBoxDescent;\r\n            if ((!ascent && !descent) || lines[i] === '') {\r\n                ascent = averageLineHeight;\r\n                descent = 0;\r\n            }\r\n            const lineWidth = Math.ceil(Math.abs(left) + Math.abs(right)) + strokeWidth;\r\n            const lineHeight = Math.ceil(Math.abs(ascent) + Math.abs(descent)) + strokeWidth;\r\n            if (vAlignAscent) {\r\n                y += ascent + strokeWidthHalf;\r\n                if (i > 0) {\r\n                    y += lineSpacing + strokeWidthHalf;\r\n                }\r\n                maxHeight = y + descent + strokeWidthHalf;\r\n            }\r\n            else {\r\n                y = maxHeight + ((lineHeight - descent) - strokeWidthHalf);\r\n                maxHeight += lineHeight;\r\n                if (i < lines.length - 1) {\r\n                    maxHeight += lineSpacing;\r\n                }\r\n            }\r\n            maxWidth = Math.max(maxWidth, lineWidth);\r\n            lineMetrics.push({ lineWidth, lineHeight, ascent, descent, left, right, y });\r\n        }\r\n        maxWidth += padding.left + padding.right;\r\n        maxHeight += padding.top + padding.bottom;\r\n        const displayWidth = (this.fixedWidth) ? this.fixedWidth : maxWidth;\r\n        const displayHeight = (this.fixedHeight) ? this.fixedHeight : maxHeight;\r\n        const canvasWidth = Math.ceil(displayWidth * resolution);\r\n        const canvasHeight = Math.ceil(displayHeight * resolution);\r\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\r\n            canvas.width = canvasWidth;\r\n            canvas.height = canvasHeight;\r\n            this.texture.setSize(displayWidth, displayHeight);\r\n            this.setSize(displayWidth, displayHeight);\r\n        }\r\n        ctx.save();\r\n        ctx.scale(resolution, resolution);\r\n        this.syncContext(canvas, ctx);\r\n        const backgroundStyle = this.backgroundStyle;\r\n        if (backgroundStyle) {\r\n            ctx.save();\r\n            ctx.fillStyle = backgroundStyle;\r\n            ctx.strokeStyle = backgroundStyle;\r\n            const cornerRadius = this.cornerRadius;\r\n            const halfRadius = (cornerRadius > 0) ? cornerRadius / 2 : 0;\r\n            if (cornerRadius) {\r\n                ctx.lineWidth = cornerRadius;\r\n                ctx.strokeRect(halfRadius, halfRadius, displayWidth - cornerRadius, displayHeight - cornerRadius);\r\n            }\r\n            ctx.fillRect(halfRadius, halfRadius, displayWidth - cornerRadius, displayHeight - cornerRadius);\r\n            ctx.restore();\r\n        }\r\n        const textAlign = this.textAlign;\r\n        const isCenter = (textAlign === 'center');\r\n        const isRight = (textAlign === 'right' || textAlign === 'end');\r\n        const yOffset = ((displayHeight - maxHeight) / 2) + padding.top;\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n            const metrics = lineMetrics[i];\r\n            let tx = padding.left + metrics.left + strokeWidthHalf;\r\n            const ty = yOffset + metrics.y;\r\n            if (isCenter) {\r\n                tx = displayWidth / 2;\r\n            }\r\n            else if (isRight) {\r\n                tx = displayWidth - strokeWidthHalf;\r\n            }\r\n            if (strokeStyle) {\r\n                ctx.strokeText(line, tx, ty);\r\n            }\r\n            if (fillStyle) {\r\n                ctx.fillText(line, tx, ty);\r\n            }\r\n        }\r\n        ctx.restore();\r\n        if (this.texture.binding) {\r\n            this.texture.binding.update();\r\n        }\r\n        this.setDirty(DIRTY_CONST.TEXTURE);\r\n        return this;\r\n    }\r\n    get text() {\r\n        return this._text;\r\n    }\r\n    set text(value) {\r\n        this.setText(value);\r\n    }\r\n    setText(value = '') {\r\n        if (Array.isArray(value)) {\r\n            value = value.join('\\n');\r\n        }\r\n        if (value !== this._text) {\r\n            this._text = value.toString();\r\n            this.updateText();\r\n        }\r\n        return this;\r\n    }\r\n    destroy(reparentChildren) {\r\n        this.texture.destroy();\r\n        this.fillStyle = null;\r\n        this.strokeStyle = null;\r\n        this.backgroundStyle = null;\r\n        this.canvas = null;\r\n        this.context = null;\r\n        super.destroy(reparentChildren);\r\n    }\r\n}\n\nexport { Text };\n","import { DIRTY_CONST } from '../gameobjects/DIRTY_CONST.js';\nimport { HasDirtyChildren } from './HasDirtyChildren.js';\n\nfunction UpdateCachedLayers(cachedLayers, dirtyCamera) {\r\n    cachedLayers.forEach(layer => {\r\n        if (dirtyCamera || HasDirtyChildren(layer)) {\r\n            layer.node.setDirty(DIRTY_CONST.CHILD_CACHE);\r\n        }\r\n        else {\r\n            layer.children.length = 0;\r\n        }\r\n    });\r\n}\n\nexport { UpdateCachedLayers };\n","import { DIRTY_CONST } from '../gameobjects/DIRTY_CONST.js';\n\nfunction HasDirtyChildren(parent) {\r\n    if (parent.node.isDirty(DIRTY_CONST.CHILD_CACHE)) {\r\n        return true;\r\n    }\r\n    const stack = [parent];\r\n    while (stack.length > 0) {\r\n        const entry = stack.pop();\r\n        if (entry.node.isDirty(DIRTY_CONST.TRANSFORM)) {\r\n            return true;\r\n        }\r\n        const numChildren = entry.children.length;\r\n        if (numChildren > 0) {\r\n            for (let i = 0; i < numChildren; i++) {\r\n                stack.push(entry.children[i]);\r\n            }\r\n        }\r\n    }\r\n    stack.length = 0;\r\n    return false;\r\n}\n\nexport { HasDirtyChildren };\n","import '../gameobjects/DIRTY_CONST.js';\nimport { CalculateTotalRenderable } from './CalculateTotalRenderable.js';\nimport './HasDirtyChildren.js';\nimport { UpdateCachedLayers } from './UpdateCachedLayers.js';\nimport { WorldDepthFirstSearch } from './WorldDepthFirstSearch.js';\n\nfunction BuildRenderList(world) {\r\n    const cachedLayers = [];\r\n    const stack = [];\r\n    const entries = WorldDepthFirstSearch(cachedLayers, world, stack);\r\n    const renderData = world.renderData;\r\n    if (cachedLayers.length > 0) {\r\n        UpdateCachedLayers(cachedLayers, world.camera.dirtyRender);\r\n    }\r\n    entries.forEach(entry => {\r\n        if (entry.children.length) {\r\n            CalculateTotalRenderable(entry, renderData);\r\n        }\r\n        else {\r\n            renderData.numRendered++;\r\n            renderData.numRenderable++;\r\n            if (entry.node.dirtyFrame >= renderData.gameFrame) {\r\n                renderData.dirtyFrame++;\r\n            }\r\n        }\r\n    });\r\n    renderData.renderList = entries;\r\n    if (world.forceRefresh) {\r\n        renderData.dirtyFrame++;\r\n        world.forceRefresh = false;\r\n    }\r\n}\n\nexport { BuildRenderList };\n","function WorldDepthFirstSearch(cachedLayers, parent, output = []) {\r\n    for (let i = 0; i < parent.numChildren; i++) {\r\n        const node = parent.children[i];\r\n        if (node.isRenderable()) {\r\n            const children = [];\r\n            const entry = { node, children };\r\n            output.push(entry);\r\n            if (node.willRenderChildren && node.numChildren > 0) {\r\n                if (node.willCacheChildren) {\r\n                    cachedLayers.push(entry);\r\n                }\r\n                WorldDepthFirstSearch(cachedLayers, node, children);\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\n\nexport { WorldDepthFirstSearch };\n","function CalculateTotalRenderable(entry, renderData) {\r\n    renderData.numRendered++;\r\n    renderData.numRenderable++;\r\n    if (entry.node.dirtyFrame >= renderData.gameFrame) {\r\n        renderData.dirtyFrame++;\r\n    }\r\n    entry.children.forEach(child => {\r\n        if (child.children.length > 0) {\r\n            CalculateTotalRenderable(child, renderData);\r\n        }\r\n    });\r\n}\n\nexport { CalculateTotalRenderable };\n","function ResetWorldRenderData(renderData, gameFrame) {\r\n    renderData.gameFrame = gameFrame;\r\n    renderData.dirtyFrame = 0;\r\n    renderData.numRendered = 0;\r\n    renderData.numRenderable = 0;\r\n    renderData.renderList.length = 0;\r\n}\n\nexport { ResetWorldRenderData };\n","import '../GameInstance.js';\nimport '../math/matrix2d/Matrix2D.js';\nimport '../geom/rectangle/Contains.js';\nimport '../geom/rectangle/Rectangle.js';\nimport '../utils/NOOP.js';\nimport '../math/vec2/Vec2Callback.js';\nimport '../config/DefaultOrigin.js';\nimport '../display/DepthFirstSearch.js';\nimport '../display/GetChildIndex.js';\nimport '../display/RemoveChildAt.js';\nimport '../display/RemoveChild.js';\nimport '../gameobjects/events/AddedToWorldEvent.js';\nimport { DestroyEvent } from '../gameobjects/events/DestroyEvent.js';\nimport { PostUpdateEvent } from '../gameobjects/events/PostUpdateEvent.js';\nimport '../gameobjects/events/RemovedFromWorldEvent.js';\nimport { UpdateEvent } from '../gameobjects/events/UpdateEvent.js';\nimport { Emit } from '../events/Emit.js';\nimport '../display/SetWorld.js';\nimport '../display/SetParent.js';\nimport '../gameobjects/DIRTY_CONST.js';\nimport '../display/RemoveChildrenBetween.js';\nimport '../display/DestroyChildren.js';\nimport { RemoveChildren } from '../display/RemoveChildren.js';\nimport '../display/ReparentChildren.js';\nimport '../events/EventInstance.js';\nimport { Off } from '../events/Off.js';\nimport { On } from '../events/On.js';\nimport { Once } from '../events/Once.js';\nimport '../gameobjects/components/transform/GetVertices.js';\nimport '../gameobjects/components/bounds/BoundsComponent.js';\nimport '../gameobjects/components/input/InputComponent.js';\nimport '../math/vec2/Vec2.js';\nimport '../gameobjects/components/transform/UpdateLocalTransform.js';\nimport '../math/matrix2d/Copy.js';\nimport '../gameobjects/components/transform/UpdateWorldTransform.js';\nimport '../gameobjects/components/transform/TransformComponent.js';\nimport { GameObject } from '../gameobjects/GameObject.js';\nimport { WorldRenderEvent } from './events/WorldRenderEvent.js';\nimport { WorldShutdownEvent } from './events/WorldShutdownEvent.js';\nimport './CalculateTotalRenderable.js';\nimport './HasDirtyChildren.js';\nimport './UpdateCachedLayers.js';\nimport './WorldDepthFirstSearch.js';\nimport { BuildRenderList } from './BuildRenderList.js';\nimport { MergeRenderData } from './MergeRenderData.js';\nimport { ResetWorldRenderData } from './ResetWorldRenderData.js';\n\nclass BaseWorld extends GameObject {\r\n    constructor(scene) {\r\n        super();\r\n        this.forceRefresh = false;\r\n        this.type = 'BaseWorld';\r\n        this.scene = scene;\r\n        this.world = this;\r\n        this.events = new Map();\r\n        this._updateListener = On(scene, 'update', (delta, time) => this.update(delta, time));\r\n        this._renderListener = On(scene, 'render', (renderData) => this.render(renderData));\r\n        this._shutdownListener = On(scene, 'shutdown', () => this.shutdown());\r\n        Once(scene, 'destroy', () => this.destroy());\r\n    }\r\n    update(delta, time) {\r\n        if (!this.willUpdate) {\r\n            return;\r\n        }\r\n        Emit(this, UpdateEvent, delta, time, this);\r\n        super.update(delta, time);\r\n    }\r\n    postUpdate(delta, time) {\r\n        Emit(this, PostUpdateEvent, delta, time, this);\r\n    }\r\n    render(sceneRenderData) {\r\n        const renderData = this.renderData;\r\n        ResetWorldRenderData(renderData, sceneRenderData.gameFrame);\r\n        if (!this.willRender || !this.visible) {\r\n            return;\r\n        }\r\n        BuildRenderList(this);\r\n        Emit(this, WorldRenderEvent, renderData, this);\r\n        MergeRenderData(sceneRenderData, renderData);\r\n        if (this.camera) {\r\n            this.camera.dirtyRender = false;\r\n        }\r\n    }\r\n    shutdown() {\r\n        const scene = this.scene;\r\n        Off(scene, 'update', this._updateListener);\r\n        Off(scene, 'render', this._renderListener);\r\n        Off(scene, 'shutdown', this._shutdownListener);\r\n        RemoveChildren(this);\r\n        Emit(this, WorldShutdownEvent, this);\r\n        ResetWorldRenderData(this.renderData, 0);\r\n        if (this.camera) {\r\n            this.camera.reset();\r\n        }\r\n    }\r\n    destroy(reparentChildren) {\r\n        super.destroy(reparentChildren);\r\n        Emit(this, DestroyEvent, this);\r\n        ResetWorldRenderData(this.renderData, 0);\r\n        if (this.camera) {\r\n            this.camera.destroy();\r\n        }\r\n        this.events.clear();\r\n        this.camera = null;\r\n        this.renderData = null;\r\n        this.events = null;\r\n    }\r\n}\n\nexport { BaseWorld };\n","const UpdateEvent = 'update';\n\nexport { UpdateEvent };\n","const PostUpdateEvent = 'postupdate';\n\nexport { PostUpdateEvent };\n","const WorldRenderEvent = 'worldrender';\n\nexport { WorldRenderEvent };\n","function MergeRenderData(sceneRenderData, worldRenderData) {\r\n    sceneRenderData.numDirtyFrames += worldRenderData.dirtyFrame;\r\n    sceneRenderData.numTotalFrames += worldRenderData.numRendered;\r\n    if (worldRenderData.camera.dirtyRender) {\r\n        sceneRenderData.numDirtyCameras++;\r\n    }\r\n    sceneRenderData.worldData.push(worldRenderData);\r\n}\n\nexport { MergeRenderData };\n","import './GetChildIndex.js';\nimport './RemoveChildAt.js';\nimport { RemoveChild } from './RemoveChild.js';\n\nfunction RemoveChildren(parent, ...children) {\r\n    children.forEach(child => {\r\n        RemoveChild(parent, child);\r\n    });\r\n    return children;\r\n}\n\nexport { RemoveChildren };\n","const WorldShutdownEvent = 'worldshutdown';\n\nexport { WorldShutdownEvent };\n","import '../GameInstance.js';\nimport '../math/matrix2d/Matrix2D.js';\nimport '../geom/rectangle/Contains.js';\nimport '../geom/rectangle/Rectangle.js';\nimport '../utils/NOOP.js';\nimport '../math/vec2/Vec2Callback.js';\nimport { StaticCamera } from '../camera/StaticCamera.js';\nimport '../config/DefaultOrigin.js';\nimport '../display/DepthFirstSearch.js';\nimport '../display/GetChildIndex.js';\nimport '../display/RemoveChildAt.js';\nimport '../display/RemoveChild.js';\nimport '../gameobjects/events/AddedToWorldEvent.js';\nimport '../gameobjects/events/DestroyEvent.js';\nimport '../gameobjects/events/PostUpdateEvent.js';\nimport '../gameobjects/events/RemovedFromWorldEvent.js';\nimport '../gameobjects/events/UpdateEvent.js';\nimport '../events/Emit.js';\nimport '../display/SetWorld.js';\nimport '../display/SetParent.js';\nimport '../gameobjects/DIRTY_CONST.js';\nimport '../display/RemoveChildrenBetween.js';\nimport '../display/DestroyChildren.js';\nimport '../display/RemoveChildren.js';\nimport '../display/ReparentChildren.js';\nimport '../events/EventInstance.js';\nimport '../events/Off.js';\nimport '../events/On.js';\nimport '../events/Once.js';\nimport '../gameobjects/components/transform/GetVertices.js';\nimport '../gameobjects/components/bounds/BoundsComponent.js';\nimport '../gameobjects/components/input/InputComponent.js';\nimport '../math/vec2/Vec2.js';\nimport '../gameobjects/components/transform/UpdateLocalTransform.js';\nimport '../math/matrix2d/Copy.js';\nimport '../gameobjects/components/transform/UpdateWorldTransform.js';\nimport '../gameobjects/components/transform/TransformComponent.js';\nimport '../gameobjects/GameObject.js';\nimport './events/WorldRenderEvent.js';\nimport './events/WorldShutdownEvent.js';\nimport './CalculateTotalRenderable.js';\nimport './HasDirtyChildren.js';\nimport './UpdateCachedLayers.js';\nimport './WorldDepthFirstSearch.js';\nimport './BuildRenderList.js';\nimport './MergeRenderData.js';\nimport './ResetWorldRenderData.js';\nimport { BaseWorld } from './BaseWorld.js';\nimport { CreateWorldRenderData } from './CreateWorldRenderData.js';\n\nclass StaticWorld extends BaseWorld {\r\n    constructor(scene) {\r\n        super(scene);\r\n        this.type = 'StaticWorld';\r\n        this.camera = new StaticCamera();\r\n        this.renderData = CreateWorldRenderData(this.camera);\r\n    }\r\n}\n\nexport { StaticWorld };\n","function CreateWorldRenderData(camera) {\r\n    return {\r\n        camera,\r\n        gameFrame: 0,\r\n        dirtyFrame: 0,\r\n        numRendered: 0,\r\n        numRenderable: 0,\r\n        renderList: []\r\n    };\r\n}\n\nexport { CreateWorldRenderData };\n","import { SceneManagerInstance } from './SceneManagerInstance.js';\nimport { GetConfigValue } from './GetConfigValue.js';\n\nfunction Install(scene, config = {}) {\r\n    const sceneManager = SceneManagerInstance.get();\r\n    const size = sceneManager.scenes.size;\r\n    const sceneIndex = sceneManager.sceneIndex;\r\n    const firstScene = (size === 0);\r\n    if (typeof config === 'string') {\r\n        scene.key = config;\r\n    }\r\n    else if (config || (!config && firstScene)) {\r\n        scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex.toString());\r\n    }\r\n    if (sceneManager.scenes.has(scene.key)) {\r\n        console.warn('Scene key already in use: ' + scene.key);\r\n    }\r\n    else {\r\n        sceneManager.scenes.set(scene.key, scene);\r\n        sceneManager.flush = true;\r\n        sceneManager.sceneIndex++;\r\n    }\r\n}\n\nexport { Install };\n","function GetConfigValue(config, property, defaultValue) {\r\n    if (Object.prototype.hasOwnProperty.call(config, property)) {\r\n        return config[property];\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\n\nexport { GetConfigValue };\n","import '../../renderer/webgl1/colors/PackColor.js';\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors.js';\n\nfunction SetAlpha(alpha, ...children) {\r\n    children.forEach(child => {\r\n        const vertexAlpha = child.vertexAlpha;\r\n        vertexAlpha[0] = alpha;\r\n        vertexAlpha[1] = alpha;\r\n        vertexAlpha[2] = alpha;\r\n        vertexAlpha[3] = alpha;\r\n        PackColors(child);\r\n    });\r\n    return children;\r\n}\n\nexport { SetAlpha };\n","import { XType, YType } from '../IBoardData';\r\n\r\nexport let GetXYKey = function (\r\n    x: XType | undefined,\r\n    y: YType | undefined\r\n): string | undefined {\r\n\r\n    return ((x === undefined) || (y === undefined)) ? undefined : `${x}|${y}`;\r\n}","import {\r\n    IChess,\r\n    XType, YType, ZType,\r\n    ZMapType\r\n} from '../IBoardData';\r\nimport { GetXYKey } from './Key';\r\n\r\nexport let AddChessToZMap = function (\r\n    chess: IChess,\r\n    chessMap: Map<string, ZMapType>,\r\n    prevX: XType | undefined,\r\n    prevY: YType | undefined,\r\n    prevZ: ZType | undefined,\r\n    currX: XType | undefined,\r\n    currY: YType | undefined,\r\n    currZ: ZType | undefined\r\n) {\r\n    if ((prevX === currX) && (prevY === currY) && (prevZ === currZ)) {\r\n        return;\r\n    }\r\n    let prevKey = GetXYKey(prevX, prevY);\r\n    let currKey = GetXYKey(currX, currY);\r\n    if (prevKey) {\r\n        let zMap = chessMap.get(prevKey);\r\n        zMap.delete(prevZ);\r\n        if (prevKey === currKey) {\r\n            zMap.set(currZ, chess);\r\n            return;\r\n        } else if (zMap.size === 0) {\r\n            chessMap.delete(prevKey);\r\n        }\r\n    }\r\n    if (currKey) {\r\n        let zMap = chessMap.get(currKey);\r\n        if (zMap) {\r\n            zMap.set(currZ, chess);\r\n        } else {\r\n            zMap = new Map();\r\n            zMap.set(currZ, chess);\r\n            chessMap.set(currKey, zMap);\r\n        }\r\n    }\r\n}\r\n\r\nexport let RemoveChessFromZMap = function (\r\n    chessMap: Map<string, ZMapType>,\r\n    x: XType,\r\n    y: YType,\r\n    z?: ZType\r\n) {\r\n    let key = GetXYKey(x, y);\r\n    let zMap = chessMap.get(key);\r\n    if (zMap) {\r\n        if (z !== undefined) {\r\n            zMap.delete(z);\r\n            if (zMap.size === 0) {\r\n                chessMap.delete(key);\r\n            }\r\n        } else {\r\n            zMap.clear();\r\n            chessMap.delete(key);\r\n        }\r\n    }\r\n}","import {\r\n    ChessSetType,\r\n    IChess,\r\n    AnyKeyType\r\n} from '../IBoardData';\r\n\r\nexport let AddChessToSet = function (\r\n    chess: IChess,\r\n    chessMap: Map<AnyKeyType, ChessSetType>,\r\n    prevKey: AnyKeyType | undefined,\r\n    currKey: AnyKeyType | undefined\r\n): void {\r\n    if (prevKey === currKey) {\r\n        return;\r\n    }\r\n\r\n    if (prevKey !== undefined) {\r\n        let chessSet = chessMap.get(prevKey);\r\n        if (chessSet) {\r\n            chessSet.delete(chess);\r\n            if (chessSet.size === 0) {\r\n                chessMap.delete(prevKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (currKey !== undefined) {\r\n        let chessSet = chessMap.get(currKey);\r\n        if (chessSet) {\r\n            chessSet.add(chess);\r\n        } else {\r\n            chessSet = new Set();\r\n            chessSet.add(chess);\r\n            chessMap.set(currKey, chessSet);\r\n        }\r\n    }\r\n}\r\n\r\nexport let RemoveChessFromSet = function (\r\n    chessMap: Map<AnyKeyType, ChessSetType>,\r\n    key: AnyKeyType,\r\n    chess: IChess\r\n): void {\r\n\r\n    let chessSet = chessMap.get(key);\r\n    if (chessSet) {\r\n        chessSet.delete(chess);\r\n        if (chessSet.size === 0) {\r\n            chessMap.delete(key);\r\n        }\r\n    }\r\n}","import {\r\n    IBoardData,\r\n    IChess,\r\n    XType, YType, ZType\r\n} from '../IBoardData';\r\nimport { AddChessToZMap } from './ZMap';\r\nimport { AddChessToSet } from './ChessSet';\r\n\r\nexport let AddChess = function (\r\n    boardData: IBoardData,\r\n    chess: IChess,\r\n    x: XType,\r\n    y: YType,\r\n    z: ZType\r\n): void {\r\n\r\n    let prevXYZ = boardData.chessToXYZ.get(chess);\r\n    let prevX = (prevXYZ) ? prevXYZ.x : undefined;\r\n    let prevY = (prevXYZ) ? prevXYZ.y : undefined;\r\n    let prevZ = (prevXYZ) ? prevXYZ.y : undefined;\r\n\r\n    if (prevXYZ) {\r\n        prevXYZ.x = x;\r\n        prevXYZ.y = y;\r\n        prevXYZ.z = z;\r\n    } else {\r\n        boardData.chessToXYZ.set(chess, { x: x, y: y, z: z });\r\n    }\r\n    AddChessToZMap(chess, boardData.XYToZMap, prevX, prevY, prevZ, x, y, z);\r\n    AddChessToSet(chess, boardData.XToChessSet, prevX, x);\r\n    AddChessToSet(chess, boardData.YToChessSet, prevY, y);\r\n    AddChessToSet(chess, boardData.ZToChessSet, prevZ, z);\r\n}","import {\r\n    IBoardData,\r\n    XType, YType, ZType,\r\n    IChess, ZMapType\r\n} from '../IBoardData';\r\nimport { GetXYKey } from './Key';\r\n\r\nexport let GetChess = function (\r\n    boardData: IBoardData,\r\n    x: XType,\r\n    y: YType,\r\n    z?: ZType\r\n): IChess | ZMapType | null {\r\n    let zMap = boardData.XYToZMap.get(GetXYKey(x, y));\r\n    if (zMap === undefined) {\r\n        return null;\r\n    }\r\n\r\n    if (z !== undefined) {\r\n        return (zMap.has(z)) ? zMap.get(z) : null;\r\n    } else {\r\n        return zMap;\r\n    }\r\n}","export let GetMaxMapKey = function (map: Map<number, any>) {\r\n    let result = -Infinity;\r\n    for (const [key, item] of map) {\r\n        if (result < key) {\r\n            result = key;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport let GetMinMapKey = function (map: Map<number, any>) {\r\n    let result = Infinity;\r\n    for (const [key, item] of map) {\r\n        if (result > key) {\r\n            result = key;\r\n        }\r\n    }\r\n    return result;\r\n}","import {\r\n    IBoardData,\r\n    ChessSetType, IChess, ZMapType,\r\n    XYZType, XType, YType, ZType\r\n} from './IBoardData';\r\nimport { AddChess } from './methods/AddChess';\r\nimport { GetChess } from './methods/GetChess';\r\nimport { RemoveChess } from './methods/RemoveChess';\r\nimport { HasChess } from './methods/HasChess';\r\nimport { Contains } from './methods/Contains';\r\nimport { GetXYZ } from './methods/GetXYZ';\r\nimport { GetMaxMapKey, GetMinMapKey } from './methods/GetMaxMinMapKey';\r\n\r\nexport class BoardData implements IBoardData {\r\n    chessToXYZ: Map<IChess, XYZType>; // {chess: {x,y,z}}\r\n    XYToZMap: Map<string, Map<ZType, IChess>>; // {'x|y': {z:chess}}\r\n    XToChessSet: Map<XType, ChessSetType>; // {x, [chess]}\r\n    YToChessSet: Map<YType, ChessSetType>; // {y, [chess]}\r\n    ZToChessSet: Map<ZType, ChessSetType>; // {z, [chess]}\r\n\r\n    _xMax: number | undefined;\r\n    _xMin: number | undefined;\r\n    _yMax: number | undefined;\r\n    _yMin: number | undefined;\r\n\r\n    constructor() {\r\n        this.chessToXYZ = new Map();\r\n        this.XYToZMap = new Map();\r\n        this.XToChessSet = new Map();\r\n        this.YToChessSet = new Map();\r\n        this.ZToChessSet = new Map();\r\n\r\n        this._xMax = undefined;\r\n        this._xMin = undefined;\r\n        this._yMax = undefined;\r\n        this._yMin = undefined;\r\n    }\r\n\r\n    destroy(): void {\r\n        this.clear();\r\n    }\r\n\r\n    clear(): this {\r\n        this.chessToXYZ.clear();\r\n        this.XYToZMap.clear();\r\n        this.XToChessSet.clear();\r\n        this.YToChessSet.clear();\r\n        this.ZToChessSet.clear();\r\n        this.clearBounds();\r\n        return this;\r\n    }\r\n\r\n    clearBounds(): this {\r\n        this._xMax = undefined;\r\n        this._xMin = undefined;\r\n        this._yMax = undefined;\r\n        this._yMin = undefined;\r\n        return this;\r\n    }\r\n\r\n    addChess(\r\n        chess: IChess,\r\n        x: XType,\r\n        y: YType,\r\n        z: ZType\r\n    ): this {\r\n\r\n        AddChess(this, chess, x, y, z);\r\n        this.clearBounds();\r\n        return this;\r\n    }\r\n\r\n    getChess(\r\n        x: XType,\r\n        y: YType,\r\n        z?: ZType\r\n    ): IChess | ZMapType | null {\r\n\r\n        return GetChess(this, x, y, z);\r\n    }\r\n\r\n    removeChess(\r\n        x: XType,\r\n        y: YType,\r\n        z?: ZType\r\n    ): this {\r\n\r\n        RemoveChess(this, x, y, z);\r\n        this.clearBounds();\r\n        return this;\r\n    }\r\n\r\n    hasChess(\r\n        chess: IChess\r\n    ): boolean {\r\n\r\n        return HasChess(this, chess);\r\n    }\r\n\r\n    contains(\r\n        x: XType,\r\n        y: YType,\r\n        z?: ZType\r\n    ): boolean {\r\n\r\n        return Contains(this, x, y, z);\r\n    }\r\n\r\n    getXYZ(\r\n        chess: IChess\r\n    ): XYZType | null {\r\n\r\n        return GetXYZ(this, chess);\r\n    }\r\n\r\n    get xMax() {\r\n        if (this._xMax === undefined) {\r\n            this._xMax = GetMaxMapKey(this.XToChessSet);\r\n        }\r\n        return this._xMax;\r\n    }\r\n\r\n    get xMin() {\r\n        if (this._xMin === undefined) {\r\n            this._xMin = GetMinMapKey(this.XToChessSet);\r\n        }\r\n        return this._xMin;\r\n    }\r\n\r\n    get yMax() {\r\n        if (this._yMax === undefined) {\r\n            this._yMax = GetMaxMapKey(this.YToChessSet);\r\n        }\r\n        return this._yMax;\r\n    }\r\n\r\n    get yMin() {\r\n        if (this._yMin === undefined) {\r\n            this._yMin = GetMinMapKey(this.YToChessSet);\r\n        }\r\n        return this._yMin;\r\n    }\r\n}\r\n\r\n\r\n","import {\r\n    IBoardData,\r\n    XType, YType, ZType,\r\n    IChess, ZMapType\r\n} from '../IBoardData';\r\nimport { GetChess } from './GetChess';\r\nimport { RemoveChessFromZMap } from './ZMap';\r\nimport { RemoveChessFromSet } from './ChessSet';\r\n\r\nexport let RemoveChess = function (\r\n    boardData: IBoardData,\r\n    x: XType,\r\n    y: YType,\r\n    z?: ZType\r\n): void {\r\n\r\n    if (z !== undefined) {\r\n        let chess = GetChess(boardData, x, y, z) as IChess;\r\n        if (chess === undefined) {\r\n            return;\r\n        }\r\n\r\n        boardData.chessToXYZ.delete(chess);\r\n        RemoveChessFromZMap(boardData.XYToZMap, x, y, z);\r\n        RemoveChessFromSet(boardData.XToChessSet, x, chess);\r\n        RemoveChessFromSet(boardData.YToChessSet, y, chess);\r\n        RemoveChessFromSet(boardData.ZToChessSet, z, chess);\r\n\r\n    } else {\r\n\r\n        let zMap = GetChess(boardData, x, y) as ZMapType;\r\n        if (zMap) {\r\n            for (const [z, chess] of zMap) {\r\n                boardData.chessToXYZ.delete(chess);\r\n                // RemoveChessFromZMap(boardData.XYToZMap, x, y, z);\r\n                RemoveChessFromSet(boardData.XToChessSet, x, chess);\r\n                RemoveChessFromSet(boardData.YToChessSet, y, chess);\r\n                RemoveChessFromSet(boardData.ZToChessSet, z, chess);\r\n\r\n            }\r\n\r\n            RemoveChessFromZMap(boardData.XYToZMap, x, y);\r\n\r\n        }\r\n    }\r\n}","import { IBoardData, IChess } from '../IBoardData';\r\n\r\nexport let HasChess = function (\r\n    boardData: IBoardData,\r\n    chess: IChess\r\n): boolean {\r\n\r\n    return boardData.chessToXYZ.has(chess);\r\n}","import {\r\n    IBoardData,\r\n    XType, YType, ZType\r\n} from '../IBoardData';\r\nimport { GetChess } from './GetChess';\r\n\r\nexport let Contains = function (\r\n    boardData: IBoardData,\r\n    x: XType,\r\n    y: YType,\r\n    z: ZType\r\n): boolean {\r\n\r\n    return (GetChess(boardData, x, y, z) !== undefined);\r\n}","import {\r\n    IBoardData,\r\n    IChess, XYZType\r\n} from '../IBoardData';\r\n\r\nexport let GetXYZ = function (\r\n    boardData: IBoardData,\r\n    chess: IChess\r\n): XYZType | null {\r\n    \r\n    return boardData.chessToXYZ.get(chess) || null;\r\n}","import { ILogicBoard } from '../ILogicBoard';\r\n\r\nexport let SetBoardWidth = function (\r\n    board: ILogicBoard,\r\n    width: number\r\n): void {\r\n\r\n    if (board.infinityMode) {\r\n        return;\r\n    }\r\n    if ((board.width === undefined) || (board.width <= width)) {\r\n        board.width = width;\r\n        return;\r\n    }\r\n\r\n    // this.width > width : collapse\r\n    for (let x = width; x < board.width; x++) {\r\n        for (let y = 0; y < board.height; y++) {\r\n            // TODO: RemoveChess\r\n        }\r\n    }\r\n\r\n    board.width = width;\r\n}","import { ILogicBoard } from '../ILogicBoard';\r\n\r\nexport let SetBoardHeight = function (\r\n    board: ILogicBoard,\r\n    height: number\r\n): void {\r\n\r\n    if (board.infinityMode) {\r\n        return;\r\n    }\r\n    if ((board.height === undefined) || (board.height <= height)) {\r\n        board.height = height;\r\n        return;\r\n    }\r\n\r\n    // board.height > height : collapse\r\n    for (let x = 0; x < board.width; x++) {\r\n        for (let y = height; y < board.height; y++) {\r\n\r\n            // TODO: RemoveChess\r\n        }\r\n    }\r\n\r\n    board.height = height;\r\n}","import {\r\n    ILogicBoard,\r\n    XType, YType, ZType,\r\n    IChess\r\n} from '../ILogicBoard';\r\n\r\nexport let TileXYZToChess = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    tileZ: ZType\r\n): IChess | null {\r\n\r\n    return board.boardData.getChess(tileX, tileY, tileZ) as IChess;\r\n}","import {\r\n    IChessData,\r\n    BlockerType, EdgeBlockerType\r\n} from './IChessData';\r\nimport { ILogicBoard, ZType, XYZType } from '../board/ILogicBoard';\r\n\r\nexport class ChessData implements IChessData {\r\n    parent: any;\r\n    board: ILogicBoard | null;\r\n    blocker: BlockerType | EdgeBlockerType;\r\n\r\n    constructor(parent: any) {\r\n        this.parent = parent;\r\n        this.board = null;\r\n        this.blocker = false;\r\n        this.boot();\r\n    }\r\n\r\n    boot() {\r\n        if ((typeof (this.parent) === 'object') && this.parent.on) {\r\n            this.parent.on('destroy', this.destroy, this);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        if (this.board) {\r\n            this.board.removeChess(this.parent);\r\n        }\r\n\r\n        this.parent = undefined;\r\n        this.board = null;\r\n    }\r\n\r\n    setBoard(board: ILogicBoard | null): this {\r\n\r\n        this.board = board;\r\n        return this;\r\n    }\r\n\r\n    get tileXYZ(): XYZType | null {\r\n        if (this.board == null) {\r\n            return null;\r\n        }\r\n        return this.board.chessToTileXYZ(this.parent) as XYZType | null;\r\n    }\r\n\r\n    setTileZ(tileZ: ZType): this {\r\n\r\n        if (this.board == null) {\r\n            return this;\r\n        }\r\n\r\n        let tileXYZ = this.tileXYZ;\r\n        this.board.addChess(this.parent, tileXYZ.x, tileXYZ.y, tileZ, false);\r\n        return this;\r\n    }\r\n\r\n    setBlocker(value: boolean = true): this {\r\n\r\n        this.blocker = value;\r\n        return this;\r\n    }\r\n\r\n    setBlockEdge(\r\n        direction: number | object,\r\n        value: boolean = true\r\n    ): this {\r\n\r\n        if (typeof (this.blocker) === 'boolean') {\r\n            this.blocker = {};\r\n        }\r\n\r\n        let blocker = this.blocker;\r\n        if (typeof (direction) === 'object') {\r\n            let blockEdges = direction;\r\n            for (let dir in blockEdges) {\r\n                blocker[dir] = blockEdges[dir];\r\n            }\r\n        } else {\r\n            blocker[direction] = value;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    getBlockEdge(direction: number): boolean {\r\n\r\n        if (typeof (this.blocker) === 'boolean') {\r\n            return false;\r\n        }\r\n\r\n        if (!this.blocker.hasOwnProperty(direction)) {\r\n            return false;\r\n        } else {\r\n            return this.blocker[direction];\r\n        }\r\n    }\r\n}","import { IChessData } from './IChessData';\r\nimport { ChessData } from './ChessData';\r\nimport { IChess } from '../board/ILogicBoard';\r\n\r\nexport let GetChessData = function (\r\n    chess: IChess\r\n): IChessData {\r\n\r\n    if (!chess.hasOwnProperty('rexChess')) {\r\n        chess.rexChess = new ChessData(chess);\r\n    }\r\n    return chess.rexChess;\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XType, YType, XYZType\r\n} from '../ILogicBoard';\r\n\r\nexport let GridAlign = function (\r\n    board: ILogicBoard,\r\n    chess?: IChess,\r\n    tileX?: XType,\r\n    tileY?: YType\r\n): void {\r\n\r\n    if (chess === undefined) {\r\n        let chessArray = board.getAllChess();\r\n        for (let i = 0, cnt = chessArray.length; i < cnt; i++) {\r\n            let chess = chessArray[i];\r\n            let tileXYZ = board.chessToTileXYZ(chess) as XYZType;\r\n\r\n            board.tileXYToWorldXY(tileXYZ.x, tileXYZ.y, chess);\r\n        }\r\n    } else {\r\n        if (tileX === undefined) {\r\n            let tileXYZ = board.chessToTileXYZ(chess) as XYZType;\r\n            tileX = tileXYZ.x;\r\n            tileY = tileXYZ.y;\r\n        }\r\n\r\n        board.tileXYToWorldXY(tileX, tileY, chess);\r\n    }\r\n};","import {\r\n    ILogicBoard,\r\n    IChess, XYType\r\n} from '../ILogicBoard';\r\nimport { Between as GetAngle } from '../../../utils/math/angle/Between';\r\n\r\nexport let AngleBetween = function (\r\n    board: ILogicBoard,\r\n    chessA: IChess | XYType,\r\n    chessB: IChess | XYType\r\n): number {\r\n\r\n    let tileA = board.chessToTileXYZ(chessA);\r\n    let tileB = board.chessToTileXYZ(chessB);\r\n    let out = board.tileXYToWorldXY(tileA.x, tileA.y, true);\r\n    let x0 = out.x;\r\n    let y0 = out.y;\r\n    out = board.tileXYToWorldXY(tileB.x, tileB.y, true);\r\n    let x1 = out.x;\r\n    let y1 = out.y;\r\n    return GetAngle(x0, y0, x1, y1); // -PI~PI\r\n}","export let Between = function (\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number\r\n): number {\r\n\r\n    return Math.atan2(y2 - y1, x2 - x1);\r\n};\r\n","const RAD_TO_DEG = 180 / Math.PI;\r\n\r\nexport let RadToDeg = function (radians: number): number {\r\n\r\n    return radians * RAD_TO_DEG;\r\n};\r\n","export let ShortestBetween = function (\r\n    angle1: number,\r\n    angle2: number\r\n): number {\r\n\r\n    let difference = angle2 - angle1;\r\n    if (difference === 0) {\r\n        return 0;\r\n    }\r\n\r\n    let times = Math.floor((difference - (-180)) / 360);\r\n    return difference - (times * 360);\r\n};\r\n","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard'\r\n\r\nexport let AngleToward = function (\r\n    board: ILogicBoard,\r\n    tileXY: XYType,\r\n    direction: number\r\n): number {\r\n\r\n    if (tileXY === undefined) {\r\n        tileXY = zeroTileXY;\r\n    }\r\n    // Save wrapMode, infinityMode and clear them\r\n    let wrapModeSave = board.wrapMode;\r\n    let infinityModeSave = board.infinityMode;\r\n    board.wrapMode = false;\r\n    board.infinityMode = true;\r\n\r\n    // Get neighborTileXY\r\n    let neighborTileXY = board.getNeighborTileXY(tileXY, direction, true) as XYType;\r\n\r\n    // Restore wrapMode, infinityMode and clear them\r\n    board.wrapMode = wrapModeSave;\r\n    board.infinityMode = infinityModeSave;\r\n    return board.angleBetween(tileXY, neighborTileXY); // -PI~PI\r\n}\r\n\r\nvar zeroTileXY: XYType = { x: 0, y: 0 };","import { Vec2Type } from '../../utils/types/VectorType';\r\nexport { Vec2Type };\r\n\r\nexport interface IGrid {\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n\r\n    directions: number;\r\n    readonly sides: number;\r\n    readonly allDirections: number[];\r\n    readonly halfDirections: number[];\r\n\r\n    _savedOriginX: number;\r\n    _savedOriginY: number;\r\n\r\n    directionBetween(\r\n        tileA: Vec2Type,\r\n        tileB: Vec2Type,\r\n        round?: boolean\r\n    ): number;\r\n\r\n    directionNormalize(\r\n        direction: number\r\n    ): number;\r\n\r\n    getDistance(\r\n        tileA: Vec2Type,\r\n        tileB: Vec2Type,\r\n        roughMode?: boolean\r\n    ): number;\r\n\r\n    getGridPoints(\r\n        tileX?: number | Vec2Type,\r\n        tileY?: number,\r\n        out?: Vec2Type[] | true\r\n    ): Vec2Type[];\r\n\r\n    getNeighborTileDirection(\r\n        srcTileXY: Vec2Type,\r\n        neighborTileXY: Vec2Type\r\n    ): number | null;\r\n\r\n    getNeighborTileXY(\r\n        srcTileXY: Vec2Type,\r\n        direction: number,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    getOppositeDirection(\r\n        tileX: number | Vec2Type,\r\n        tileY: number | undefined | null,\r\n        direction: number\r\n    ): number;\r\n\r\n    getTileXY(\r\n        worldX: number | Vec2Type,\r\n        worldY?: number,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    getTileXYAtDirection(\r\n        srcTileXY: Vec2Type,\r\n        direction: number,\r\n        distance: number,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    getWorldXY(\r\n        tileX: number | Vec2Type,\r\n        tileY?: number,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    mirror(\r\n        srcTileXY: Vec2Type,\r\n        mode: MirrorMode | MirrorModeString,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    offset(\r\n        srcTileXY: Vec2Type,\r\n        offsetTileX: number,\r\n        offsetTileY: number,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    restoreOrigin(): this;\r\n\r\n    ringToTileXYArray(\r\n        centerTileXY: Vec2Type,\r\n        radius: number,\r\n        out?: Vec2Type[]\r\n    ): Vec2Type[];\r\n\r\n    rotate(\r\n        srcTileXY: Vec2Type,\r\n        dir: number,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type\r\n\r\n    saveOrigin(): this;\r\n\r\n    setDirectionMode(\r\n        mode: number\r\n    ): this;\r\n}\r\n\r\nexport enum MirrorMode {\r\n    x = 1,\r\n    horizontal = 1,\r\n    h = 1,\r\n    y = 2,\r\n    vertical = 2,\r\n    v = 2,\r\n    xy = 3,\r\n}\r\n\r\nexport type MirrorModeString = 'x' | 'y' | 'xy' | 'vertical' | 'horizontal' | 'v' | 'h';","import {\r\n    IGrid,\r\n    Vec2Type,\r\n    MirrorMode, MirrorModeString\r\n} from '../grid/IGrid';\r\nimport { IBoardData } from './boarddata/IBoardData';\r\nimport { IChessData, EdgeBlockerType } from '../chess/IChessData';\r\n\r\nexport type XType = number;\r\nexport type YType = number;\r\nexport type ZType = number | string;\r\nexport type XYType = {\r\n    x: XType,\r\n    y: YType\r\n}\r\nexport type XYZType = {\r\n    x: XType,\r\n    y: YType,\r\n    z: ZType\r\n}\r\nexport { Vec2Type };\r\nexport interface IChess {\r\n    rexChess?: IChessData;\r\n    x: number,\r\n    y: number,\r\n    destroy?: () => any;\r\n};\r\nexport { EdgeBlockerType };\r\n\r\nexport interface IConfig {\r\n    grid?: IGrid;\r\n    wrap?: boolean;\r\n    inifinity?: boolean;\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\n// ForEachTileXY\r\nexport type ForEachTileXYCallback = (tileXY: XYType, board: ILogicBoard) => void;\r\nexport enum ForEachTileXYOrder {\r\n    'x+,y+' = 0,\r\n    'x-,y+' = 1,\r\n    'y+,x+' = 2,\r\n    'y-,x+' = 3\r\n}\r\n\r\n// GetTileXYAtDirection\r\nexport type DistanceConfig = {\r\n    end?: number,\r\n    start?: number,\r\n    step?: number\r\n};\r\n\r\n// Mirror\r\nexport { MirrorMode, MirrorModeString };\r\n\r\nexport interface ILogicBoard {\r\n    boardData: IBoardData;\r\n    grid: IGrid;\r\n    wrapMode: boolean;\r\n    infinityMode: boolean;\r\n    width: number | undefined;\r\n    height: number | undefined;\r\n    _isBoard: boolean; // Set to false for miniboard\r\n\r\n    destroy(): void;\r\n    setWrapMode(\r\n        mode?: boolean\r\n    ): this;\r\n\r\n    setInfinityMode(\r\n        mode?: boolean\r\n    ): this;\r\n\r\n    setBoardSize(\r\n        width?: number,\r\n        height?: number\r\n    ): this;\r\n\r\n\r\n    addChess(\r\n        chess: IChess,\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ?: ZType,\r\n        align?: boolean\r\n    ): this;\r\n\r\n    angleBetween(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType\r\n    ): number;\r\n\r\n    angleSnapToDirection(\r\n        tileXY: XYType,\r\n        angle: number\r\n    ): number;\r\n\r\n    angleToward(\r\n        tileXY: XYType,\r\n        direction: number\r\n    ): number;\r\n\r\n    areNeighbors(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType\r\n    ): boolean;\r\n\r\n    chessToTileXYZ(\r\n        chess: IChess | XYZType | XYType\r\n    ): XYZType | XYType | null;\r\n\r\n    contains(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ?: ZType\r\n    ): boolean;\r\n\r\n    directionBetween(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType,\r\n        round?: boolean\r\n    ): number | null;\r\n\r\n    filledRingToTileXYArray(\r\n        centerTileXY: XYType,\r\n        radius: number,\r\n        nearToFar?: boolean,\r\n        out?: XYType[]\r\n    ): XYType[];\r\n\r\n    fit(\r\n        tileXYArray: XYType[]\r\n    ): XYType[];\r\n\r\n    forEachTileXY(\r\n        callback: ForEachTileXYCallback,\r\n        scope: any,\r\n        order?: number\r\n    ): this;\r\n\r\n    getAllChess(\r\n        out?: IChess[]\r\n    ): IChess[];\r\n\r\n    getChessData(\r\n        chess: IChess\r\n    ): IChessData;\r\n\r\n    getDistance(\r\n        tileA: XYType,\r\n        tileB: XYType,\r\n        roughMode?: boolean\r\n    ): number;\r\n\r\n    getEmptyTileXYArray(\r\n        tileZ?: ZType,\r\n        out?: XYType[]\r\n    ): XYType[];\r\n\r\n    getGridPoints(\r\n        tileX?: number | Vec2Type,\r\n        tileY?: number,\r\n        out?: Vec2Type[] | true\r\n    ): Vec2Type[];\r\n\r\n    getNeighborChess(\r\n        chess: IChess | XYType,\r\n        directions: number | number[] | string | null,\r\n        neighborTileZ?: ZType | null,\r\n        out?: IChess[]\r\n    ): IChess | IChess[] | null;\r\n\r\n    getNeighborChessDirection(\r\n        chess: IChess | XYType,\r\n        neighborChess: IChess | XYType\r\n    ): number;\r\n\r\n    getNeighborTileDirection(\r\n        srcTileXY: XYType | null,\r\n        neighborTileXY: XYType | null\r\n    ): number | null;\r\n\r\n    getNeighborTileXY(\r\n        srcTileXY: XYType,\r\n        directions?: number | number[] | string | null,\r\n        out?: XYType | true\r\n    ): XYType | XYType[] | null;\r\n\r\n    getNeighborTileXYAtAngle(\r\n        srcTileXY: XYType,\r\n        angle: number,\r\n        out?: XYType | true\r\n    ): XYType | null;\r\n\r\n    getOppositeDirection(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        direction: number\r\n    ): number;\r\n\r\n    getRandomEmptyTileXY(\r\n        tileZ?: ZType,\r\n        out?: XYType | true\r\n    ): XYType | null;\r\n\r\n    getTileXYAtDirection(\r\n        chess: IChess | XYType,\r\n        directions: number | number[] | string | null,\r\n        distance: number | number[] | DistanceConfig,\r\n        out?: XYType | XYType[] | true\r\n    ): XYType | XYType[] | null;\r\n\r\n    getWrapTileXY(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        out?: XYType | true\r\n    ): XYType;\r\n\r\n    gridAlign(\r\n        chess?: IChess,\r\n        tileX?: XType,\r\n        tileY?: YType\r\n    ): this;\r\n\r\n    hasBlocker(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ?: ZType\r\n    ): boolean;\r\n\r\n    hasEdgeBlocker(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ: ZType | undefined,\r\n        direction: number\r\n    ): boolean;\r\n\r\n    isAngleInCone(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType,\r\n        face: number,\r\n        cone: number\r\n    ): boolean;\r\n\r\n    isDirectionInCone(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType,\r\n        face: number,\r\n        cone: number\r\n    ): boolean;\r\n\r\n    isOverlappingPoint(\r\n        worldX: number,\r\n        worldY: number,\r\n        tileZ?: ZType\r\n    ): boolean;\r\n\r\n    mirror(\r\n        tileXY: XYType,\r\n        mode: MirrorMode | MirrorModeString,\r\n        originTileXY?: XYType | null,\r\n        out?: XYType | true\r\n    ): XYType;\r\n\r\n    offset(\r\n        tileXY: XYType,\r\n        offsetTileX: number,\r\n        offsetTileY: number,\r\n        out?: XYType | true\r\n    ): XYType;\r\n\r\n    removeAllChess(\r\n        destroy?: boolean,\r\n        fromBoardRemove?: boolean\r\n    ): this;\r\n\r\n    removeChess(\r\n        chess: IChess | null,\r\n        tileX?: XType,\r\n        tileY?: YType,\r\n        tileZ?: ZType,\r\n        destroy?: boolean,\r\n        fromBoardRemove?: boolean\r\n    ): this;\r\n\r\n    ringToTileXYArray(\r\n        centerTileXY: XYType,\r\n        radius?: number,\r\n        out?: XYType[]\r\n    ): XYType[];\r\n\r\n    rotate(\r\n        tileXY: XYType,\r\n        direction: number,\r\n        originTileXY?: XYType | null,\r\n        out?: XYType | true\r\n    ): XYType;\r\n\r\n    setBoardWidth(\r\n        width?: number\r\n    ): this;\r\n\r\n    setBoardHeight(\r\n        height?: number\r\n    ): this;\r\n\r\n    swapChess(\r\n        chessA: IChess,\r\n        chessB: IChess,\r\n        align?: boolean\r\n    ): this;\r\n\r\n    tileXYArrayToChessArray(\r\n        tileXYArray: XYType[],\r\n        tileZ?: ZType,\r\n        out?: IChess[]\r\n    ): IChess[];\r\n\r\n    tileXYArrayToWorldXYArray(\r\n        tileXYArray: XYType[],\r\n        out?: Vec2Type[]\r\n    ): Vec2Type[];\r\n\r\n    tileXYToChessArray(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        out?: IChess[]\r\n    ): IChess[];\r\n\r\n    tileXYZToChess(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ: ZType\r\n    ): IChess | null;\r\n\r\n    tileZToChessArray(\r\n        tileZ: ZType,\r\n        out?: IChess[]\r\n    ): IChess[];\r\n\r\n    tileXYToWorldXY(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        out?: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    worldXYSnapToGrid(\r\n        worldX: number,\r\n        worldY: number,\r\n        out: Vec2Type | true\r\n    ): Vec2Type;\r\n\r\n    worldXYToChess(\r\n        worldX: number,\r\n        worldY: number,\r\n        tileZ?: ZType,\r\n        out?: IChess[]\r\n    ): IChess | IChess[];\r\n\r\n    worldXYToTileXY(\r\n        worldX: number,\r\n        worldY: number,\r\n        out?: XYType | true\r\n    ): XYType;\r\n}","import {\r\n    ILogicBoard,\r\n    XYType,\r\n    ForEachTileXYCallback, ForEachTileXYOrder\r\n} from '../ILogicBoard';\r\n\r\nexport let ForEachTileXY = function (\r\n    board: ILogicBoard,\r\n    callback: ForEachTileXYCallback,\r\n    scope: any,\r\n    order: ForEachTileXYOrder = ForEachTileXYOrder['x+,y+']\r\n): void {\r\n\r\n    let tileXY: XYType = { x: 0, y: 0 };\r\n    switch (order) {\r\n        case ForEachTileXYOrder['x+,y+']:\r\n            for (let tileY = 0; tileY < board.height; tileY++) {\r\n                for (let tileX = 0; tileX < board.width; tileX++) {\r\n                    tileXY.x = tileX;\r\n                    tileXY.y = tileY;\r\n                    if (scope) {\r\n                        callback.call(scope, tileXY, board);\r\n                    } else {\r\n                        callback(tileXY, board);\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case ForEachTileXYOrder['x-,y+']:\r\n            for (let tileY = 0; tileY < board.height; tileY++) {\r\n                for (let tileX = board.width - 1; tileX >= 0; tileX--) {\r\n                    tileXY.x = tileX;\r\n                    tileXY.y = tileY;\r\n                    if (scope) {\r\n                        callback.call(scope, tileXY, board);\r\n                    } else {\r\n                        callback(tileXY, board);\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case ForEachTileXYOrder['y+,x+']:\r\n            for (let tileX = 0; tileX < board.width; tileX++) {\r\n                for (let tileY = 0; tileY < board.height; tileY++) {\r\n                    tileXY.x = tileX;\r\n                    tileXY.y = tileY;\r\n                    if (scope) {\r\n                        callback.call(scope, tileXY, board);\r\n                    } else {\r\n                        callback(tileXY, board);\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        case ForEachTileXYOrder['y-,x+']:\r\n            for (let tileX = 0; tileX < board.width; tileX++) {\r\n                for (let tileY = board.height - 1; tileY >= 0; tileY--) {\r\n                    tileXY.x = tileX;\r\n                    tileXY.y = tileY;\r\n                    if (scope) {\r\n                        callback.call(scope, tileXY, board);\r\n                    } else {\r\n                        callback(tileXY, board);\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n};","export let RandomInt = function (min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};","import {\r\n    ILogicBoard,\r\n    XType, YType, ZType, XYType\r\n} from '../ILogicBoard';\r\nimport { RandomInt } from '../../../utils/math/RandomInt';\r\nimport { GetRandomItem } from '../../../utils/array/GetRandom';\r\n\r\nexport let GetRandomEmptyTileXY = function (\r\n    board: ILogicBoard,\r\n    tileZ: ZType = 0,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType | null {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    // Random picking a tileXY\r\n    for(let i =0; i< 20; i++) {\r\n        let tileX = RandomInt(0, board.width - 1) as XType;\r\n        let tileY = RandomInt(0, board.height - 1) as YType;\r\n        if (board.tileXYZToChess(tileX, tileY, tileZ) === null) {\r\n            out.x = tileX;\r\n            out.y = tileY;\r\n            return out;\r\n        }\r\n    }\r\n\r\n    // Not found any empty tileXY\r\n    // Get all empty tileXY\r\n    let tileXYArray = board.getEmptyTileXYArray(tileZ);\r\n    if (tileXYArray.length === 0) {\r\n        return null;\r\n    } else {\r\n        let tileXY: XYType = GetRandomItem(tileXYArray);\r\n        out.x = tileXY.x;\r\n        out.y = tileXY.y;\r\n        return out;\r\n    }\r\n}\r\n\r\nlet globTileXY: XYType = { x: 0, y: 0 };","export let GetRandomItem = function (\r\n    array: any[] | string,\r\n    startIndex: number = 0,\r\n    length: number = array.length\r\n) {\r\n\r\n    let randomIndex = startIndex + Math.floor(Math.random() * length);\r\n    return (array[randomIndex] === undefined) ? null : array[randomIndex];\r\n};\r\n","import {\r\n    ILogicBoard,\r\n    IChess, XYType,\r\n    DistanceConfig\r\n} from '../ILogicBoard';\r\n\r\nexport let GetTileXYAtDirection = function (\r\n    board: ILogicBoard,\r\n    chess: IChess | XYType,\r\n    directions: number | number[] | string | null,\r\n    distance: number | number[] | DistanceConfig,\r\n    out?: XYType | XYType[] | true\r\n): XYType | XYType[] | null {\r\n\r\n    let srcTileXY = board.chessToTileXYZ(chess);\r\n    if (srcTileXY === null) {\r\n        return null;\r\n    }\r\n\r\n    if (typeof (directions) === 'string') {\r\n        if (directions.indexOf(',') === -1) {\r\n            directions = parseInt(directions);\r\n        } else {\r\n            directions = directions.split('.').map((dir) => parseInt(dir, 10))\r\n        }\r\n    }\r\n\r\n    let isNumberDirection = (typeof (directions) === 'number');\r\n    let isNumberDistance = (typeof (distance) === 'number');\r\n    if (isNumberDirection && isNumberDistance) {\r\n        // Directions is a number, distance is a number, return a singl tileXY\r\n        let result = board.grid.getTileXYAtDirection(\r\n            srcTileXY,\r\n            directions as number,\r\n            distance as number,\r\n            out as XYType | true\r\n        ) as XYType;\r\n        board.getWrapTileXY(result.x, result.y, result);\r\n        if ((result.x === null) || (result.y === null)) {\r\n            result = null;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    if (!Array.isArray(out)) {\r\n        out = [];\r\n    }\r\n    if (directions === null) {\r\n        directions = board.grid.allDirections;\r\n    }\r\n\r\n    let resultTileXY: XYType;\r\n    if (isNumberDirection) {\r\n        // Directions is a number, distance is an object or array\r\n        if (Array.isArray(distance)) { // Distance is an array\r\n            for (let i = 0, cnt = distance.length; i < cnt; i++) {\r\n                resultTileXY = GetTileXYAtDirection(board, srcTileXY, directions, distance[i]) as XYType;\r\n                if (resultTileXY !== null) {\r\n                    out.push(resultTileXY);\r\n                }\r\n            }\r\n        } else {\r\n            let end: number,\r\n                start: number,\r\n                step: number;\r\n            ({\r\n                end = 1,\r\n                start = ((end > 0) ? 1 : -1),\r\n                step = ((end >= start) ? 1 : -1)\r\n            } = distance as DistanceConfig);\r\n\r\n            if (start === end) {\r\n                resultTileXY = GetTileXYAtDirection(board, srcTileXY, directions, end) as XYType; // Return a single tileXY\r\n                if (resultTileXY !== null) {\r\n                    out.push(resultTileXY);\r\n                }\r\n            } else if (start < end) {\r\n                for (let i = start; i <= end; i += step) {\r\n                    resultTileXY = GetTileXYAtDirection(board, srcTileXY, directions, i) as XYType; // return a single tileXY\r\n                    if (resultTileXY !== null) {\r\n                        out.push(resultTileXY);\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = start; i >= end; i += step) {\r\n                    resultTileXY = GetTileXYAtDirection(board, srcTileXY, directions, i) as XYType; // Return a single tileXY\r\n                    if (resultTileXY !== null) {\r\n                        out.push(resultTileXY);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    } else { // Directions is a list\r\n        for (let i = 0, cnt = (directions as number[]).length; i < cnt; i++) {\r\n            if (isNumberDistance) { // Return a single tileXY\r\n                resultTileXY = GetTileXYAtDirection(board, srcTileXY, directions[i], distance) as XYType;\r\n                if (resultTileXY !== null) {\r\n                    out.push(resultTileXY);\r\n                }\r\n            } else { // Append an array of tileXY\r\n                GetTileXYAtDirection(board, srcTileXY, directions[i], distance, out);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return out;\r\n}","export let Wrap = function (\r\n    value: number,\r\n    min: number,\r\n    max: number\r\n): number {\r\n\r\n    let range = max - min;\r\n    return (min + ((((value - min) % range) + range) % range));\r\n};\r\n","import {\r\n    ILogicBoard,\r\n    XType, YType, XYType\r\n} from '../ILogicBoard';\r\nimport { Wrap } from '../../../utils/math/Wrap';\r\n\r\nexport let GetWrapTileXY = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    if (board.wrapMode) {\r\n        tileX = Wrap(tileX, 0, board.width);\r\n    } else if ((!board.infinityMode) &&\r\n        ((tileX < 0) || (tileX >= board.width))) {\r\n        tileX = null;\r\n    }\r\n    if (board.wrapMode) {\r\n        tileY = Wrap(tileY, 0, board.height);\r\n    } else if ((!board.infinityMode) &&\r\n        ((tileY < 0) || (tileY >= board.height))) {\r\n        tileY = null;\r\n    }\r\n    out.x = tileX;\r\n    out.y = tileY;\r\n    return out;\r\n}\r\n\r\nlet globTileXY: XYType = { x: 0, y: 0 };","import {\r\n    ILogicBoard,\r\n    XType, YType, ZType,\r\n    EdgeBlockerType\r\n} from '../ILogicBoard'\r\n\r\nexport let HasEdgeBlocker = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    tileZ: ZType | undefined,\r\n    direction: number\r\n): boolean {\r\n\r\n    if (tileZ === undefined) {\r\n        // any chess at (tileX, tileY) has blocker\r\n        let chessArray = board.tileXYToChessArray(tileX, tileY);\r\n        for (let i = 0, cnt = chessArray.length; i < cnt; i++) {\r\n            if (IsEdgeBlocker(board.getChessData(chessArray[i]).blocker, direction)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n\r\n    } else {\r\n        // chess at (tileX, tileY, tileZ) has blocker\r\n        let chess = board.tileXYZToChess(tileX, tileY, tileZ);\r\n        if (chess === null) {\r\n            return false;\r\n        }\r\n        return IsEdgeBlocker(board.getChessData(chess).blocker, direction);\r\n    }\r\n}\r\n\r\nlet IsEdgeBlocker = function (\r\n    blocker: EdgeBlockerType | boolean,\r\n    direction: number\r\n): boolean {\r\n\r\n    if ((blocker === false) || (blocker === true)) {\r\n        return blocker;\r\n    } else {\r\n        return (blocker[direction] === true);\r\n    }\r\n}","export let Normalize = function (angle: number): number {\r\n    angle = angle % PI2;\r\n\r\n    if (angle >= 0) {\r\n        return angle;\r\n    }\r\n    else {\r\n        return angle + PI2;\r\n    }\r\n};\r\n\r\nconst PI2 = Math.PI * 2;\r\n","export let Equal = function (\r\n    a: number,\r\n    b: number,\r\n    epsilon: number = 0.0001\r\n): boolean {\r\n\r\n    return Math.abs(a - b) < epsilon;\r\n};\r\n","import {\r\n    ILogicBoard,\r\n    IChess, XYType\r\n} from '../ILogicBoard';\r\nimport { Normalize as AngleNormalize } from '../../../utils/math/angle/Normalize';\r\nimport { Equal } from '../../../utils/math/fuzzy/Equal';\r\n\r\nexport let IsAngleInCone = function (\r\n    board: ILogicBoard,\r\n    chessA: IChess | XYType,\r\n    chessB: IChess | XYType,\r\n    face: number,\r\n    cone: number\r\n): boolean {\r\n\r\n    let tileXYA = board.chessToTileXYZ(chessA);\r\n    let tileXYB = board.chessToTileXYZ(chessB);\r\n    let targetAngle = board.angleBetween(tileXYA, tileXYB); // -PI~PI\r\n    targetAngle = AngleNormalize(targetAngle); // 0~2PI\r\n    let deltaAngle = Math.abs(targetAngle - face);\r\n    deltaAngle = Math.min(deltaAngle, PI2 - deltaAngle);\r\n    let halfCone = cone / 2;\r\n    return Equal(deltaAngle, halfCone) || (deltaAngle < halfCone);\r\n}\r\n\r\nconst PI2 = Math.PI * 2;","import {\r\n    ILogicBoard,\r\n    XYType,\r\n    MirrorMode, MirrorModeString\r\n} from '../ILogicBoard';\r\n\r\nexport let Mirror = function (\r\n    board: ILogicBoard,\r\n    tileXY: XYType,\r\n    mode: MirrorMode | MirrorModeString,\r\n    originTileXY: XYType | null = null,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    if (originTileXY !== null) {\r\n        board.offset(tileXY, -originTileXY.x, -originTileXY.y, out);\r\n    } else {\r\n        out.x = tileXY.x;\r\n        out.y = tileXY.y;\r\n    }\r\n    board.grid.mirror(out, mode, out);\r\n    if (originTileXY !== null) {\r\n        board.offset(out, originTileXY.x, originTileXY.y, out);\r\n    }\r\n    return out;\r\n};\r\n\r\nvar globTileXY: XYType = { x: 0, y: 0 };","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let Offset = function (\r\n    board: ILogicBoard,\r\n    tileXY: XYType,\r\n    offsetTileX: number,\r\n    offsetTileY: number,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    if ((offsetTileX === 0) && (offsetTileY === 0)) {\r\n        out.x = tileXY.x;\r\n        out.y = tileXY.y;\r\n    } else {\r\n        board.grid.offset(tileXY, offsetTileX, offsetTileY, out);\r\n    }\r\n    return out;\r\n};\r\n\r\nvar globTileXY: XYType = { x: 0, y: 0 };","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let Rotate = function (\r\n    board: ILogicBoard,\r\n    tileXY: XYType,\r\n    direction: number,\r\n    originTileXY: XYType | null = null,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    if (originTileXY !== null) {\r\n        board.offset(tileXY, -originTileXY.x, -originTileXY.y, out);\r\n    } else {\r\n        out.x = tileXY.x;\r\n        out.y = tileXY.y;\r\n    }\r\n    board.grid.rotate(out, direction, out);\r\n    if (originTileXY !== null) {\r\n        board.offset(out, originTileXY.x, originTileXY.y, out);\r\n    }\r\n    return out;\r\n};\r\n\r\nvar globTileXY: XYType = { x: 0, y: 0 };","import {\r\n    ILogicBoard,\r\n    IChess, XYZType\r\n} from '../ILogicBoard';\r\n\r\nexport let SwapChess = function (\r\n    board: ILogicBoard,\r\n    chessA: IChess,\r\n    chessB: IChess,\r\n    align: boolean = true\r\n): void {\r\n\r\n    let tileXYZA = board.chessToTileXYZ(chessA) as XYZType;\r\n    let tileXYZB = board.chessToTileXYZ(chessB) as XYZType;\r\n    if ((tileXYZA == null) || (tileXYZB == null)) {\r\n        return;\r\n    }\r\n    board.removeChess(chessA);\r\n    board.removeChess(chessB);\r\n    board.addChess(chessA, tileXYZB.x, tileXYZB.y, tileXYZB.z, align);\r\n    board.addChess(chessB, tileXYZA.x, tileXYZA.y, tileXYZA.z, align);\r\n};","import {\r\n    ILogicBoard,\r\n    XType, YType,\r\n    IChess\r\n} from '../ILogicBoard';\r\nimport { ZMapType } from '../boarddata/IBoardData';\r\n\r\nexport let TileXYToChessArray = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    out: IChess[] = []\r\n): IChess[] {\r\n\r\n    let zMap = board.boardData.getChess(tileX, tileY) as ZMapType;\r\n    for (const [tileZ, chess] of zMap) {\r\n        out.push(chess);\r\n    }\r\n    return out;\r\n}","import { ILogicBoard, Vec2Type } from '../ILogicBoard';\r\n\r\nexport let WorldXYSnapToGrid = function (\r\n    board: ILogicBoard,\r\n    worldX: number,\r\n    worldY: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (out === true) {\r\n        out = globWorldXY;\r\n    }\r\n\r\n    board.worldXYToTileXY(worldX, worldY, out);\r\n    board.tileXYToWorldXY(out.x, out.y, out);\r\n    return out;\r\n};\r\n\r\nvar globWorldXY: Vec2Type = { x: 0, y: 0 };","export enum LayoutMode {\r\n    'orthogonal' = 0,\r\n    'isometric' = 1\r\n}\r\n\r\nexport type LayoutModeString = 'orthogonal' | 'isometric';\r\n\r\nexport enum DirMode {\r\n    '4dir' = 4,\r\n    '8dir' = 8\r\n};\r\n\r\nexport type DirModeString = '4dir' | '8dir';\r\n\r\nexport interface IConfig {\r\n    x?: number,\r\n    y?: number,\r\n    cellWidth?: number,\r\n    cellHeight?: number,\r\n    type?: LayoutMode | LayoutModeString,\r\n    dir?: DirMode | DirModeString\r\n}\r\n\r\nexport interface IState {\r\n    x?: number,\r\n    y?: number,\r\n    cellWidth?: number,\r\n    cellHeight?: number,\r\n    type?: LayoutMode | LayoutModeString,\r\n    dir?: DirMode | DirModeString\r\n}\r\n\r\nexport interface IQuadBase {\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n\r\n    _halfWidth: number,\r\n    _halfHeight: number,\r\n    mode: LayoutMode,\r\n    directions: DirMode,\r\n};","// orthogonal or isometric\r\nexport type DirectionToDeltaXYType = [number, number][];\r\n\r\nconst OrthogonalMap: DirectionToDeltaXYType = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n    [1, 1],\r\n    [-1, 1],\r\n    [-1, -1],\r\n    [1, -1]\r\n];\r\nconst IsometricMap: DirectionToDeltaXYType = OrthogonalMap;\r\n\r\nexport {\r\n    OrthogonalMap,\r\n    IsometricMap\r\n};","import {\r\n    OrthogonalMap as OrthogonalMapIn,\r\n    IsometricMap as IsometricMapIn,\r\n    DirectionToDeltaXYType\r\n} from './DirectionToDeltaXY';\r\n\r\nexport type DeltaXYToDirectionType = {\r\n    [x: number]: {\r\n        [y: number]: number\r\n    }\r\n}\r\n\r\nlet ReverseDirMap = function (\r\n    dirMap: DirectionToDeltaXYType\r\n): DeltaXYToDirectionType {\r\n\r\n    let out: DeltaXYToDirectionType = {},\r\n        entry: [number, number],\r\n        x: number,\r\n        y: number;\r\n    for (let dir in dirMap) {\r\n        entry = dirMap[dir]; // [x, y]\r\n        x = entry[0];\r\n        y = entry[1];\r\n        if (!out.hasOwnProperty(x)) {\r\n            out[x] = {}\r\n        }\r\n        out[x][y] = parseInt(dir);\r\n    }\r\n    return out;\r\n}\r\n\r\nconst OrthogonalMapOut = ReverseDirMap(OrthogonalMapIn);\r\nconst IsometricMapOut = ReverseDirMap(IsometricMapIn);\r\n\r\nexport {\r\n    OrthogonalMapOut as OrthogonalMap,\r\n    IsometricMapOut as IsometricMap\r\n};","export enum LayoutMode {\r\n    ODD_R = 0,\r\n    EVEN_R = 1,\r\n    ODD_Q = 2,\r\n    EVEN_Q = 3\r\n}\r\n\r\nexport type LayoutModeString = 'ODD_R' | 'EVEN_R' | 'ODD_Q' | 'EVEN_Q'\r\n\r\nexport enum StaggerAxis {\r\n    y = 0,\r\n    flat = 0,\r\n    x = 1,\r\n    pointy = 1\r\n}\r\n\r\nexport type StaggerAxisString = 'y' | 'x' | 'flat' | 'pointy';\r\n\r\nexport enum StaggerIndex {\r\n    even = 0,\r\n    odd = 1\r\n}\r\n\r\nexport type StaggerIndexString = 'even' | 'odd';\r\n\r\nexport interface IState {\r\n    x?: number,\r\n    y?: number,\r\n\r\n    radius?: number,\r\n    cellWidth?: number,\r\n    cellHeight?: number,\r\n\r\n    staggerAxis?: StaggerAxis | StaggerAxisString,\r\n    staggerIndex?: StaggerIndex | StaggerIndexString\r\n}\r\n\r\nexport interface IConfig {\r\n    x?: number,\r\n    y?: number,\r\n\r\n    radius?: number | undefined,\r\n    cellWidth?: number,\r\n    cellHeight?: number,\r\n\r\n    staggerAxis?: StaggerAxis | StaggerAxisString,\r\n    staggerIndex?: StaggerIndex | StaggerIndexString\r\n}\r\n\r\nexport interface IHexagonBase {\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n\r\n    _halfWidth: number,\r\n    _halfHeight: number,\r\n    radius: number,\r\n    mode: LayoutMode,\r\n    directions: number,\r\n    staggerAxis: StaggerAxis\r\n};","import {\r\n    IHexagonBase, IConfig, IState,\r\n    StaggerAxis, StaggerAxisString, StaggerIndex, StaggerIndexString, LayoutMode\r\n} from './IHexagonBase';\r\n\r\nexport class HexagonBase implements IHexagonBase {\r\n    x: number;\r\n    y: number;\r\n\r\n    _width: number;\r\n    _height: number;\r\n    _halfWidth: number;\r\n    _halfHeight: number;\r\n    radius: number;\r\n\r\n    mode: LayoutMode;\r\n    staggerAxis: StaggerAxis;\r\n    staggerIndex: StaggerIndex;\r\n    directions: number;\r\n\r\n    constructor({\r\n        x = 0,\r\n        y = 0,\r\n        radius = undefined,\r\n        cellWidth = 0,\r\n        cellHeight = 0,\r\n        staggerAxis = StaggerAxis.x,\r\n        staggerIndex = StaggerIndex.odd\r\n    }: IConfig = {}) {\r\n\r\n        this.setType(staggerAxis, staggerIndex);\r\n        this.setDirectionMode();\r\n\r\n        this.setOriginPosition(x, y);\r\n\r\n        if (radius !== undefined) {\r\n            this.setRadius(radius);\r\n        } else {\r\n            this.setCellSize(cellWidth, cellHeight);\r\n        }\r\n    }\r\n\r\n    fromJSON({\r\n        x = 0,\r\n        y = 0,\r\n        radius = undefined,\r\n        cellWidth = 0,\r\n        cellHeight = 0,\r\n        staggerAxis = StaggerAxis.x,\r\n        staggerIndex = StaggerIndex.odd\r\n    }: IState = {}): this {\r\n\r\n        this.setType(staggerAxis, staggerIndex);\r\n        this.setDirectionMode();\r\n\r\n        this.setOriginPosition(x, y);\r\n        if (radius !== undefined) {\r\n            this.setRadius(radius);\r\n        } else {\r\n            this.setCellSize(cellWidth, cellHeight);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    toJSON(): IState {\r\n        return {\r\n            x: this.x,\r\n            y: this.y,\r\n\r\n            radius: this.radius,\r\n            cellWidth: this.cellWidth,\r\n            cellHeight: this.cellHeight,\r\n            staggerAxis: this.staggerAxis,\r\n            staggerIndex: this.staggerIndex\r\n        }\r\n    }\r\n\r\n    setOriginPosition(x: number, y: number): this {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        this._width = value;\r\n        this._halfWidth = value / 2;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value: number) {\r\n        this._height = value;\r\n        this._halfHeight = value / 2;\r\n    }\r\n\r\n    setCellSize(width: number = 0, height: number = 0): this {\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.radius = undefined;\r\n        return this;\r\n    }\r\n\r\n    get cellWidth() {\r\n        return this.width;\r\n    }\r\n\r\n    set cellWidth(value: number) {\r\n        this.width = value;\r\n    }\r\n\r\n    get cellHeight() {\r\n        return this.height;\r\n    }\r\n\r\n    set cellHeight(value: number) {\r\n        this.height = value;\r\n    }\r\n\r\n    setRadius(radius: number = 0): this {\r\n\r\n        let cellWidth: number,\r\n            cellHeight: number;\r\n        if (this.staggerAxis === StaggerAxis.y) {\r\n            cellWidth = 2 * radius;\r\n            cellHeight = SQRT3 * radius;\r\n        } else {\r\n            cellWidth = SQRT3 * radius;\r\n            cellHeight = 2 * radius;\r\n        }\r\n        this.setCellSize(cellWidth, cellHeight);\r\n        this.radius = radius;\r\n        return this;\r\n    }\r\n\r\n    setDirectionMode(): this {\r\n        this.directions = 6;\r\n        return this;\r\n    }\r\n\r\n    setType(\r\n        staggerAxis: StaggerAxis | StaggerAxisString = 1,\r\n        staggerIndex: StaggerIndex | StaggerIndexString = 1\r\n    ): this {\r\n\r\n        if (typeof (staggerAxis) === 'string') {\r\n            staggerAxis = StaggerAxis[staggerAxis]\r\n        }\r\n        if (typeof (staggerIndex) === 'string') {\r\n            staggerIndex = StaggerIndex[staggerIndex]\r\n        }\r\n\r\n        this.staggerAxis = staggerAxis;\r\n        this.staggerIndex = staggerIndex;\r\n        if (staggerAxis === StaggerAxis.y) { // flat\r\n            this.mode = (staggerIndex === StaggerIndex.even) ? LayoutMode.EVEN_Q : LayoutMode.ODD_Q;\r\n        } else { // pointy\r\n            this.mode = (staggerIndex === StaggerIndex.even) ? LayoutMode.EVEN_R : LayoutMode.ODD_R;\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nconst SQRT3 = Math.sqrt(3);","import { LayoutMode } from './IHexagonBase';\r\n\r\nexport type CubeType = {\r\n    x: number,\r\n    y: number,\r\n    z: number\r\n}\r\n\r\nexport type ColRowType = {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport type QRType = {\r\n    q: number,\r\n    r: number\r\n}\r\n\r\nexport function cr2cube(\r\n    mode: LayoutMode,\r\n    col: number,\r\n    row: number,\r\n    out: CubeType | true = { x: 0, y: 0, z: 0 }\r\n): CubeType {\r\n\r\n    if (out === true) {\r\n        out = globCube;\r\n    }\r\n\r\n    switch (mode) {\r\n        case LayoutMode.ODD_R:\r\n            out.x = col - (row - (row & 1)) / 2;\r\n            out.z = row;\r\n            break;\r\n\r\n        case LayoutMode.EVEN_R:\r\n            out.x = col - (row + (row & 1)) / 2;\r\n            out.z = row;\r\n            break;\r\n\r\n        case LayoutMode.ODD_Q:\r\n            out.x = col;\r\n            out.z = row - (col - (col & 1)) / 2;\r\n            break;\r\n        case LayoutMode.EVEN_Q:\r\n            out.x = col;\r\n            out.z = row - (col + (col & 1)) / 2;\r\n            break;\r\n    }\r\n    out.y = -out.x - out.z;\r\n    return out;\r\n}\r\n\r\nexport function roundcube(\r\n    x: number | CubeType,\r\n    y?: number,\r\n    z?: number,\r\n    out: CubeType | true = { x: 0, y: 0, z: 0 }\r\n): CubeType {\r\n\r\n    if (typeof (x) !== 'number') {\r\n        out = x;\r\n        x = out.x;\r\n        y = out.y;\r\n        z = out.z;\r\n    }\r\n\r\n    if (out === true) {\r\n        out = globCube;\r\n    }\r\n\r\n    let rx = Math.round(x);\r\n    let ry = Math.round(y);\r\n    let rz = Math.round(z);\r\n\r\n    let dx = Math.abs(rx - x);\r\n    let dy = Math.abs(ry - y);\r\n    let dz = Math.abs(rz - z);\r\n\r\n    if ((dx > dy) && (dx > dz)) {\r\n        rx = -ry - rz;\r\n    } else if (dy > dz) {\r\n        ry = -rx - rz;\r\n    } else {\r\n        rz = -rx - ry;\r\n    }\r\n    out.x = rx;\r\n    out.y = ry;\r\n    out.z = rz;\r\n    return out;\r\n}\r\n\r\nexport function cube2cr(\r\n    mode: LayoutMode,\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n    out: ColRowType | true = { x: 0, y: 0 }\r\n): ColRowType {\r\n\r\n    if (out === true) {\r\n        out = globCR;\r\n    }\r\n\r\n    switch (mode) {\r\n        case LayoutMode.ODD_R:\r\n            out.x = x + (z - (z & 1)) / 2;\r\n            out.y = z;\r\n            break;\r\n        case LayoutMode.EVEN_R:\r\n            out.x = x + (z + (z & 1)) / 2;\r\n            out.y = z;\r\n            break;\r\n\r\n        case LayoutMode.ODD_Q:\r\n            out.x = x;\r\n            out.y = z + (x - (x & 1)) / 2;\r\n            break;\r\n        case LayoutMode.EVEN_Q:\r\n            out.x = x;\r\n            out.y = z + (x + (x & 1)) / 2;\r\n            break;\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function qr2cube(\r\n    q: number,\r\n    r: number,\r\n    out: CubeType | true = { x: 0, y: 0, z: 0 }\r\n): CubeType {\r\n\r\n    if (out === true) {\r\n        out = globCube;\r\n    }\r\n    out.x = q;\r\n    out.y = -q - r;\r\n    out.z = r;\r\n    return out;\r\n}\r\n\r\nexport function cube2qr(\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n    out: QRType | true = { q: 0, r: 0 }\r\n): QRType {\r\n\r\n    if (out === true) {\r\n        out = globQR;\r\n    }\r\n\r\n    out.q = x;\r\n    out.r = z;\r\n    return out;\r\n}\r\n\r\nvar globCube: CubeType = { x: 0, y: 0, z: 0 };\r\nvar globCR: ColRowType = { x: 0, y: 0 };\r\nvar globQR: QRType = { q: 0, r: 0 };","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { cr2cube, CubeType } from './CubeTransfer';\r\n\r\nexport let DirectionBetween = function (\r\n    hexagon: IHexagonBase,\r\n    tileA: Vec2Type,\r\n    tileB: Vec2Type,\r\n    round: boolean = true\r\n): number {\r\n\r\n    let direction: number;\r\n    cr2cube(hexagon.mode, tileA.x, tileA.y, globCubeA);\r\n    cr2cube(hexagon.mode, tileB.x, tileB.y, globCubeB);\r\n    let dx = globCubeB.x - globCubeA.x;\r\n    let dy = globCubeB.y - globCubeA.y;\r\n    let dz = globCubeB.z - globCubeA.z;\r\n    if (dz === 0) {\r\n        direction = (dx > 0) ? 0 : 3;\r\n    } else if (dx === 0) {\r\n        direction = (dz > 0) ? 1 : 4;\r\n    } else if (dy === 0) {\r\n        direction = (dz > 0) ? 2 : 5;\r\n    } else if ((dx > 0) && (dy < 0) && (dz > 0)) { // 0~1\r\n        direction = 0 + (dz / (-dy));\r\n    } else if ((dx < 0) && (dy < 0) && (dz > 0)) { // 1~2\r\n        direction = 1 + ((-dy) / dz);\r\n    } else if ((dx < 0) && (dy > 0) && (dz > 0)) { // 2~3\r\n        direction = 2 + (dy / (-dx));\r\n    } else if ((dx < 0) && (dy > 0) && (dz < 0)) { // 3~4\r\n        direction = 3 + ((-dz) / dy);\r\n    } else if ((dx > 0) && (dy > 0) && (dz < 0)) { // 4~5\r\n        direction = 4 + (dx / (-dz));\r\n    } else { // ((dx > 0) && (dy < 0) && (dz < 0)) // 5~0\r\n        direction = 5 + ((-dy) / dx);\r\n    }\r\n\r\n    if (round) {\r\n        direction = Math.round(direction);\r\n    }\r\n    return direction;\r\n}\r\n\r\nvar globCubeA: CubeType = { x: 0, y: 0, z: 0 };\r\nvar globCubeB: CubeType = { x: 0, y: 0, z: 0 };","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { cr2cube, CubeType } from './CubeTransfer';\r\n\r\nexport let GetDistance = function (\r\n    hexagon: IHexagonBase,\r\n    tileA: Vec2Type,\r\n    tileB: Vec2Type,\r\n    roughMode: boolean = false\r\n): number {\r\n\r\n    cr2cube(hexagon.mode, tileA.x, tileA.y, globCubeA);\r\n    cr2cube(hexagon.mode, tileB.x, tileB.y, globCubeB);\r\n    let dx = globCubeB.x - globCubeA.x;\r\n    let dy = globCubeB.y - globCubeA.y;\r\n    let dz = globCubeB.z - globCubeA.z;\r\n    return (Math.abs(dx) + Math.abs(dy) + Math.abs(dz)) / 2;\r\n}\r\n\r\nvar globCubeA: CubeType = { x: 0, y: 0, z: 0 };\r\nvar globCubeB: CubeType = { x: 0, y: 0, z: 0 };\r\n\r\nexport default GetDistance;","import { IHexagonBase, LayoutMode } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\n\r\nexport let GetWorldXY = function (\r\n    hexagon: IHexagonBase,\r\n    tileX: number | Vec2Type,\r\n    tileY: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (typeof (tileX) === 'object') {\r\n        tileY = tileX.y;\r\n        tileX = tileX.x;\r\n    }\r\n\r\n    if (out === true) {\r\n        out = globWorldXY;\r\n    }\r\n\r\n    let worldX = (tileX * hexagon.width);\r\n    let worldY = (tileY * hexagon.height);\r\n    switch (hexagon.mode) {\r\n        case LayoutMode.ODD_R:\r\n            if (tileY & 1) {\r\n                worldX += hexagon._halfWidth;\r\n            }\r\n            worldY *= 0.75;\r\n            break;\r\n\r\n        case LayoutMode.EVEN_R:\r\n            if (tileY & 1) {\r\n                worldX -= hexagon._halfWidth;\r\n            }\r\n            worldY *= 0.75;\r\n            break;\r\n\r\n        case LayoutMode.ODD_Q:\r\n            worldX *= 0.75;\r\n            if (tileX & 1) {\r\n                worldY += hexagon._halfHeight;\r\n            }\r\n            break;\r\n\r\n        case LayoutMode.EVEN_Q:\r\n            worldX *= 0.75;\r\n            if (tileX & 1) {\r\n                worldY -= hexagon._halfHeight;\r\n            }\r\n            break;\r\n    }\r\n    worldX += hexagon.x;\r\n    worldY += hexagon.y;\r\n    out.x = worldX;\r\n    out.y = worldY;\r\n    return out;\r\n}\r\n\r\nvar globWorldXY: Vec2Type = { x: 0, y: 0 };","const DEG_TO_RAD = Math.PI / 180;\r\n\r\nexport let DegToRad = function (degrees: number): number {\r\n\r\n    return degrees * DEG_TO_RAD;\r\n};\r\n","import { IHexagonBase, StaggerAxis } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { FillPositionArray } from '../utils/FillPositionArray';\r\nimport { GetWorldXY } from './GetWorldXY';\r\nimport { DegToRad } from '../../../utils/math/angle/DegToRad';\r\n\r\nexport let GetGridPoints = function (\r\n    hexagon: IHexagonBase,\r\n    tileX: number | Vec2Type = 0,\r\n    tileY: number = 0,\r\n    out: Vec2Type[] | true = []\r\n): Vec2Type[] {\r\n\r\n    if (typeof (tileX) === 'object') {\r\n        let tileXY = tileX;\r\n        tileY = tileXY.y;\r\n        tileX = tileXY.x;\r\n    }\r\n    if (out === true) {\r\n        out = globPoints;\r\n    }\r\n\r\n    FillPositionArray(6, out);\r\n\r\n    let x: number,\r\n        y: number;\r\n    ({ x, y } = GetWorldXY(hexagon, tileX, tileY))\r\n\r\n    if (hexagon.radius !== undefined) {\r\n        let radius = hexagon.radius;\r\n        let angleOffset = (hexagon.staggerAxis === StaggerAxis.flat) ? 0 : -30;\r\n        for (let i = 0; i < 6; i++) {\r\n            let angleDeg = (60 * i) + angleOffset;\r\n            let angleRad = DegToRad(angleDeg);\r\n            out[i].x = x + radius * Math.cos(angleRad);\r\n            out[i].y = y + radius * Math.sin(angleRad);\r\n        }\r\n\r\n    } else {\r\n        var halfW = hexagon._halfWidth;\r\n        var quarterW = halfW / 2;\r\n        var halfH = hexagon._halfHeight;\r\n        var quarterH = halfH / 2;\r\n        if (hexagon.staggerAxis === StaggerAxis.flat) {\r\n            out[0].x = x + halfW;\r\n            out[0].y = y;\r\n\r\n            out[1].x = x + quarterW;\r\n            out[1].y = y + halfH;\r\n\r\n            out[2].x = x - quarterW;\r\n            out[2].y = y + halfH;\r\n\r\n            out[3].x = x - halfW;\r\n            out[3].y = y;\r\n\r\n            out[4].x = x - quarterW;\r\n            out[4].y = y - halfH;\r\n\r\n            out[5].x = x + quarterW;\r\n            out[5].y = y - halfH;\r\n        } else { // StaggerAxis.pointy\r\n            out[0].x = x + halfW;\r\n            out[0].y = y - quarterH;\r\n\r\n            out[1].x = x + halfW;\r\n            out[1].y = y + quarterH;\r\n\r\n            out[2].x = x;\r\n            out[2].y = y + halfH;\r\n\r\n            out[3].x = x - halfW;\r\n            out[3].y = y + quarterH;\r\n\r\n            out[4].x = x - halfW;\r\n            out[4].y = y - quarterH;\r\n\r\n            out[5].x = x;\r\n            out[5].y = y - halfH;\r\n        }\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nvar globPoints: Vec2Type[] = []","type DeltaXYType = [number, number];\r\nexport type DirectionToDeltaXYEntryType = DeltaXYType[];\r\ntype ParityToDeltaXYType = DirectionToDeltaXYEntryType[];\r\ntype DirectionToDeltaTileXYType = ParityToDeltaXYType[];\r\n\r\nconst ODD_R: ParityToDeltaXYType = [\r\n    [\r\n        [+1, 0],\r\n        [0, +1],\r\n        [-1, +1],\r\n        [-1, 0],\r\n        [-1, -1],\r\n        [0, -1]\r\n    ],\r\n    [\r\n        [+1, 0],\r\n        [+1, +1],\r\n        [0, +1],\r\n        [-1, 0],\r\n        [0, -1],\r\n        [+1, -1]\r\n    ]\r\n];\r\nconst EVEN_R: ParityToDeltaXYType = [\r\n    [\r\n        [+1, 0],\r\n        [+1, +1],\r\n        [0, +1],\r\n        [-1, 0],\r\n        [0, -1],\r\n        [+1, -1]\r\n    ],\r\n    [\r\n        [+1, 0],\r\n        [0, +1],\r\n        [-1, +1],\r\n        [-1, 0],\r\n        [-1, -1],\r\n        [0, -1]\r\n    ]\r\n];\r\nconst ODD_Q: ParityToDeltaXYType = [\r\n    [\r\n        [+1, 0],\r\n        [0, +1],\r\n        [-1, 0],\r\n        [-1, -1],\r\n        [0, -1],\r\n        [+1, -1]\r\n    ],\r\n    [\r\n        [+1, +1],\r\n        [0, +1],\r\n        [-1, +1],\r\n        [-1, 0],\r\n        [0, -1],\r\n        [+1, 0]\r\n    ]\r\n];\r\nconst EVEN_Q: ParityToDeltaXYType = [\r\n    [\r\n        [+1, +1],\r\n        [0, +1],\r\n        [-1, +1],\r\n        [-1, 0],\r\n        [0, -1],\r\n        [+1, 0]\r\n    ],\r\n    [\r\n        [+1, 0],\r\n        [0, +1],\r\n        [-1, 0],\r\n        [-1, -1],\r\n        [0, -1],\r\n        [+1, -1]\r\n    ]\r\n];\r\n\r\nexport let DirectionToDeltaTileXY: DirectionToDeltaTileXYType = [\r\n    ODD_R,\r\n    EVEN_R,\r\n    ODD_Q,\r\n    EVEN_Q\r\n];\r\n// DirectionToDeltaTileXYType[mode][parity][dir]: [x/y]","import {\r\n    DirectionToDeltaTileXY,\r\n    DirectionToDeltaXYEntryType\r\n} from './DirectionToDeltaTileXY';\r\n\r\ntype DeltaXYToDirectionEntryType = {\r\n    [x: number]: {\r\n        [y: number]: number\r\n    }\r\n}\r\n\r\nlet ReverseDirMap = function (\r\n    dirMap: DirectionToDeltaXYEntryType\r\n): DeltaXYToDirectionEntryType {\r\n\r\n    let out: DeltaXYToDirectionEntryType = {},\r\n        x: number, y: number;\r\n    for (let dir in dirMap) {\r\n        ([x, y] = dirMap[dir]);\r\n        if (!out.hasOwnProperty(x)) {\r\n            out[x] = {}\r\n        }\r\n        out[x][y] = parseInt(dir);\r\n    }\r\n    return out;\r\n}\r\n\r\ntype ParityToDirectionType = DeltaXYToDirectionEntryType[];\r\nexport type DeltaTileXYToDirectionType = ParityToDirectionType[];\r\nexport let DeltaTileXYToDirection: DeltaTileXYToDirectionType = [\r\n    [\r\n        ReverseDirMap(DirectionToDeltaTileXY[0][0]),\r\n        ReverseDirMap(DirectionToDeltaTileXY[0][1])\r\n    ],\r\n    [\r\n        ReverseDirMap(DirectionToDeltaTileXY[1][0]),\r\n        ReverseDirMap(DirectionToDeltaTileXY[1][1])\r\n    ],\r\n    [\r\n        ReverseDirMap(DirectionToDeltaTileXY[2][0]),\r\n        ReverseDirMap(DirectionToDeltaTileXY[2][1])\r\n    ],\r\n    [\r\n        ReverseDirMap(DirectionToDeltaTileXY[3][0]),\r\n        ReverseDirMap(DirectionToDeltaTileXY[3][1])\r\n    ]\r\n];\r\n// DeltaTileXYToDirection[mode][parity][x][y]: dir","import { LayoutMode } from './IHexagonBase'\r\n\r\nexport function GetParity(\r\n    mode: LayoutMode,\r\n    tileX: number,\r\n    tileY: number\r\n): number {\r\n\r\n    let parity;\r\n    switch (mode) {\r\n        case LayoutMode.ODD_R:\r\n        case LayoutMode.EVEN_R:\r\n            parity = tileY & 1;\r\n            break;\r\n\r\n        case LayoutMode.ODD_Q:\r\n        case LayoutMode.EVEN_Q:\r\n            parity = tileX & 1;\r\n            break;\r\n    }\r\n    return parity;\r\n}","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { DeltaTileXYToDirection } from './DeltaTileXYToDirection';\r\nimport { GetParity } from './GetParity';\r\n\r\nexport let GetNeighborTileDirection = function (\r\n    hexagon: IHexagonBase,\r\n    srcTileXY: Vec2Type,\r\n    neighborTileXY: Vec2Type\r\n): number | null {\r\n\r\n    let mode = hexagon.mode;\r\n    let parity = GetParity(mode, srcTileXY.x, srcTileXY.y);\r\n    let deltaTileXYToDirMap = DeltaTileXYToDirection[mode][parity];\r\n\r\n    let deltaTileX = neighborTileXY.x - srcTileXY.x;\r\n    let deltaTileY = neighborTileXY.y - srcTileXY.y;\r\n    if (deltaTileXYToDirMap.hasOwnProperty(deltaTileX)) {\r\n        let xEntry = deltaTileXYToDirMap[deltaTileX]\r\n        if (xEntry.hasOwnProperty(deltaTileY)) {\r\n            return xEntry[deltaTileY];\r\n        }\r\n    }\r\n    return null;\r\n}","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { DirectionToDeltaTileXY } from './DirectionToDeltaTileXY';\r\nimport { GetParity } from './GetParity';\r\nimport { cr2cube, cube2cr } from './CubeTransfer';\r\n\r\nexport let GetTileXYAtDirection = function (\r\n    hexragon: IHexagonBase,\r\n    srcTileXY: Vec2Type,\r\n    direction: number,\r\n    distance: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    let mode = hexragon.mode;\r\n    let srcTileX = srcTileXY.x,\r\n        srcTileY = srcTileXY.y;\r\n\r\n    if (distance === 1) { // Neighbor\r\n        let parity = GetParity(mode, srcTileX, srcTileY);\r\n        out.x = srcTileX + DirectionToDeltaTileXY[mode][parity][direction][0];\r\n        out.y = srcTileY + DirectionToDeltaTileXY[mode][parity][direction][1];\r\n    } else if (distance === 0) {\r\n        out.x = srcTileX;\r\n        out.y = srcTileY;\r\n    } else {\r\n        let cubeXYZ = cr2cube(mode, srcTileX, srcTileY, true);\r\n        let newCubeX: number,\r\n            newCubeY: number,\r\n            newCubeZ: number;\r\n\r\n        switch (direction) {\r\n            case 1:\r\n                newCubeX = cubeXYZ.x;\r\n                newCubeY = cubeXYZ.y - distance;\r\n                newCubeZ = cubeXYZ.z + distance;\r\n                break;\r\n            case 2:\r\n                newCubeX = cubeXYZ.x - distance;\r\n                newCubeY = cubeXYZ.y;\r\n                newCubeZ = cubeXYZ.z + distance;\r\n                break;\r\n            case 3:\r\n                newCubeX = cubeXYZ.x - distance;\r\n                newCubeY = cubeXYZ.y + distance;\r\n                newCubeZ = cubeXYZ.z;\r\n                break;\r\n            case 4:\r\n                newCubeX = cubeXYZ.x;\r\n                newCubeY = cubeXYZ.y + distance;\r\n                newCubeZ = cubeXYZ.z - distance;\r\n                break;\r\n            case 5:\r\n                newCubeX = cubeXYZ.x + distance;\r\n                newCubeY = cubeXYZ.y;\r\n                newCubeZ = cubeXYZ.z - distance;\r\n                break;\r\n            default:\r\n                newCubeX = cubeXYZ.x + distance;\r\n                newCubeY = cubeXYZ.y - distance;\r\n                newCubeZ = cubeXYZ.z;\r\n                break;\r\n        }\r\n        cube2cr(mode, newCubeX, newCubeY, newCubeZ, out);\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\nvar globTileXY: Vec2Type = { x: 0, y: 0 };","import { IHexagonBase, LayoutMode } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { qr2cube, roundcube, cube2cr, CubeType } from './CubeTransfer';\r\n\r\nconst C_4div3 = (4 / 3);\r\nconst C_2div3 = (2 / 3);\r\n\r\nexport let GetTileXY = function (\r\n    hexagon: IHexagonBase,\r\n    worldX: number | Vec2Type,\r\n    worldY?: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (typeof (worldX) === 'object') {\r\n        worldY = worldX.y;\r\n        worldX = worldX.x;\r\n    }\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    worldX -= hexagon.x;\r\n    worldY -= hexagon.y;\r\n    let q: number,\r\n        r: number;\r\n\r\n    switch (hexagon.mode) {\r\n        case LayoutMode.ODD_R:\r\n        case LayoutMode.EVEN_R:\r\n            r = (worldY * C_4div3) / hexagon.height;\r\n            q = (worldX / hexagon.width) - C_2div3 * (worldY / hexagon.height);\r\n            break;\r\n\r\n        case LayoutMode.ODD_Q:\r\n        case LayoutMode.EVEN_Q:\r\n            r = (worldY / hexagon.height) - C_2div3 * (worldX / hexagon.width);\r\n            q = (worldX * C_4div3) / hexagon.width;\r\n            break;\r\n    }\r\n\r\n    let cube = qr2cube(q, r, globCube);\r\n    roundcube(cube);\r\n    cube2cr(hexagon.mode, cube.x, cube.y, cube.z, out);\r\n    return out;\r\n}\r\n\r\nvar globCube: CubeType = { x: 0, y: 0, z: 0 };\r\nvar globTileXY: Vec2Type = { x: 0, y: 0 };\r\n","import { IHexagonBase, LayoutMode } from './IHexagonBase';\r\nimport {\r\n    Vec2Type,\r\n    MirrorMode, MirrorModeString\r\n} from '../IGrid';\r\nimport { cr2cube, cube2cr } from './CubeTransfer';\r\n\r\nexport let Mirror = function (\r\n    hexagon: IHexagonBase,\r\n    srcTileXY: Vec2Type,\r\n    mode: MirrorMode | MirrorModeString,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (typeof (mode) === 'string') {\r\n        mode = MirrorMode[mode];\r\n    }\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    let cubeXYZ = cr2cube(hexagon.mode, srcTileXY.x, srcTileXY.y, true);\r\n    let isRMode = (hexagon.mode === LayoutMode.ODD_R) || (hexagon.mode === LayoutMode.EVEN_R);\r\n    let newCubeX: number,\r\n        newCubeY: number,\r\n        newCubeZ: number;\r\n\r\n    if (mode & 1) { // Mirror x\r\n        if (isRMode) {\r\n            newCubeX = cubeXYZ.y;\r\n            newCubeY = cubeXYZ.x;\r\n            newCubeZ = cubeXYZ.z;\r\n        } else {\r\n            newCubeX = -cubeXYZ.x;\r\n            newCubeY = -cubeXYZ.z;\r\n            newCubeZ = -cubeXYZ.y;\r\n        }\r\n        cubeXYZ.x = newCubeX;\r\n        cubeXYZ.y = newCubeY;\r\n        cubeXYZ.z = newCubeZ;\r\n    }\r\n    if (mode & 2) { // Mirror y\r\n        if (isRMode) {\r\n            newCubeX = -cubeXYZ.y;\r\n            newCubeY = -cubeXYZ.x;\r\n            newCubeZ = -cubeXYZ.z;\r\n        } else {\r\n            newCubeX = cubeXYZ.x;\r\n            newCubeY = cubeXYZ.z;\r\n            newCubeZ = cubeXYZ.y;\r\n        }\r\n    }\r\n    cube2cr(hexagon.mode, newCubeX, newCubeY, newCubeZ, out);\r\n    return out;\r\n}\r\n\r\nvar globTileXY: Vec2Type = { x: 0, y: 0 };\r\n\r\nexport default Mirror;","import { IHexagonBase, LayoutMode } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\n\r\nexport let Offset = function (\r\n    hexagon: IHexagonBase,\r\n    srcTileXY: Vec2Type,\r\n    offsetX: number,\r\n    offsetY: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    let newX = srcTileXY.x + offsetX;\r\n    let newY = srcTileXY.y + offsetY;\r\n    switch (hexagon.mode) {\r\n        case LayoutMode.ODD_R:\r\n            if ((offsetY & 1) !== 0) {\r\n                if ((newY & 1) === 0) {\r\n                    newX += 1;\r\n                }\r\n            }\r\n            break;\r\n\r\n        case LayoutMode.EVEN_R:\r\n            if ((offsetY & 1) !== 0) {\r\n                if ((newY & 1) === 0) {\r\n                    newX -= 1;\r\n                }\r\n            }\r\n            break;\r\n\r\n        case LayoutMode.ODD_Q:\r\n            if ((offsetX & 1) !== 0) {\r\n                if ((newX & 1) == 0) {\r\n                    newY += 1;\r\n                }\r\n            }\r\n            break;\r\n        case LayoutMode.EVEN_Q:\r\n            if ((offsetX & 1) !== 0) {\r\n                if ((newX & 1) == 0) {\r\n                    newY -= 1;\r\n                }\r\n            }\r\n            break;\r\n    }\r\n    out.x = newX;\r\n    out.y = newY;\r\n    return out;\r\n}\r\n\r\nvar globTileXY: Vec2Type = { x: 0, y: 0 };","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { cr2cube, cube2cr } from './CubeTransfer';\r\n\r\nimport { Wrap } from '../../../utils/math/Wrap';\r\n\r\nexport let Rotate = function (\r\n    hexagon: IHexagonBase,\r\n    srcTileXY: Vec2Type,\r\n    dir: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    if (out === true) {\r\n        out = globTileXY;\r\n    }\r\n\r\n    dir = Wrap(dir, 0, 5);\r\n    let cubeXYZ = cr2cube(hexagon.mode, srcTileXY.x, srcTileXY.y, true);\r\n    let newCubeX: number,\r\n        newCubeY: number,\r\n        newCubeZ: number;\r\n\r\n    switch (dir) {\r\n        case 1:\r\n            newCubeX = -cubeXYZ.z;\r\n            newCubeY = -cubeXYZ.x;\r\n            newCubeZ = -cubeXYZ.y;\r\n            break;\r\n        case 2:\r\n            newCubeX = cubeXYZ.y;\r\n            newCubeY = cubeXYZ.z;\r\n            newCubeZ = cubeXYZ.x;\r\n            break;\r\n        case 3:\r\n            newCubeX = -cubeXYZ.x;\r\n            newCubeY = -cubeXYZ.y;\r\n            newCubeZ = -cubeXYZ.z;\r\n            break;\r\n        case 4:\r\n            newCubeX = cubeXYZ.z;\r\n            newCubeY = cubeXYZ.x;\r\n            newCubeZ = cubeXYZ.y;\r\n            break;\r\n        case 5:\r\n            newCubeX = -cubeXYZ.y;\r\n            newCubeY = -cubeXYZ.z;\r\n            newCubeZ = -cubeXYZ.x;\r\n            break;\r\n        default:\r\n            newCubeX = cubeXYZ.x;\r\n            newCubeY = cubeXYZ.y;\r\n            newCubeZ = cubeXYZ.z;\r\n            break;\r\n    }\r\n\r\n    cube2cr(hexagon.mode, newCubeX, newCubeY, newCubeZ, out);\r\n    return out;\r\n}\r\n\r\nvar globTileXY: Vec2Type = { x: 0, y: 0 };","import { IGrid, Vec2Type } from '../IGrid';\r\nimport { HexagonBase } from './HexagonBase';\r\n\r\nimport { DirectionBetween } from './DirectionBetween';\r\nimport { DirectionNormalize } from '../utils/DirectionNormalize';\r\nimport { GetDistance } from './GetDistance';\r\nimport { GetGridPoints } from './GetGridPoints';\r\nimport { GetNeighborTileDirection } from './GetNeighborTileDirection';\r\nimport { GetNeighborTileXY } from './GetNeighborTileXY';\r\nimport { GetOppositeDirection } from './GetOppositeDirection';\r\nimport { GetTileXY } from './GetTileXY';\r\nimport { GetTileXYAtDirection } from './GetTileXYAtDirection';\r\nimport { GetWorldXY } from './GetWorldXY';\r\nimport { MirrorMode, MirrorModeString } from '../IGrid';\r\nimport { Mirror } from './Mirror';\r\nimport { Offset } from './Offset';\r\nimport { RingToTileXYArray } from './RingToTileXYArray';\r\nimport { Rotate } from './Rotate';\r\nimport { SaveOrigin, RestoreOrigin } from '../utils/SaveOrigin';\r\n\r\nexport class Hexagon extends HexagonBase implements IGrid {\r\n\r\n    _savedOriginX: number;\r\n    _savedOriginY: number;\r\n\r\n    get sides() {\r\n        return 6;\r\n    }\r\n\r\n    // Direction of neighbors\r\n    get allDirections() {\r\n        return ALLDIR;\r\n    }\r\n\r\n    // Board-match\r\n    get halfDirections() {\r\n        return HALFDIR;\r\n    }\r\n\r\n    directionBetween(\r\n        tileA: Vec2Type,\r\n        tileB: Vec2Type,\r\n        round: boolean = true\r\n    ): number {\r\n\r\n        return DirectionBetween(this, tileA, tileB, round);\r\n    }\r\n\r\n    directionNormalize(\r\n        direction: number\r\n    ): number {\r\n\r\n        return DirectionNormalize(this, direction);\r\n    }\r\n\r\n    getDistance(\r\n        tileA: Vec2Type,\r\n        tileB: Vec2Type,\r\n        roughMode: boolean = false\r\n    ): number {\r\n\r\n        return GetDistance(this, tileA, tileB, roughMode);\r\n    }\r\n\r\n    getGridPoints(\r\n        tileX: number | Vec2Type = 0,\r\n        tileY: number = 0,\r\n        out: Vec2Type[] | true = []\r\n    ): Vec2Type[] {\r\n\r\n        return GetGridPoints(this, tileX, tileY, out);\r\n    }\r\n\r\n    getNeighborTileDirection(\r\n        srcTileXY: Vec2Type,\r\n        neighborTileXY: Vec2Type\r\n    ): number | null {\r\n\r\n        return GetNeighborTileDirection(this, srcTileXY, neighborTileXY);\r\n    }\r\n\r\n    getNeighborTileXY(\r\n        srcTileXY: Vec2Type,\r\n        direction: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return GetNeighborTileXY(this, srcTileXY, direction, out);\r\n    }\r\n\r\n    getOppositeDirection(\r\n        tileX: number | Vec2Type,\r\n        tileY: number | undefined | null,\r\n        direction: number\r\n    ): number {\r\n\r\n        return GetOppositeDirection(this, tileX, tileY, direction);\r\n    }\r\n\r\n    getTileXY(\r\n        worldX: number | Vec2Type,\r\n        worldY?: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return GetTileXY(this, worldX, worldY, out);\r\n    }\r\n\r\n    getTileXYAtDirection(\r\n        srcTileXY: Vec2Type,\r\n        direction: number,\r\n        distance: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return GetTileXYAtDirection(this, srcTileXY, direction, distance, out);\r\n    }\r\n\r\n    getWorldXY(\r\n        tileX: number | Vec2Type,\r\n        tileY?: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return GetWorldXY(this, tileX, tileY, out);\r\n    }\r\n\r\n    mirror(\r\n        srcTileXY: Vec2Type,\r\n        mode: MirrorMode | MirrorModeString,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return Mirror(this, srcTileXY, mode, out);\r\n    }\r\n\r\n    offset(\r\n        srcTileXY: Vec2Type,\r\n        offsetTileX: number,\r\n        offsetTileY: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return Offset(this, srcTileXY, offsetTileX, offsetTileY, out);\r\n    }\r\n\r\n    ringToTileXYArray(\r\n        centerTileXY: Vec2Type,\r\n        radius: number,\r\n        out: Vec2Type[] = []\r\n    ): Vec2Type[] {\r\n\r\n        return RingToTileXYArray(this, centerTileXY, radius, out);\r\n    }\r\n\r\n    rotate(srcTileXY: Vec2Type,\r\n        dir: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return Rotate(this, srcTileXY, dir, out);\r\n    }\r\n\r\n    restoreOrigin(): this {\r\n\r\n        RestoreOrigin(this);\r\n        return this\r\n    }\r\n\r\n    saveOrigin(): this {\r\n\r\n        SaveOrigin(this);\r\n        return this;\r\n    }\r\n}\r\n\r\nconst ALLDIR = [0, 1, 2, 3, 4, 5];\r\nconst HALFDIR = [0, 1, 2];","import { IGrid } from '../IGrid';\r\nimport { Wrap } from '../../../utils/math/Wrap.js';\r\n\r\nexport let DirectionNormalize = function (\r\n    grid: IGrid,\r\n    direction: number\r\n): number {\r\n\r\n    return Wrap(direction, 0, grid.directions);\r\n}","import { Vec2Type } from '../IGrid';\r\n\r\nexport let FillPositionArray = function (\r\n    length: number,\r\n    out: Vec2Type[] = []\r\n): Vec2Type[] {\r\n\r\n    if (out.length === length) {\r\n        // Do nothing\r\n    } else if (out.length < length) {\r\n        for (let i = out.length; i < length; i++) {\r\n            out.push({ x: 0, y: 0 });\r\n        }\r\n    } else { // out.length < length\r\n        out.length = length;\r\n    }\r\n\r\n    return out;\r\n}","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { GetTileXYAtDirection } from './GetTileXYAtDirection';\r\n\r\nexport let GetNeighborTileXY = function (\r\n    hexragon: IHexagonBase,\r\n    srcTileXY: Vec2Type,\r\n    direction: number,\r\n    out: Vec2Type | true = { x: 0, y: 0 }\r\n): Vec2Type {\r\n\r\n    return GetTileXYAtDirection(hexragon, srcTileXY, direction, 1, out);\r\n};","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\n\r\nexport let GetOppositeDirection = function (\r\n    hexagon: IHexagonBase,\r\n    tileX: number | Vec2Type,\r\n    tileY: number | undefined | null,\r\n    direction\r\n): number {\r\n\r\n    return (direction + 3) % 6;\r\n};","import { IHexagonBase } from './IHexagonBase';\r\nimport { Vec2Type } from '../IGrid';\r\nimport { cr2cube, cube2cr } from './CubeTransfer';\r\n\r\nexport let RingToTileXYArray = function (\r\n    hexagon: IHexagonBase,\r\n    centerTileXY: Vec2Type,\r\n    radius: number,\r\n    out: Vec2Type[] = []\r\n): Vec2Type[] {\r\n\r\n    let centerCube = cr2cube(hexagon.mode, centerTileXY.x, centerTileXY.y, true);\r\n    let cx = centerCube.x,\r\n        cy = centerCube.y,\r\n        cz = centerCube.z;\r\n    let i: number,\r\n        j: number,\r\n        k: number;\r\n\r\n    k = radius;\r\n    for (i = 0; i >= -radius; i--) {\r\n        j = -i - k;\r\n        out.push(cube2cr(hexagon.mode, cx + i, cy + j, cz + k));\r\n    }\r\n\r\n    i = -radius;\r\n    for (j = 1; j <= radius; j++) {\r\n        k = -i - j;\r\n        out.push(cube2cr(hexagon.mode, cx + i, cy + j, cz + k));\r\n    }\r\n\r\n    j = radius;\r\n    for (k = -1; k >= -radius; k--) {\r\n        i = -j - k;\r\n        out.push(cube2cr(hexagon.mode, cx + i, cy + j, cz + k));\r\n    }\r\n\r\n    k = -radius;\r\n    for (i = 1; i <= radius; i++) {\r\n        j = -i - k;\r\n        out.push(cube2cr(hexagon.mode, cx + i, cy + j, cz + k));\r\n    }\r\n\r\n    i = radius;\r\n    for (j = -1; j >= -radius; j--) {\r\n        k = -i - j;\r\n        out.push(cube2cr(hexagon.mode, cx + i, cy + j, cz + k));\r\n    }\r\n\r\n    j = -radius;\r\n    for (k = 1; k <= radius - 1; k++) {\r\n        i = -j - k;\r\n        out.push(cube2cr(hexagon.mode, cx + i, cy + j, cz + k));\r\n    }\r\n    return out;\r\n}","import { IGrid } from '../IGrid';\r\n\r\nexport let SaveOrigin = function (\r\n    grid: IGrid\r\n): void {\r\n    grid._savedOriginX = grid.x;\r\n    grid._savedOriginY = grid.y;\r\n}\r\n\r\nexport let RestoreOrigin = function (\r\n    grid: IGrid\r\n): void {\r\n    grid.x = grid._savedOriginX;\r\n    grid.y = grid._savedOriginY;\r\n}","import {\r\n    IMatch,\r\n    SymbolType,\r\n    XYType,\r\n    MatchResult\r\n} from './IMatch';\r\n\r\nexport let MatchAtDir = function (\r\n    match: IMatch,\r\n    pattern: number | SymbolType[],\r\n    startTileX: number,\r\n    startTileY: number,\r\n    direction: number\r\n): MatchResult | false {\r\n\r\n    let matchNMode = typeof (pattern) === 'number';\r\n    let patternLength: number,\r\n        currSymbol: SymbolType | null;\r\n    if (matchNMode) {\r\n        patternLength = pattern as number;\r\n        currSymbol = null;\r\n    } else {\r\n        patternLength = (pattern as SymbolType[]).length;\r\n    }\r\n\r\n    let symbol: SymbolType,\r\n        wildcard = match.wildcard;\r\n    let curTileXY: XYType;\r\n    let board = match.board;\r\n    let matchedTileXY: XYType[] = [];\r\n    for (let i = 0; i < patternLength; i++) {\r\n        if (curTileXY === undefined) {\r\n            curTileXY = {\r\n                x: startTileX,\r\n                y: startTileY\r\n            };\r\n        } else {\r\n            // Get next tileXY \r\n            curTileXY = board.getNeighborTileXY(curTileXY, direction, curTileXY) as XYType;\r\n            if (curTileXY === null) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        symbol = match.getSymbol(curTileXY.x, curTileXY.y);\r\n        if (symbol == null) {\r\n            return false;\r\n        }\r\n        if (symbol !== wildcard) {\r\n            if (matchNMode) { // Match N mode\r\n                if (currSymbol === null) {\r\n                    currSymbol = symbol;\r\n                } else if (currSymbol !== symbol) {\r\n                    return false;\r\n                }\r\n            } else if (pattern[i] !== symbol) { // Pattern list mode\r\n                return false;\r\n            }\r\n        }\r\n\r\n        matchedTileXY.push({\r\n            x: curTileXY.x,\r\n            y: curTileXY.y\r\n        });\r\n    }\r\n\r\n    return {\r\n        tileXY: matchedTileXY,\r\n        direction: direction,\r\n        pattern: pattern\r\n    };\r\n};","import {\r\n    IMatch,\r\n    SymbolType,\r\n    MatchResult,\r\n    MatchCallbackType\r\n} from './IMatch';\r\nimport { MatchAtDir } from './MatchAtDir';\r\n\r\nexport let MatchAll = function (\r\n    match: IMatch,\r\n    pattern: number | SymbolType[],\r\n    callback?: MatchCallbackType,\r\n    scope?: any,\r\n    getFirst: boolean = false\r\n): MatchResult | void {\r\n\r\n    let board = match.board,\r\n        grid = board.grid;\r\n    let directions = grid.halfDirections,\r\n        dir: number,\r\n        dirMask = match.dirMask;\r\n    let width = board.width,\r\n        height = board.height;\r\n    let result: MatchResult | false;\r\n    for (let i = 0, cnt = directions.length; i < cnt; i++) {\r\n        dir = directions[i];\r\n        if (dirMask[dir] === false) {\r\n            continue;\r\n        }\r\n\r\n        for (let tileY = 0; tileY < height; tileY++) {\r\n            for (let tileX = 0; tileX < width; tileX++) {\r\n                result = MatchAtDir(match, pattern, tileX, tileY, dir);\r\n                if (result === false) {\r\n                    continue;\r\n                }\r\n\r\n                if (callback) {\r\n                    if (scope) {\r\n                        callback.call(scope, result, board);\r\n                    } else {\r\n                        callback(result, board);\r\n                    }\r\n                }\r\n                if (getFirst) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport let MatchAny = function (\r\n    match: IMatch,\r\n    pattern: number | SymbolType[],\r\n): MatchResult | false {\r\n\r\n    let result = MatchAll(match, pattern, null, null, true);\r\n    return (result) ? result : false;\r\n}","import {\r\n    IMatch,\r\n    XYType,\r\n    SymbolType\r\n} from './IMatch'\r\n\r\nexport let Group = function (\r\n    match: IMatch,\r\n    startTileX: number,\r\n    startTileY: number,\r\n    out: XYType[] = []\r\n): XYType[] {\r\n\r\n    let board = match.board;\r\n    let wildcard = match.wildcard;\r\n    let targetSymbol = match.getSymbol(startTileX, startTileY);\r\n    if ((targetSymbol == null) || (targetSymbol === wildcard)) {\r\n        return out;\r\n    }\r\n\r\n    let curTileXY: XYType,\r\n        symbol: SymbolType;\r\n    globalQueue.push(startTileX, startTileY);\r\n    while (globalQueue.length) {\r\n        curTileXY = globalQueue.pop();\r\n        symbol = match.getSymbol(curTileXY.x, curTileXY.y);\r\n        if ((symbol === targetSymbol) || (symbol === wildcard)) {\r\n            out.push(curTileXY);\r\n            globalQueue.push(board.getNeighborTileXY(curTileXY));\r\n        }\r\n    }\r\n\r\n    globalQueue.clear();\r\n    return out;\r\n}\r\n\r\nclass Queue {\r\n    data: XYType[] = [];\r\n    visited: Set<string> = new Set();\r\n\r\n    push(\r\n        x: number | XYType | XYType[],\r\n        y?: number\r\n    ): this {\r\n\r\n        if (Array.isArray(x)) { // XYType[]\r\n            let xyArray = x;\r\n            for (let i = 0, cnt = xyArray.length; i < cnt; i++) {\r\n                this.push(xyArray[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        if (typeof (x) === 'object') { // XYType\r\n            let xy = x;\r\n            x = xy.x;\r\n            y = xy.y;\r\n        }\r\n        let key = `${x},${y}`;\r\n        if (this.visited.has(key)) {\r\n            return this;\r\n        }\r\n\r\n        this.data.push({ x: x, y: y });\r\n        this.visited.add(key);\r\n        return this;\r\n    }\r\n\r\n    pop(): XYType {\r\n        return this.data.pop();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.data.length;\r\n    }\r\n\r\n    clear(): this {\r\n        this.data.length = 0;\r\n        this.visited.clear();\r\n        return this;\r\n    }\r\n}\r\n\r\nlet globalQueue = new Queue();","import {\r\n    IMatch, IConfig,\r\n    ILogicBoard, SymbolType, DirMaskType, XYType,\r\n    MatchCallbackType, ForEachSymbolCallback, MatchResult\r\n} from './IMatch';\r\nimport { MatchAll, MatchAny } from './MatchBoard';\r\nimport { MatchAtDir } from './MatchAtDir';\r\nimport { Group } from './Group';\r\n\r\nexport class Match implements IMatch {\r\n    board: ILogicBoard;\r\n    wildcard: SymbolType;\r\n    symbols: SymbolType[];\r\n    dirMask: DirMaskType;\r\n\r\n    constructor({\r\n        board,\r\n        wildcard,\r\n        dirMask\r\n    }: IConfig = {}) {\r\n\r\n        this.symbols = []; // tileX+(tileY*board.width)\r\n        this.dirMask = {};\r\n\r\n        this.setBoard(board);\r\n        this.setWildcard(wildcard);\r\n        if (dirMask !== undefined) {\r\n            this.setDirMask(dirMask);\r\n        }\r\n\r\n        this.boot();\r\n    }\r\n\r\n    boot() { }\r\n\r\n    destroy() {\r\n        this.board = undefined;\r\n        this.symbols = undefined;\r\n        this.dirMask = undefined;\r\n    }\r\n\r\n    setBoard(\r\n        board: ILogicBoard\r\n    ): this {\r\n\r\n        this.board = board;\r\n        if (board) {\r\n            this.clearSymbols();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setDirMask(\r\n        dir: number | DirMaskType,\r\n        value: boolean = false\r\n    ): this {\r\n\r\n        if (typeof (dir) === 'object') {\r\n            let dirMask: DirMaskType = dir;\r\n            for (let _dir in dirMask) {\r\n                this.dirMask[_dir] = dirMask[_dir];\r\n            }\r\n        } else {\r\n            this.dirMask[dir] = value;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setDirectionMode(\r\n        mode: number\r\n    ): this {\r\n\r\n        this.board.grid.setDirectionMode(mode);\r\n        return this;\r\n    }\r\n\r\n    clearSymbols(): this {\r\n\r\n        this.refreshSymbols(null);\r\n        return this;\r\n    }\r\n\r\n    setSymbol(\r\n        tileX: number,\r\n        tileY: number,\r\n        symbol: SymbolType\r\n    ) {\r\n\r\n        let board = this.board;\r\n        if (!board.contains(tileX, tileY)) {\r\n            return this;\r\n        }\r\n\r\n        this.symbols[this.tileXYToKey(tileX, tileY)] = symbol;\r\n        return this;\r\n    }\r\n\r\n    getSymbol(\r\n        tileX: number,\r\n        tileY: number\r\n    ): SymbolType {\r\n\r\n        return this.symbols[this.tileXYToKey(tileX, tileY)];\r\n    }\r\n\r\n    forEach(\r\n        callback: ForEachSymbolCallback,\r\n        scope?: any\r\n    ): this {\r\n\r\n        let board = this.board;\r\n        let tileXY: XYType,\r\n            symbol: SymbolType;\r\n        for (let i = 0, cnt = this.symbols.length; i < cnt; i++) {\r\n            symbol = this.symbols[i];\r\n            tileXY = this.keyToTileXY(i, true);\r\n            if (scope) {\r\n                callback.call(scope, symbol, tileXY, board);\r\n            } else {\r\n                callback(symbol, tileXY, board);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    refreshSymbols(\r\n        callback: SymbolType | ((tileXY: XYType, board: ILogicBoard) => SymbolType),\r\n        scope?: any\r\n    ): this {\r\n\r\n        let board = this.board;\r\n        let width = board.width,\r\n            height = board.height;\r\n        this.symbols.length = width * height;\r\n\r\n        let symbol: SymbolType,\r\n            tileXY: XYType;\r\n        if (typeof (callback) === 'function') {\r\n            // Get symbol by callback\r\n            for (let i = 0, cnt = this.symbols.length; i < cnt; i++) {\r\n                tileXY = this.keyToTileXY(i, true);\r\n                if (scope) {\r\n                    symbol = callback.call(scope, tileXY, board);\r\n                } else {\r\n                    symbol = callback(tileXY, board);\r\n                }\r\n                this.symbols[i] = symbol;\r\n            }\r\n\r\n        } else {\r\n            // Fill a given symbol\r\n            symbol = callback;\r\n            for (let i = 0, cnt = this.symbols.length; i < cnt; i++) {\r\n                this.symbols[i] = symbol;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    setWildcard(\r\n        wildcard: SymbolType\r\n    ): this {\r\n\r\n        this.wildcard = wildcard;\r\n        return this;\r\n    }\r\n\r\n    tileXYToKey(\r\n        tileX: number,\r\n        tileY: number\r\n    ): number {\r\n\r\n        return tileX + (tileY * this.board.width);\r\n    }\r\n\r\n    keyToTileXY(\r\n        key: number,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType {\r\n\r\n        if (out === true) {\r\n            out = globTileXY;\r\n        }\r\n        let width = this.board.width;\r\n        out.x = key % width;\r\n        out.y = Math.floor(key / width);\r\n        return out;\r\n    }\r\n\r\n    group(\r\n        startTileX: number,\r\n        startTileY: number,\r\n        out: XYType[] = []\r\n    ): XYType[] {\r\n\r\n        return Group(this, startTileX, startTileY, out);\r\n    }\r\n\r\n    match(pattern: number | SymbolType[],\r\n        callback?: MatchCallbackType,\r\n        scope?: any,\r\n        getFirst: boolean = false\r\n    ): this {\r\n\r\n        MatchAll(this, pattern, callback, scope, getFirst);\r\n        return this;\r\n    }\r\n\r\n    matchAny(\r\n        pattern: number | SymbolType[],\r\n    ): MatchResult | false {\r\n\r\n        return MatchAny(this, pattern);\r\n    }\r\n\r\n    matchAtDir(\r\n        pattern: number | SymbolType[],\r\n        startTileX: number,\r\n        startTileY: number,\r\n        direction: number\r\n    ): MatchResult | false {\r\n\r\n        return MatchAtDir(this, pattern, startTileX, startTileY, direction);\r\n    }\r\n\r\n}\r\n\r\nvar globTileXY: XYType = { x: 0, y: 0 };","import { TextureManagerInstance } from '@phaserjs/phaser/textures/TextureManagerInstance';\r\nimport { Texture } from '@phaserjs/phaser/textures/Texture';\r\nimport { CanvasTexture } from '@phaserjs/phaser/textures/types/CanvasTexture';\r\n\r\n/**\r\n * Draw on canvas texture.\r\n *\r\n * @param {(string | Texture)} key Texture key, or texture object.\r\n * @param {(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) => void} callback Drawing callback.\r\n * @param {*} [scope] Context of drawing callback.\r\n * @param {number} [resolution=1] Resolution of canvas.\r\n * @returns {Texture} Texture object.\r\n */\r\nexport let DrawCanvasTexture = function (\r\n    key: string | Texture,\r\n    callback: (canvas: HTMLCanvasElement, context: CanvasRenderingContext2D) => void,\r\n    scope?: any,\r\n    resolution: number = 1\r\n): Texture {\r\n\r\n    let texture: Texture;\r\n    if (typeof (key) === 'string') {\r\n        let textureManager = TextureManagerInstance.get();\r\n        if (!textureManager.has(key)) {\r\n            textureManager.add(key, CanvasTexture());\r\n        }\r\n        texture = textureManager.get(key);\r\n    } else {\r\n        texture = key;\r\n    }\r\n\r\n    let canvas = texture.image as HTMLCanvasElement;\r\n    let context = canvas.getContext('2d');\r\n\r\n    if (scope) {\r\n        callback.call(scope, canvas, context);\r\n    } else {\r\n        callback(canvas, context);\r\n    }\r\n\r\n    texture.setSize(\r\n        canvas.width / resolution,\r\n        canvas.height / resolution\r\n    );\r\n    if (texture.binding) {\r\n        texture.binding.update();\r\n    }\r\n\r\n    return texture;\r\n}","import { GetCanvasGradientCallbackType } from '../types/GetCanvasGradientCallbackType';\r\n\r\nexport let GetStyle = function (\r\n    style: string | number | CanvasGradient | CanvasPattern | GetCanvasGradientCallbackType,\r\n    canvas: HTMLCanvasElement,\r\n    context: CanvasRenderingContext2D\r\n): string | CanvasGradient | CanvasPattern {\r\n\r\n    switch (typeof (style)) {\r\n        case 'number': return `#${style.toString(16)}`;\r\n        case 'function': return style(canvas, context);\r\n        default: return style;\r\n    }\r\n}","import { Texture } from '@phaserjs/phaser/textures/Texture';\r\nimport { DrawCanvasTexture } from './DrawCanvasTexture';\r\nimport { Vec2Type } from '../../utils/types/VectorType';\r\nimport { GetCanvasGradientCallbackType } from '../../utils/types/GetCanvasGradientCallbackType';\r\nimport { GetStyle } from '../../utils/canvas/GetStyle';\r\n\r\nexport interface IConfig {\r\n    points: Vec2Type[],\r\n    fillStyle?: string | number | CanvasGradient | CanvasPattern | GetCanvasGradientCallbackType,\r\n    strokeStyle?: string | number | CanvasGradient | CanvasPattern | GetCanvasGradientCallbackType,\r\n    lineWidth?: number,\r\n    lineJoin?: 'bevel' | 'round' | 'miter'\r\n}\r\n\r\nexport let CreatePolygonTexture = function (\r\n    key: string | Texture,\r\n    {\r\n        points,\r\n        fillStyle,\r\n        strokeStyle,\r\n        lineWidth = 2,\r\n        lineJoin = 'round'\r\n    }: IConfig = { points: [] }\r\n): Texture {\r\n\r\n    return DrawCanvasTexture(key, function (canvas, context) {\r\n        if (points.length === 0) {\r\n            canvas.width = 1;\r\n            canvas.height = 1;\r\n            return;\r\n        }\r\n\r\n        if (!strokeStyle) {\r\n            lineWidth = 0;\r\n        }\r\n\r\n        let minX = GetMinProperty(points, 'x');\r\n        let minY = GetMinProperty(points, 'y');\r\n        let maxX = GetMaxProperty(points, 'x');\r\n        let maxY = GetMaxProperty(points, 'y');\r\n\r\n        let width = maxX - minX ;\r\n        let height = maxY - minY ;\r\n\r\n        let halfW = width / 2;\r\n        let halfH = height / 2;\r\n        let halfLW = lineWidth / 2;\r\n\r\n        canvas.width = Math.ceil(width);\r\n        canvas.height = Math.ceil(height);\r\n\r\n        context.beginPath();\r\n        context.lineJoin = lineJoin;\r\n\r\n        let point = points[0];\r\n\r\n        context.moveTo(\r\n            Indent((point.x - minX), halfW, halfLW),\r\n            Indent((point.y - minY), halfH, halfLW)\r\n        );\r\n\r\n        for (let i = 1, cnt = points.length; i < cnt; i++) {\r\n            point = points[i];\r\n            context.lineTo(\r\n                Indent((point.x - minX), halfW, halfLW),\r\n                Indent((point.y - minY), halfH, halfLW)\r\n            )\r\n        }\r\n\r\n        context.closePath();\r\n\r\n        if (fillStyle) {\r\n            context.fillStyle = GetStyle(fillStyle, canvas, context);\r\n            context.fill();\r\n        }\r\n\r\n        if (strokeStyle) {\r\n            context.strokeStyle = GetStyle(strokeStyle, canvas, context);\r\n            context.lineWidth = lineWidth;\r\n            context.stroke();\r\n        }\r\n\r\n    });\r\n}\r\n\r\nlet GetMaxProperty = function (\r\n    items: object[],\r\n    key: string\r\n): number {\r\n\r\n    let result = -Infinity;\r\n    for (let i = 0, cnt = items.length; i < cnt; i++) {\r\n        result = Math.max(result, items[i][key]);\r\n    }\r\n    return result;\r\n}\r\n\r\nlet GetMinProperty = function (\r\n    items: object[],\r\n    key: string\r\n): number {\r\n\r\n    let result = Infinity;\r\n    for (let i = 0, cnt = items.length; i < cnt; i++) {\r\n        result = Math.min(result, items[i][key]);\r\n    }\r\n    return result;\r\n}\r\n\r\nlet Indent = function (\r\n    value: number,\r\n    halfBound: number,\r\n    offset: number\r\n): number {\r\n\r\n    if (value < halfBound) {\r\n        return (value + offset);\r\n    } else if (value > halfBound) {\r\n        return (value - offset);\r\n    } else {\r\n        return value;\r\n    }\r\n}","import { Texture } from '@phaserjs/phaser/textures/Texture';\r\nimport { CreatePolygonTexture } from './CreatePolygonTexture';\r\nimport { GetCanvasGradientCallbackType } from '../../utils/types/GetCanvasGradientCallbackType';\r\n\r\nexport enum Direction {\r\n    right = 0,\r\n    down = 1,\r\n    left = 2,\r\n    up = 3\r\n}\r\n\r\nexport interface IConfig {\r\n    direction?: Direction,\r\n    width?: number,\r\n    height?: number,\r\n    fillStyle?: string | number | CanvasGradient | CanvasPattern | GetCanvasGradientCallbackType,\r\n    strokeStyle?: string | number | CanvasGradient | CanvasPattern | GetCanvasGradientCallbackType,\r\n    lineWidth?: number\r\n}\r\n\r\nexport let CreateTriangleTexture = function (\r\n    key: string | Texture,\r\n    {\r\n        direction = Direction.right,\r\n        width = 32,\r\n        height = width,\r\n        fillStyle,\r\n        strokeStyle,\r\n        lineWidth = 2\r\n    }: IConfig = {}\r\n): Texture {\r\n\r\n    let x1: number, y1: number,\r\n        x2: number, y2: number,\r\n        x3: number, y3: number;\r\n    switch (direction) {\r\n        case Direction.down:\r\n            x1 = 0;\r\n            y1 = 0;\r\n            x2 = width;\r\n            y2 = 0;\r\n            x3 = width / 2;\r\n            y3 = height;\r\n            break;\r\n        case Direction.left:\r\n            x1 = 0;\r\n            y1 = height / 2;\r\n            x2 = width;\r\n            y2 = 0;\r\n            x3 = width;\r\n            y3 = height;\r\n            break;\r\n        case Direction.up:\r\n            x1 = 0;\r\n            y1 = height;\r\n            x2 = width / 2;\r\n            y2 = 0;\r\n            x3 = width;\r\n            y3 = height;\r\n            break;\r\n        default: // Direction.right\r\n            x1 = 0;\r\n            y1 = 0;\r\n            x2 = 0;\r\n            y2 = height;\r\n            x3 = width;\r\n            y3 = height / 2;\r\n            break;\r\n    }\r\n\r\n    return CreatePolygonTexture(key, {\r\n        points: [\r\n            { x: x1, y: y1 },\r\n            { x: x2, y: y2 },\r\n            { x: x3, y: y3 }\r\n        ],\r\n        fillStyle: fillStyle,\r\n        strokeStyle: strokeStyle,\r\n        lineWidth: lineWidth\r\n    })\r\n}","import { BackgroundColor, Parent, Scenes, Size, WebGLRenderer } from '@phaserjs/phaser/config';\r\nimport { Game, Scene } from '@phaserjs/phaser';\r\nimport { StaticWorld } from '@phaserjs/phaser/world';\r\nimport { AddChild } from '@phaserjs/phaser/display/';\r\nimport { Sprite, SetTint, SetAlpha } from '@phaserjs/phaser/gameobjects/sprite';\r\nimport { Text } from '@phaserjs/phaser/gameobjects/text'\r\nimport { Between as RandomInt } from '@phaserjs/phaser/math'\r\n\r\nimport { Board, HexagonGrid, Match } from '../../src/board';\r\nimport { CreatePolygonTexture } from '../../src/texture/canvastexture';\r\n\r\nconst Colors: number[] = [0xff0000, 0x00ff00, 0x0000ff, 0x800080, 0x808000, 0x008080];\r\n\r\nclass MyChess extends Sprite {\r\n    __symbol: number;\r\n}\r\n\r\nclass MyBoard extends Board {\r\n    match: Match;\r\n    lastMatchedCount: number;\r\n\r\n    constructor(config) {\r\n        super(config);\r\n\r\n        this.match = new Match({\r\n            board: this\r\n        });\r\n        this.lastMatchedCount = 0;\r\n\r\n        CreatePolygonTexture('tile', {\r\n            points: this.getGridPoints(),\r\n            strokeStyle: 'white',\r\n            lineWidth: 2,\r\n            lineJoin: 'miter'\r\n        })\r\n\r\n        CreatePolygonTexture('chess', {\r\n            points: this.getGridPoints(),\r\n            fillStyle: 'white'\r\n        })\r\n    }\r\n\r\n    strokeGrid(\r\n        world: StaticWorld\r\n    ): this {\r\n\r\n        this.forEachTileXY((tileXY, board) => {\r\n            let worldXY = board.tileXYToWorldXY(tileXY.x, tileXY.y, true);\r\n            let tile = new Sprite(worldXY.x, worldXY.y, 'tile');\r\n            AddChild(world, tile);\r\n        })\r\n        return this;\r\n    }\r\n\r\n    fillChess(\r\n        world: StaticWorld\r\n    ): this {\r\n\r\n        this.forEachTileXY((tileXY) => {\r\n            let chess = new MyChess(0, 0, 'chess');\r\n            let index = RandomInt(0, Colors.length - 1);\r\n            SetTint(Colors[index], chess);\r\n            chess.__symbol = index;\r\n\r\n            AddChild(world, chess);\r\n            this.addChess(chess, tileXY.x, tileXY.y, 0);\r\n        })\r\n        return this;\r\n    }\r\n\r\n    refreshSymbols(): this {\r\n        this.match.refreshSymbols(function (tileXY, board) {\r\n            var chess = board.tileXYZToChess(tileXY.x, tileXY.y, 0) as MyChess;\r\n            return (chess === null) ? null : chess.__symbol;\r\n        });\r\n        return this;\r\n    }\r\n\r\n    match3(): this {\r\n        let matchedCount = 0;\r\n        this.refreshSymbols();\r\n        this.match.match(3, function (result, board) {\r\n            let chessArray = board.tileXYArrayToChessArray(result.tileXY, 0);\r\n            for (let i = 0, cnt = chessArray.length; i < cnt; i++) {\r\n                SetAlpha(0.5, chessArray[i] as Sprite);\r\n            }\r\n            matchedCount++;\r\n        });\r\n        this.lastMatchedCount = matchedCount;\r\n        return this;\r\n    }\r\n}\r\n\r\nclass Demo extends Scene {\r\n    constructor() {\r\n        super();\r\n\r\n        const world = new StaticWorld(this);\r\n\r\n        const board = new MyBoard({\r\n            grid: (new HexagonGrid({\r\n                x: 80, y: 80,\r\n                cellWidth: 60, cellHeight: 68\r\n            })),\r\n\r\n            width: 8, height: 8\r\n        })\r\n\r\n        board\r\n            .strokeGrid(world)\r\n            .fillChess(world)\r\n            .match3();\r\n\r\n        const text = new Text(0, 580, `Match count= ${board.lastMatchedCount}`);\r\n        text.setOrigin(0);\r\n        AddChild(world, text);\r\n    }\r\n}\r\n\r\nnew Game(\r\n    WebGLRenderer(),\r\n    Size(800, 600),\r\n    Parent('game'),\r\n    BackgroundColor(0x2d2d2d),\r\n    Scenes(Demo)\r\n);\r\n","import {\r\n    ILogicBoard,\r\n    IConfig,\r\n    XType, YType, ZType, XYType, Vec2Type,\r\n    ForEachTileXYCallback,\r\n    DistanceConfig,\r\n    MirrorMode, MirrorModeString\r\n} from './ILogicBoard';\r\nimport { IGrid } from '../grid/IGrid';\r\nimport { IBoardData, IChess, XYZType } from './boarddata/IBoardData';\r\nimport { IChessData } from '../chess/IChessData';\r\n\r\nimport { BoardData } from './boarddata/BoardData';\r\nimport { SetBoardWidth } from './boarddata/SetBoardWidth';\r\nimport { SetBoardHeight } from './boarddata/SetBoardHeight';\r\n\r\nimport { AddChess } from './chess/AddChess';\r\nimport { AngleBetween } from './worldposition/AngleBetween';\r\nimport { AngleSnapToDirection } from './worldposition/AngleSnapToDirection';\r\nimport { AngleToward } from './worldposition/AngleToward';\r\nimport { AreNeighbors } from './neighbors/AreNeighbors';\r\nimport { ChessToTileXYZ } from './tileposition/ChessToTileXYZ';\r\nimport { Contains } from './tileposition/Contains';\r\nimport { DirectionBetween } from './tileposition/DirectionBetween';\r\nimport { FilledRingToTileXYArray } from './ring/FilledRingToTileXYArray';\r\nimport { Fit } from './transform/Fit';\r\nimport { ForEachTileXY } from './tileposition/ForEachTileXY';\r\nimport { GetAllChess } from './chess/GetAllChess';\r\nimport { GetChessData } from '../chess/GetChessData';\r\nimport { GetDistance } from './tileposition/GetDistance';\r\nimport { GetEmptyTileXYArray } from './empty/GetEmptyTileXYArray';\r\nimport { GetGridPoints } from './worldposition/GetGridPoints';\r\nimport { GetNeighborChess } from './neighbors/GetNeighborChess';\r\nimport { GetNeighborChessDirection } from './neighbors/GetNeighborChessDirection';\r\nimport { GetNeighborTileDirection } from './neighbors/GetNeighborTileDirection';\r\nimport { GetNeighborTileXY } from './neighbors/GetNeighborTileXY';\r\nimport { GetNeighborTileXYAtAngle } from './neighbors/GetNeighborTileXYAtAngle';\r\nimport { GetOppositeDirection } from './tileposition/GetOppositeDirection';\r\nimport { GetRandomEmptyTileXY } from './empty/GetRandomEmptyTileXY';\r\nimport { GetTileXYAtDirection } from './neighbors/GetTileXYAtDirection'\r\nimport { GetWrapTileXY } from './tileposition/GetWrapTileXY';\r\nimport { GridAlign } from './worldposition/GridAlign';\r\nimport { HasBlocker } from './blocker/HasBlocker';\r\nimport { HasEdgeBlocker } from './blocker/HasEdgeBlocker';\r\nimport { IsAngleInCone } from './worldposition/IsAngleInCone';\r\nimport { IsDirectionInCone } from './tileposition/IsDirectionInCone';\r\nimport { IsOverlappingPoint } from './worldposition/IsOverlappingPoint';\r\nimport { Mirror } from './transform/Mirror';\r\nimport { Offset } from './transform/Offset';\r\nimport { RemoveAllChess } from './chess/RemoveAllChess';\r\nimport { RemoveChess } from './chess/RemoveChess';\r\nimport { RingToTileXYArray } from './ring/RingToTileXYArray';\r\nimport { Rotate } from './transform/Rotate';\r\nimport { SwapChess } from './chess/SwapChess';\r\nimport { TileXYArrayToChessArray } from './tileposition/TileXYArrayToChessArray';\r\nimport { TileXYToChessArray } from './tileposition/TileXYToChessArray';\r\nimport { TileXYZToChess } from './tileposition/TileXYZToChess';\r\nimport { TileZToChessArray } from './tileposition/TileZToChessArray';\r\nimport { TileXYArrayToWorldXYArray } from './worldposition/TileXYArrayToWorldXYArray';\r\nimport { TileXYToWorldXY } from './worldposition/TileXYToWorldXY';\r\nimport { WorldXYSnapToGrid } from './worldposition/WorldXYSnapToGrid';\r\nimport { WorldXYToChess } from './worldposition/WorldXYToChess';\r\nimport { WorldXYToTileXY } from './worldposition/WorldXYToTileXY';\r\n\r\nexport class LogicBoard implements ILogicBoard {\r\n\r\n    grid: IGrid;\r\n    wrapMode: boolean;\r\n    infinityMode: boolean;\r\n    width: number | undefined;\r\n    height: number | undefined;\r\n    boardData: IBoardData;\r\n    _isBoard: boolean;\r\n\r\n    constructor({\r\n        grid = undefined,\r\n        wrap = false,\r\n        inifinity = false,\r\n        width = 0,\r\n        height = 0\r\n    }: IConfig = {}) {\r\n\r\n        this.boardData = new BoardData();\r\n        this._isBoard = true;\r\n        this.setGrid(grid);\r\n        this.setWrapMode(wrap);\r\n        this.setInfinityMode(inifinity);\r\n        this.setBoardSize(width, height);\r\n    }\r\n\r\n    destroy() {\r\n\r\n    }\r\n\r\n    setGrid(grid?: IGrid): this {\r\n\r\n        this.grid = grid;\r\n        return this;\r\n    }\r\n\r\n    setWrapMode(mode: boolean = true): this {\r\n\r\n        this.wrapMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setInfinityMode(mode: boolean = true): this {\r\n\r\n        this.infinityMode = mode;\r\n        return this;\r\n    }\r\n\r\n    setBoardSize(width: number = 0, height: number = 0): this {\r\n\r\n        SetBoardWidth(this, width);\r\n        SetBoardHeight(this, height);\r\n        return this;\r\n    }\r\n\r\n    addChess(\r\n        chess: IChess,\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ?: ZType,\r\n        align: boolean = true\r\n    ): this {\r\n\r\n        AddChess(this, chess, tileX, tileY, tileZ, align);\r\n        return this;\r\n    }\r\n\r\n    angleBetween(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType\r\n    ): number {\r\n\r\n        return AngleBetween(this, chessA, chessB);\r\n    }\r\n\r\n    angleSnapToDirection(\r\n        tileXY: XYType,\r\n        angle: number\r\n    ): number {\r\n\r\n        return AngleSnapToDirection(this, tileXY, angle);\r\n    }\r\n\r\n    angleToward(\r\n        tileXY: XYType,\r\n        direction: number\r\n    ): number {\r\n\r\n        return AngleToward(this, tileXY, direction);\r\n    }\r\n\r\n    areNeighbors(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType\r\n    ): boolean {\r\n\r\n        return AreNeighbors(this, chessA, chessB);\r\n    }\r\n\r\n    chessToTileXYZ(\r\n        chess: IChess | XYZType | XYType\r\n    ): XYZType | any | null {\r\n\r\n        return ChessToTileXYZ(this, chess);\r\n    }\r\n\r\n    contains(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ?: ZType\r\n    ): boolean {\r\n\r\n\r\n        return Contains(this, tileX, tileY, tileZ);\r\n    }\r\n\r\n    directionBetween(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType,\r\n        round: boolean = true\r\n    ): number | null {\r\n\r\n        return DirectionBetween(this, chessA, chessB, round);\r\n    }\r\n\r\n    filledRingToTileXYArray(\r\n        centerTileXY: XYType,\r\n        radius: number,\r\n        nearToFar: boolean = true,\r\n        out: XYType[] = []\r\n    ): XYType[] {\r\n\r\n        return FilledRingToTileXYArray(this, centerTileXY, radius, nearToFar, out);\r\n    }\r\n\r\n    fit(\r\n        tileXYArray: XYType[]\r\n    ): XYType[] {\r\n\r\n        return Fit(this, tileXYArray);\r\n    }\r\n\r\n    forEachTileXY(\r\n        callback: ForEachTileXYCallback,\r\n        scope?: any,\r\n        order: number = 0\r\n    ): this {\r\n\r\n        ForEachTileXY(this, callback, scope, order);\r\n        return this;\r\n    }\r\n\r\n    getAllChess(\r\n        out: IChess[] = []\r\n    ): IChess[] {\r\n\r\n        return GetAllChess(this, out);\r\n    }\r\n\r\n    getChessData(\r\n        chess: IChess\r\n    ): IChessData {\r\n\r\n        return GetChessData(chess);\r\n    }\r\n\r\n    getDistance(\r\n        tileA: XYType,\r\n        tileB: XYType,\r\n        roughMode: boolean = false\r\n    ): number {\r\n\r\n        return GetDistance(this, tileA, tileB, roughMode);\r\n    }\r\n\r\n    getEmptyTileXYArray(\r\n        tileZ: ZType = 0,\r\n        out: XYType[] = []\r\n    ): XYType[] {\r\n\r\n        return GetEmptyTileXYArray(this, tileZ, out);\r\n    }\r\n\r\n    getGridPoints(\r\n        tileX?: number | Vec2Type,\r\n        tileY?: number,\r\n        out?: Vec2Type[] | true\r\n    ): Vec2Type[] {\r\n\r\n        return GetGridPoints(this, tileX, tileY, out);\r\n    }\r\n\r\n    getNeighborChess(\r\n        chess: IChess | XYType,\r\n        directions: number | number[] | string | null,\r\n        neighborTileZ?: ZType | null,\r\n        out?: IChess[]\r\n    ): IChess | IChess[] | null {\r\n\r\n        return GetNeighborChess(this, chess, directions, neighborTileZ, out);\r\n    }\r\n\r\n    getNeighborChessDirection(\r\n        chess: IChess | XYType,\r\n        neighborChess: IChess | XYType\r\n    ): number {\r\n\r\n        return GetNeighborChessDirection(this, chess, neighborChess);\r\n    }\r\n\r\n    getNeighborTileDirection(\r\n        srcTileXY: XYType | null,\r\n        neighborTileXY: XYType | null\r\n    ): number | null {\r\n\r\n        return GetNeighborTileDirection(this, srcTileXY, neighborTileXY);\r\n    }\r\n\r\n    getNeighborTileXY(\r\n        srcTileXY: XYType,\r\n        directions: number | number[] | string | null = null,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType | XYType[] | null {\r\n\r\n        return GetNeighborTileXY(this, srcTileXY, directions, out);\r\n    }\r\n\r\n    getNeighborTileXYAtAngle(\r\n        srcTileXY: XYType,\r\n        angle: number,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType | null {\r\n\r\n        return GetNeighborTileXYAtAngle(this, srcTileXY, angle, out);\r\n    }\r\n\r\n    getOppositeDirection(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        direction: number\r\n    ): number {\r\n\r\n        return GetOppositeDirection(this, tileX, tileY, direction);\r\n    }\r\n\r\n    getRandomEmptyTileXY(\r\n        tileZ: ZType = 0,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType | null {\r\n\r\n        return GetRandomEmptyTileXY(this, tileZ, out);\r\n    }\r\n\r\n    getTileXYAtDirection(\r\n        chess: IChess | XYType,\r\n        directions: number | number[] | string | null,\r\n        distance: number | number[] | DistanceConfig,\r\n        out?: XYType | XYType[] | true\r\n    ): XYType | XYType[] | null {\r\n\r\n        return GetTileXYAtDirection(this, chess, directions, distance, out);\r\n    }\r\n\r\n    getWrapTileXY(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType {\r\n\r\n        return GetWrapTileXY(this, tileX, tileY, out)\r\n    }\r\n\r\n    gridAlign(\r\n        chess?: IChess,\r\n        tileX?: XType,\r\n        tileY?: YType\r\n    ): this {\r\n\r\n        GridAlign(this, chess, tileX, tileY);\r\n        return this;\r\n    }\r\n\r\n    hasBlocker(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ?: ZType\r\n    ): boolean {\r\n\r\n        return HasBlocker(this, tileX, tileY, tileZ);\r\n    }\r\n\r\n    hasEdgeBlocker(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ: ZType | undefined,\r\n        direction: number\r\n    ): boolean {\r\n\r\n        return HasEdgeBlocker(this, tileX, tileY, tileZ, direction);\r\n    }\r\n\r\n    isAngleInCone(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType,\r\n        face: number,\r\n        cone: number\r\n    ): boolean {\r\n\r\n        return IsAngleInCone(this, chessA, chessB, face, cone);\r\n    }\r\n\r\n    isDirectionInCone(\r\n        chessA: IChess | XYType,\r\n        chessB: IChess | XYType,\r\n        face: number,\r\n        cone: number\r\n    ): boolean {\r\n\r\n        return IsDirectionInCone(this, chessA, chessB, face, cone);\r\n    }\r\n\r\n    isOverlappingPoint(\r\n        worldX: number,\r\n        worldY: number,\r\n        tileZ?: ZType\r\n    ): boolean {\r\n\r\n        return IsOverlappingPoint(this, worldX, worldY, tileZ);\r\n    }\r\n\r\n    mirror(\r\n        tileXY: XYType,\r\n        mode: MirrorMode | MirrorModeString,\r\n        originTileXY: XYType | null = null,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType {\r\n\r\n        return Mirror(this, tileXY, mode, originTileXY, out);\r\n    }\r\n\r\n    offset(\r\n        tileXY: XYType,\r\n        offsetTileX: number,\r\n        offsetTileY: number,\r\n        out?: XYType | true\r\n    ): XYType {\r\n\r\n        return Offset(this, tileXY, offsetTileX, offsetTileY, out);\r\n    }\r\n\r\n    removeAllChess(\r\n        destroy: boolean = false,\r\n        fromBoardRemove: boolean = false\r\n    ): this {\r\n\r\n        RemoveAllChess(this, destroy, fromBoardRemove);\r\n        return this;\r\n    }\r\n\r\n    removeChess(\r\n        chess: IChess | null | undefined,\r\n        tileX?: XType,\r\n        tileY?: YType,\r\n        tileZ?: ZType,\r\n        destroy: boolean = false,\r\n        fromBoardRemove: boolean = false\r\n    ): this {\r\n\r\n        RemoveChess(this, chess, tileX, tileY, tileZ, destroy, fromBoardRemove);\r\n        return this;\r\n    }\r\n\r\n    ringToTileXYArray(\r\n        centerTileXY: XYType,\r\n        radius: number = 1,\r\n        out: XYType[] = []\r\n    ): XYType[] {\r\n\r\n        return RingToTileXYArray(this, centerTileXY, radius, out);\r\n    }\r\n\r\n    rotate(\r\n        tileXY: XYType,\r\n        direction: number,\r\n        originTileXY: XYType | null = null,\r\n        out: XYType | true = { x: 0, y: 0 }\r\n    ): XYType {\r\n\r\n        return Rotate(this, tileXY, direction, originTileXY, out);\r\n    }\r\n\r\n    setBoardWidth(width: number = 0): this {\r\n\r\n        SetBoardWidth(this, width);\r\n        return this\r\n    }\r\n\r\n    setBoardHeight(height: number = 0): this {\r\n\r\n        SetBoardHeight(this, height);\r\n        return this;\r\n    }\r\n\r\n    swapChess(\r\n        chessA: IChess,\r\n        chessB: IChess,\r\n        align: boolean = true\r\n    ): this {\r\n\r\n        SwapChess(this, chessA, chessB, align);\r\n        return this;\r\n    }\r\n\r\n    tileXYArrayToChessArray(\r\n        tileXYArray: XYType[],\r\n        tileZ?: ZType,\r\n        out: IChess[] = []\r\n    ): IChess[] {\r\n\r\n        return TileXYArrayToChessArray(this, tileXYArray, tileZ, out);\r\n    }\r\n\r\n    tileXYToChessArray(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        out: IChess[] = []\r\n    ): IChess[] {\r\n\r\n        return TileXYToChessArray(this, tileX, tileY, out);\r\n    }\r\n\r\n    tileXYZToChess(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        tileZ: ZType\r\n    ): IChess | undefined {\r\n\r\n        return TileXYZToChess(this, tileX, tileY, tileZ);\r\n    }\r\n\r\n    tileZToChessArray(\r\n        tileZ: ZType,\r\n        out: IChess[] = []\r\n    ): IChess[] {\r\n\r\n        return TileZToChessArray(this, tileZ, out);\r\n    }\r\n\r\n    tileXYArrayToWorldXYArray(\r\n        tileXYArray: XYType[],\r\n        out: Vec2Type[] = []\r\n    ): Vec2Type[] {\r\n\r\n        return TileXYArrayToWorldXYArray(this, tileXYArray, out);\r\n    }\r\n\r\n    tileXYToWorldXY(\r\n        tileX: XType,\r\n        tileY: YType,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return TileXYToWorldXY(this, tileX, tileY, out);\r\n    }\r\n\r\n    worldXYSnapToGrid(\r\n        worldX: number,\r\n        worldY: number,\r\n        out: Vec2Type | true = { x: 0, y: 0 }\r\n    ): Vec2Type {\r\n\r\n        return WorldXYSnapToGrid(this, worldX, worldY, out);\r\n    }\r\n\r\n    worldXYToChess(\r\n        worldX: number,\r\n        worldY: number,\r\n        tileZ?: ZType,\r\n        out?: IChess[]\r\n    ): IChess | IChess[] {\r\n\r\n        return WorldXYToChess(this, worldX, worldY, tileZ, out);\r\n    }\r\n\r\n    worldXYToTileXY(\r\n        worldX: number,\r\n        worldY: number,\r\n        out?: XYType | true\r\n    ): XYType {\r\n\r\n        return WorldXYToTileXY(this, worldX, worldY, out);\r\n    }\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XType, YType, ZType, XYZType\r\n} from '../ILogicBoard';\r\nimport { TileXYZToChess } from '../tileposition/TileXYZToChess';\r\nimport { GetChessData } from '../../chess/GetChessData';\r\nimport { GridAlign } from '../worldposition/GridAlign';\r\n\r\nexport let AddChess = function (\r\n    board: ILogicBoard,\r\n    chess: IChess,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    tileZ?: ZType,\r\n    align: boolean = true\r\n) {\r\n\r\n    if (!board.contains(tileX, tileY)) {\r\n        return;\r\n    }\r\n\r\n    let curTileXYZ = board.chessToTileXYZ(chess) as XYZType;\r\n    if (tileZ === undefined) {\r\n        if (curTileXYZ) {\r\n            tileZ = curTileXYZ.z;\r\n        } else {\r\n            tileZ = 0;\r\n        }\r\n    }\r\n\r\n    if (curTileXYZ &&\r\n        (curTileXYZ.x === tileX) && (curTileXYZ.y === tileY) && (curTileXYZ.z === tileZ)) {\r\n        // Move to current position\r\n        return;\r\n    }\r\n\r\n    let occupiedChess = TileXYZToChess(board, tileX, tileY, tileZ);\r\n    if (occupiedChess) {\r\n        // board.emit('kickout', occupiedChess, chess, curTileXYZ);\r\n        board.removeChess(null, tileX, tileY, tileZ); // Clear up (tileX, tileY, tileZ)\r\n    }\r\n\r\n    board.boardData.addChess(chess, tileX, tileY, tileZ);\r\n\r\n    if (board._isBoard) {\r\n        GetChessData(chess).setBoard(board);\r\n    }\r\n\r\n    if (align) {\r\n        GridAlign(board, chess, tileX, tileY);\r\n    }\r\n};","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\nimport { RadToDeg } from '../../../utils/math/angle/RadToDeg';\r\nimport { ShortestBetween } from '../../../utils/math/angle/ShortestBetween';\r\n\r\nexport let AngleSnapToDirection = function (\r\n    board: ILogicBoard,\r\n    tileXY: XYType,\r\n    angle: number\r\n): number {\r\n\r\n    angle = RadToDeg(angle); // -180~180\r\n    let directions = board.grid.allDirections;\r\n    let minDeltaAngle = Infinity,\r\n        direction = undefined;\r\n    for (let i = 0, cnt = directions.length; i < cnt; i++) {\r\n        let neighborAngle = RadToDeg(board.angleToward(tileXY, directions[i])); // -PI~PI -> -180~180\r\n        let deltaAngle = Math.abs(ShortestBetween(angle, neighborAngle));\r\n        if (deltaAngle < minDeltaAngle) {\r\n            minDeltaAngle = deltaAngle;\r\n            direction = i;\r\n        }\r\n    }\r\n\r\n    return direction;\r\n};","import {\r\n    ILogicBoard,\r\n    IChess, XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let AreNeighbors = function (\r\n    board: ILogicBoard,\r\n    chessA: IChess | XYType,\r\n    chessB: IChess | XYType\r\n): boolean {\r\n\r\n    return (board.getNeighborChessDirection(chessA, chessB) !== null);\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XYZType, XYType\r\n} from '../ILogicBoard';\r\nimport { IsTileXYZ } from '../utils/IsTileXYZ';\r\n\r\nexport let ChessToTileXYZ = function (\r\n    board: ILogicBoard,\r\n    chess: IChess | XYZType | XYType\r\n): XYZType | XYType | null {\r\n\r\n    let xyz: XYZType | undefined = board.boardData.getXYZ(chess);\r\n    if (xyz) {\r\n        return xyz;\r\n    } else if (IsTileXYZ(chess)) { // {x, y}, or {x, y, z}\r\n        return chess as XYType;\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n}","import { IsPlainObject } from '../../../utils/object/IsPlainObject';\r\n\r\nexport let IsTileXYZ = function (obj: any): boolean {\r\n    if (obj && (IsPlainObject(obj) || obj.isTileXYZ)) {\r\n        return obj.hasOwnProperty('x') && obj.hasOwnProperty('y');\r\n    } else {\r\n        return false;\r\n    }\r\n}","export let IsPlainObject = function (obj: any): boolean {\r\n    // Not plain objects:\r\n    // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\r\n    // - DOM nodes\r\n    // - window\r\n    if (typeof (obj) !== 'object' || obj.nodeType || obj === obj.window) {\r\n        return false;\r\n    }\r\n\r\n    // Support: Firefox <20\r\n    // The try/catch suppresses exceptions thrown when attempting to access\r\n    // the \"constructor\" property of certain host objects, ie. |window.location|\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=814622\r\n    try {\r\n        if (obj.constructor && !({}).hasOwnProperty.call(obj.constructor.prototype, 'isPrototypeOf')) {\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n\r\n    // If the function hasn't returned already, we're confident that\r\n    // |obj| is a plain object, created by {} or constructed with new Object\r\n    return true;\r\n};\r\n","import {\r\n    ILogicBoard,\r\n    XType, YType, ZType\r\n} from '../ILogicBoard';\r\n\r\nexport let Contains = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    tileZ?: ZType\r\n): boolean {\r\n\r\n    let result: boolean;\r\n    if (board.infinityMode) {\r\n        result = true;\r\n    } else {\r\n        result = (tileX >= 0) && (tileX < board.width) &&\r\n            (tileY >= 0) && (tileY < board.height);\r\n    }\r\n    if (result && (tileZ !== undefined)) {\r\n        result = board.boardData.contains(tileX, tileY, tileZ);\r\n    }\r\n    return result;\r\n};","import {\r\n    ILogicBoard,\r\n    IChess, XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let DirectionBetween = function (\r\n    board: ILogicBoard,\r\n    chessA: IChess | XYType,\r\n    chessB: IChess | XYType,\r\n    round: boolean = true\r\n): number | null {\r\n\r\n    let tileA = board.chessToTileXYZ(chessA);\r\n    let tileB = board.chessToTileXYZ(chessB);\r\n    if ((tileA === null) || (tileB === null)) {\r\n        return null;\r\n    }\r\n\r\n    return board.grid.directionBetween(tileA, tileB, round);\r\n}","import {\r\n    ILogicBoard,\r\n    XYType,\r\n} from '../ILogicBoard';\r\n\r\nexport let FilledRingToTileXYArray = function (\r\n    board: ILogicBoard,\r\n    centerTileXY: XYType,\r\n    radius: number,\r\n    nearToFar: boolean = true,\r\n    out: XYType[] = []\r\n): XYType[] {\r\n\r\n    for (let i = 0; i <= radius; i++) {\r\n        let level = (nearToFar) ? i : (radius - i);\r\n        board.ringToTileXYArray(centerTileXY, level, out);\r\n    }\r\n    return out;\r\n}","// Offset tileXYArray to (0,0), and set board size to fit tileXYArray\r\nimport {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let Fit = function (\r\n    board: ILogicBoard,\r\n    tileXYArray: XYType[]\r\n): XYType[] {\r\n\r\n    // Get minimum tileX, tileY\r\n    let minX = Infinity;\r\n    let minY = Infinity;\r\n    let tileXY: XYType;\r\n    for (let i = 0, cnt = tileXYArray.length; i < cnt; i++) {\r\n        tileXY = tileXYArray[i];\r\n        minX = Math.min(minX, tileXY.x);\r\n        minY = Math.min(minY, tileXY.y);\r\n    }\r\n    // Offset tileXYArray to (0,0)\r\n    if ((minX !== 0) || (minY !== 0)) {\r\n        for (let i = 0, cnt = tileXYArray.length; i < cnt; i++) {\r\n            tileXY = tileXYArray[i];\r\n            board.offset(tileXY, -minX, -minY, tileXY);\r\n        }\r\n    }\r\n\r\n    // Get maximun tileX, tileY\r\n    let maxX = -Infinity;\r\n    let maxY = -Infinity;\r\n    for (let i = 0, cnt = tileXYArray.length; i < cnt; i++) {\r\n        tileXY = tileXYArray[i];\r\n        maxX = Math.max(maxX, tileXY.x);\r\n        maxY = Math.max(maxY, tileXY.y);\r\n    }\r\n    // Set board size\r\n    board.setBoardSize(maxX + 1, maxY + 1);\r\n    return tileXYArray;\r\n}","import {\r\n    ILogicBoard,\r\n    IChess\r\n} from '../ILogicBoard';\r\n\r\nexport let GetAllChess = function (\r\n    board: ILogicBoard,\r\n    out: IChess[] = []\r\n): IChess[] {\r\n\r\n    let chessToXYZ = board.boardData.chessToXYZ;\r\n    for (const [chess, xyz] of chessToXYZ) {\r\n        out.push(chess);\r\n    }\r\n    return out;\r\n};","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetDistance = function (\r\n    board: ILogicBoard,\r\n    tileA: XYType,\r\n    tileB: XYType,\r\n    roughMode?: boolean\r\n): number {\r\n\r\n    return board.grid.getDistance(tileA, tileB, roughMode);\r\n}","import {\r\n    ILogicBoard,\r\n    ZType, XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetEmptyTileXYArray = function (\r\n    board: ILogicBoard,\r\n    tileZ: ZType = 0,\r\n    out: XYType[] = []\r\n): XYType[] {\r\n\r\n    for (let tileY = 0; tileY < board.height; tileY++) {\r\n        for (let tileX = 0; tileX < board.width; tileX++) {\r\n            if (board.tileXYZToChess(tileX, tileY, tileZ) === null) {\r\n                out.push({\r\n                    x: tileX,\r\n                    y: tileY\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return out;\r\n}","import {\r\n    ILogicBoard,\r\n    Vec2Type\r\n} from '../ILogicBoard';\r\n\r\nexport let GetGridPoints = function (\r\n    board: ILogicBoard,\r\n    tileX?: number | Vec2Type,\r\n    tileY?: number,\r\n    out?: Vec2Type[] | true\r\n): Vec2Type[] {\r\n\r\n    return board.grid.getGridPoints(tileX, tileY, out);\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XYType, XYZType, ZType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetNeighborChess = function (\r\n    board: ILogicBoard,\r\n    chess: IChess | XYType,\r\n    directions: number | number[] | string | null,\r\n    neighborTileZ?: ZType | null,\r\n    out?: IChess[]\r\n): IChess | IChess[] | null {\r\n\r\n    let tileXYZ = board.chessToTileXYZ(chess);\r\n    if (tileXYZ === null) { // chess is not on board\r\n        return null;\r\n    }\r\n\r\n    if (neighborTileZ == null) {\r\n        neighborTileZ = (tileXYZ.hasOwnProperty('z')) ? (tileXYZ as XYZType).z : null;\r\n    }\r\n\r\n    let neighborTileXY = board.getNeighborTileXY(tileXYZ, directions, true);\r\n    if (neighborTileXY === null) {\r\n        return null;\r\n    } else if (Array.isArray(neighborTileXY)) { // NeighborTileXY array -> chess array\r\n        if (out === undefined) {\r\n            out = [];\r\n        }\r\n        return board.tileXYArrayToChessArray(neighborTileXY, neighborTileZ, out);\r\n    } else { // Single neighborTileXY -> single chess if tileZ, chess array if no tileZ\r\n        if (neighborTileZ == null) {\r\n            if (out === undefined) {\r\n                out = [];\r\n            }\r\n            return board.tileXYToChessArray(neighborTileXY.x, neighborTileXY.y, out);\r\n        } else {\r\n            return board.tileXYZToChess(neighborTileXY.x, neighborTileXY.y, neighborTileZ);\r\n        }\r\n    }\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XYType,\r\n} from '../ILogicBoard';\r\n\r\nexport let GetNeighborChessDirection = function (\r\n    board: ILogicBoard,\r\n    chess: IChess | XYType,\r\n    neighborChess: IChess | XYType\r\n): number {\r\n\r\n    let srcTileXYZ = board.chessToTileXYZ(chess);\r\n    let neighborTileXYZ = board.chessToTileXYZ(neighborChess);\r\n    return board.getNeighborTileDirection(srcTileXYZ, neighborTileXYZ);\r\n}","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetNeighborTileDirection = function (\r\n    board: ILogicBoard,\r\n    srcTileXY: XYType | null,\r\n    neighborTileXY: XYType | null\r\n): number | null {\r\n\r\n    if ((srcTileXY === null) || (neighborTileXY === null)) {\r\n        return null;\r\n    }\r\n    if ((srcTileXY.x === neighborTileXY.x) && (srcTileXY.y === neighborTileXY.y)) {\r\n        return null\r\n    }\r\n\r\n    let direction = board.grid.getNeighborTileDirection(srcTileXY, neighborTileXY);\r\n    if (board.wrapMode && (direction === null)) {\r\n        let tileXYArray = board.getNeighborTileXY(srcTileXY, null) as XYType[];\r\n        for (let i = 0, cnt = tileXYArray.length; i < cnt; i++) {\r\n            let tileXY = tileXYArray[i];\r\n            if ((neighborTileXY.x === tileXY.x) && (neighborTileXY.y === tileXY.y)) {\r\n                direction = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return direction;\r\n}","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetNeighborTileXY = function (\r\n    board: ILogicBoard,\r\n    srcTileXY: XYType,\r\n    directions: number | number[] | string | null = null,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType | XYType[] | null {\r\n\r\n    return board.getTileXYAtDirection(srcTileXY, directions, 1, out);\r\n};","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetNeighborTileXYAtAngle = function (\r\n    borad: ILogicBoard,\r\n    srcTileXY: XYType,\r\n    angle: number,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType | null {\r\n\r\n    let direction = borad.angleSnapToDirection(srcTileXY, angle);\r\n    return borad.getTileXYAtDirection(srcTileXY, direction, 1, out) as XYType;\r\n};","import {\r\n    ILogicBoard,\r\n    XType, YType\r\n} from '../ILogicBoard';\r\n\r\nexport let GetOppositeDirection = function (\r\n    baord: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    direction: number\r\n): number {\r\n\r\n    return baord.grid.getOppositeDirection(tileX, tileY, direction);\r\n}","import {\r\n    ILogicBoard,\r\n    XType, YType, ZType\r\n} from '../ILogicBoard'\r\n\r\nexport let HasBlocker = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    tileZ?: ZType\r\n): boolean {\r\n\r\n    if (tileZ === undefined) {\r\n        // any chess at (tileX, tileY) has blocker\r\n        let chessArray = board.tileXYToChessArray(tileX, tileY);\r\n        for (let i = 0, cnt = chessArray.length; i < cnt; i++) {\r\n            let blocker = board.getChessData(chessArray[i]).blocker;\r\n            if (blocker === true) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n\r\n    } else {\r\n        // chess at (tileX, tileY, tileZ) has blocker\r\n        let chess = board.tileXYZToChess(tileX, tileY, tileZ);\r\n        if (chess === null) {\r\n            return false;\r\n        }\r\n        let blocker = board.getChessData(chess).blocker;\r\n        return (blocker === true);\r\n\r\n    }\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let IsDirectionInCone = function (\r\n    board: ILogicBoard,\r\n    chessA: IChess | XYType,\r\n    chessB: IChess | XYType,\r\n    face: number,\r\n    cone: number\r\n): boolean {\r\n\r\n    let tileXYA = board.chessToTileXYZ(chessA);\r\n    let tileXYB = board.chessToTileXYZ(chessB);\r\n\r\n    let savedDirections = board.grid.directions; // Save directions\r\n    board.grid.directions = board.grid.sides;\r\n    let direction = board.grid.directionBetween(tileXYA, tileXYB, false);\r\n    board.grid.directions = savedDirections; // Restore directions\r\n\r\n    let deltaDirection = Math.abs(direction - face);\r\n    deltaDirection = Math.min(deltaDirection, board.grid.directions - deltaDirection);\r\n    return (deltaDirection <= (cone / 2));\r\n}","import {\r\n    ILogicBoard,\r\n    ZType\r\n} from '../ILogicBoard';\r\n\r\nexport let IsOverlappingPoint = function (\r\n    board: ILogicBoard,\r\n    worldX: number,\r\n    worldY: number,\r\n    tileZ?: ZType\r\n): boolean {\r\n\r\n    if (board.infinityMode && (tileZ === undefined)) {\r\n        return true;\r\n    }\r\n\r\n    let out = board.worldXYToTileXY(worldX, worldY, true);\r\n    return board.contains(out.x, out.y, tileZ);\r\n}","import { ILogicBoard } from '../ILogicBoard';\r\n\r\nexport let RemoveAllChess = function (\r\n    board: ILogicBoard,\r\n    destroy: boolean = false,\r\n    fromBoardRemove: boolean = false\r\n): void {\r\n\r\n    let chessArray = board.getAllChess();\r\n    for (let i = 0, cnt = chessArray.length; i < cnt; i++) {\r\n        board.removeChess(chessArray[i], undefined, undefined, undefined, destroy, fromBoardRemove);\r\n    }\r\n}","import {\r\n    ILogicBoard,\r\n    IChess, XType, YType, ZType, XYZType\r\n} from '../ILogicBoard';\r\nimport { TileXYZToChess } from '../tileposition/TileXYZToChess';\r\nimport { GetChessData } from '../../chess/GetChessData';\r\n\r\n\r\nexport let RemoveChess = function (\r\n    board: ILogicBoard,\r\n    chess: IChess | null | undefined,\r\n    tileX?: XType,\r\n    tileY?: YType,\r\n    tileZ?: ZType,\r\n    destroy: boolean = false,\r\n    fromBoardRemove: boolean = false\r\n) {\r\n\r\n    if (chess) {\r\n        let tileXYZ = board.chessToTileXYZ(chess) as XYZType;\r\n        if (tileXYZ) {\r\n            tileX = tileXYZ.x;\r\n            tileY = tileXYZ.y;\r\n            tileZ = tileXYZ.z;\r\n        } else {\r\n            // chess is not in this board\r\n            return;\r\n        }\r\n    } else {\r\n        chess = TileXYZToChess(board, tileX, tileY, tileZ);\r\n        if (!chess) {\r\n            // chess is not in this board\r\n            return;\r\n        }\r\n    }\r\n\r\n    if (!fromBoardRemove) {\r\n        board.boardData.removeChess(tileX, tileY, tileZ);\r\n    }\r\n    if (board._isBoard) {\r\n        GetChessData(chess).setBoard(null);\r\n    }\r\n\r\n    if (destroy && chess.destroy) {\r\n        chess.destroy();\r\n    }\r\n}","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let RingToTileXYArray = function (\r\n    board: ILogicBoard,\r\n    centerTileXY: XYType,\r\n    radius: number = 1,\r\n    out: XYType[] = []\r\n): XYType[] {\r\n\r\n    let tileArray = board.grid.ringToTileXYArray(centerTileXY, radius) as XYType[];\r\n    for (let i = 0, cnt = tileArray.length; i < cnt; i++) {\r\n        let tileXY = tileArray[i];\r\n        if (board.contains(tileXY.x, tileXY.y)) {\r\n            out.push(tileXY);\r\n        }\r\n    }\r\n    return out;\r\n}","import {\r\n    ILogicBoard,\r\n    ZType, XYType, IChess\r\n} from '../ILogicBoard';\r\nimport { TileXYZToChess } from './TileXYZToChess';\r\nimport { TileXYToChessArray } from './TileXYToChessArray';\r\n\r\n\r\nexport let TileXYArrayToChessArray = function (\r\n    board: ILogicBoard,\r\n    tileXYArray: XYType[],\r\n    tileZ?: ZType,\r\n    out: IChess[] = []\r\n): IChess[] {\r\n\r\n    let tileZMode = (tileZ != null);\r\n    let tileXY: XYType,\r\n        chess: IChess;\r\n    for (let i = 0, cnt = tileXYArray.length; i < cnt; i++) {\r\n        tileXY = tileXYArray[i];\r\n        if (tileZMode) {\r\n            chess = TileXYZToChess(board, tileXY.x, tileXY.y, tileZ as ZType);\r\n            if (chess !== null) {\r\n                out.push(chess);\r\n            }\r\n        } else {\r\n            TileXYToChessArray(board, tileXY.x, tileXY.y, out);\r\n        }\r\n    }\r\n    return out;\r\n}","import {\r\n    ILogicBoard,\r\n    ZType,\r\n    IChess\r\n} from '../ILogicBoard';\r\n\r\nexport let TileZToChessArray = function (\r\n    board: ILogicBoard,\r\n    tileZ: ZType,\r\n    out: IChess[] = []\r\n): IChess[] {\r\n\r\n    let chessSet = board.boardData.ZToChessSet.get(tileZ);\r\n    if (chessSet) {\r\n        for (const chess of chessSet) {\r\n            out.push(chess);\r\n        }\r\n    }\r\n    return out;\r\n}","import {\r\n    ILogicBoard,\r\n    XYType, Vec2Type\r\n} from '../ILogicBoard';\r\n\r\nexport let TileXYArrayToWorldXYArray = function (\r\n    board: ILogicBoard,\r\n    tileXYArray: XYType[],\r\n    out: Vec2Type[] = []\r\n): Vec2Type[] {\r\n\r\n    for (let i = 0, cnt = tileXYArray.length; i < cnt; i++) {\r\n        let tileXY = tileXYArray[i];\r\n        out.push(board.tileXYToWorldXY(tileXY.x, tileXY.y));\r\n    }\r\n    return out;\r\n};","import {\r\n    ILogicBoard,\r\n    XType, YType, Vec2Type\r\n} from '../ILogicBoard';\r\n\r\nexport let TileXYToWorldXY = function (\r\n    board: ILogicBoard,\r\n    tileX: XType,\r\n    tileY: YType,\r\n    out?: Vec2Type | true\r\n): Vec2Type {\r\n\r\n    return board.grid.getWorldXY(tileX, tileY, out);\r\n}","import {\r\n    ILogicBoard,\r\n    ZType, IChess\r\n} from '../ILogicBoard';\r\n\r\nexport let WorldXYToChess = function (\r\n    board: ILogicBoard,\r\n    worldX: number,\r\n    worldY: number,\r\n    tileZ?: ZType,\r\n    out?: IChess[]\r\n): IChess | IChess[] {\r\n\r\n    let tileXY = board.worldXYToTileXY(worldX, worldY, true);\r\n    if (tileZ !== undefined) {\r\n        return board.tileXYZToChess(tileXY.x, tileXY.y, tileZ)\r\n    } else {\r\n        return board.tileXYToChessArray(tileXY.x, tileXY.y, out);\r\n    }\r\n}","import {\r\n    ILogicBoard,\r\n    XYType\r\n} from '../ILogicBoard';\r\n\r\nexport let WorldXYToTileXY = function (\r\n    board: ILogicBoard,\r\n    worldX: number,\r\n    worldY: number,\r\n    out: XYType | true = { x: 0, y: 0 }\r\n): XYType {\r\n\r\n    return board.grid.getTileXY(worldX, worldY, out);\r\n}","function Between(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\n\nexport { Between };\n","import '../../renderer/webgl1/colors/PackColor.js';\nimport { PackColors } from '../../renderer/webgl1/colors/PackColors.js';\n\nfunction SetTint(tint, ...children) {\r\n    children.forEach(child => {\r\n        const vertexTint = child.vertexTint;\r\n        vertexTint[0] = tint;\r\n        vertexTint[1] = tint;\r\n        vertexTint[2] = tint;\r\n        vertexTint[3] = tint;\r\n        PackColors(child);\r\n    });\r\n    return children;\r\n}\n\nexport { SetTint };\n","import { GameInstance } from './GameInstance.js';\nimport { GetBanner } from './config/Banner.js';\nimport './renderer/BindingQueue.js';\nimport { GetRenderer } from './config/SetRenderer.js';\nimport './dom/GetElement.js';\nimport { GetParent } from './config/Parent.js';\nimport './config/Scenes.js';\nimport './textures/Frame.js';\nimport './textures/Texture.js';\nimport { Emit } from './events/Emit.js';\nimport { AddToDOM } from './dom/AddToDOM.js';\nimport { DOMContentLoaded } from './dom/DOMContentLoaded.js';\nimport { EventEmitter } from './events/EventEmitter.js';\nimport './events/EventInstance.js';\nimport './events/On.js';\nimport './events/Once.js';\nimport './scenes/CreateSceneRenderData.js';\nimport './scenes/ResetSceneRenderData.js';\nimport './scenes/SceneManagerInstance.js';\nimport { SceneManager } from './scenes/SceneManager.js';\nimport './textures/CreateCanvas.js';\nimport './textures/TextureManagerInstance.js';\nimport { TextureManager } from './textures/TextureManager.js';\n\nclass Game extends EventEmitter {\r\n    constructor(...settings) {\r\n        super();\r\n        this.VERSION = '4.0.0-beta1';\r\n        this.isBooted = false;\r\n        this.isPaused = false;\r\n        this.willUpdate = true;\r\n        this.willRender = true;\r\n        this.lastTick = 0;\r\n        this.elapsed = 0;\r\n        this.frame = 0;\r\n        GameInstance.set(this);\r\n        DOMContentLoaded(() => this.boot(settings));\r\n    }\r\n    boot(settings) {\r\n        settings.forEach(setting => setting());\r\n        const renderer = GetRenderer();\r\n        this.renderer = new renderer();\r\n        this.textureManager = new TextureManager();\r\n        this.sceneManager = new SceneManager();\r\n        const parent = GetParent();\r\n        if (parent) {\r\n            AddToDOM(this.renderer.canvas, parent);\r\n        }\r\n        this.isBooted = true;\r\n        GetBanner();\r\n        Emit(this, 'boot');\r\n        this.lastTick = performance.now();\r\n        this.step(this.lastTick);\r\n    }\r\n    pause() {\r\n        this.isPaused = true;\r\n    }\r\n    resume() {\r\n        this.isPaused = false;\r\n        this.lastTick = performance.now();\r\n    }\r\n    step(time) {\r\n        const delta = time - this.lastTick;\r\n        this.lastTick = time;\r\n        this.elapsed += delta;\r\n        if (!this.isPaused) {\r\n            if (this.willUpdate) {\r\n                this.sceneManager.update(delta, time);\r\n                Emit(this, 'update', delta, time);\r\n            }\r\n            if (this.willRender) {\r\n                this.renderer.render(this.sceneManager.render(this.frame));\r\n            }\r\n        }\r\n        this.frame++;\r\n        GameInstance.setFrame(this.frame);\r\n        GameInstance.setElapsed(this.elapsed);\r\n        requestAnimationFrame(now => this.step(now));\r\n    }\r\n    destroy() {\r\n    }\r\n}\n\nexport { Game };\n","class EventEmitter {\r\n    constructor() {\r\n        this.events = new Map();\r\n    }\r\n}\n\nexport { EventEmitter };\n","function DOMContentLoaded(callback) {\r\n    const readyState = document.readyState;\r\n    if (readyState === 'complete' || readyState === 'interactive') {\r\n        callback();\r\n        return;\r\n    }\r\n    const check = () => {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n        callback();\r\n    };\r\n    if (!document.body) {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (window.hasOwnProperty('cordova')) {\r\n        document.addEventListener('deviceready', check, true);\r\n    }\r\n    else {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n}\n\nexport { DOMContentLoaded };\n","import { GetElement } from './GetElement.js';\n\nfunction AddToDOM(element, parent) {\r\n    const target = GetElement(parent);\r\n    target.appendChild(element);\r\n    return element;\r\n}\n\nexport { AddToDOM };\n","import { GameInstance } from '../GameInstance.js';\n\nlet title = 'Phaser';\r\nlet url = 'https://phaser4.io';\r\nlet color = '#fff';\r\nlet background = 'linear-gradient(#3e0081 40%, #00bcc3)';\r\nfunction Banner(gameTitle = '', gameURL = '', textColor, textBackground) {\r\n    return () => {\r\n        title = gameTitle;\r\n        url = gameURL;\r\n        if (textColor) {\r\n            color = textColor;\r\n        }\r\n        if (textBackground) {\r\n            background = textBackground;\r\n        }\r\n    };\r\n}\r\nfunction GetBanner() {\r\n    if (title !== '') {\r\n        const game = GameInstance.get();\r\n        const version = (title === 'Phaser') ? ' v' + game.VERSION : '';\r\n        console.log(`%c${title}${version}%c ${url}`, `padding: 4px 16px; color: ${color}; background: ${background}`, '');\r\n    }\r\n}\n\nexport { Banner, GetBanner };\n","import './BackgroundColor.js';\nimport './Size.js';\nimport '../renderer/BindingQueue.js';\nimport { SetRenderer } from './SetRenderer.js';\nimport './MaxTextures.js';\nimport './WebGLContext.js';\nimport '../renderer/webgl1/fbo/FBOSystem.js';\nimport '../renderer/webgl1/GL.js';\nimport '../renderer/webgl1/colors/GetRGBArray.js';\nimport '../math/matrix2d-funcs/ExactEquals.js';\nimport '../renderer/webgl1/fbo/CreateFramebuffer.js';\nimport '../renderer/webgl1/textures/CreateGLTexture.js';\nimport '../renderer/webgl1/fbo/DeleteFramebuffer.js';\nimport '../renderer/webgl1/textures/DeleteGLTexture.js';\nimport '../math/pow2/IsSizePowerOfTwo.js';\nimport '../renderer/webgl1/textures/SetGLTextureFilterMode.js';\nimport '../renderer/webgl1/textures/UpdateGLTexture.js';\nimport '../renderer/webgl1/textures/GLTextureBinding.js';\nimport '../renderer/webgl1/buffers/IndexedBuffer.js';\nimport '../textures/Frame.js';\nimport '../textures/Texture.js';\nimport '../renderer/webgl1/WebGLRendererInstance.js';\nimport '../renderer/webgl1/shaders/SingleTextureQuadShader.js';\nimport '../renderer/webgl1/shaders/MultiTextureQuadShader.js';\nimport '../renderer/webgl1/cameras/Ortho.js';\nimport '../renderer/webgl1/shaders/ShaderSystem.js';\nimport '../renderer/webgl1/shaders/CheckShaderMaxIfStatements.js';\nimport '../renderer/webgl1/textures/TextureSystem.js';\nimport { WebGLRenderer as WebGLRenderer$1 } from '../renderer/webgl1/WebGLRenderer.js';\n\nfunction WebGLRenderer() {\r\n    return () => {\r\n        SetRenderer(WebGLRenderer$1);\r\n    };\r\n}\n\nexport { WebGLRenderer };\n","import { GameInstance } from '../GameInstance.js';\nimport './SceneManagerInstance.js';\nimport './GetConfigValue.js';\nimport { Install } from './Install.js';\n\nclass Scene {\r\n    constructor(config) {\r\n        this.game = GameInstance.get();\r\n        this.events = new Map();\r\n        Install(this, config);\r\n    }\r\n}\n\nexport { Scene };\n"],"names":["instance","frame","elapsed","GameInstance","game","current","bgColor","_width","_height","_resolution","GetWidth","GetHeight","GetResolution","queue","BindingQueue","texture","push","length","parent","maxTextures","GetMaxTextures","GetElement","target","element","document","getElementById","nodeType","body","GetParent","_scenes","gl","_contextAttributes","alpha","antialias","depth","premultipliedAlpha","FBOSystem","[object Object]","renderer","this","stack","bindFramebuffer","FRAMEBUFFER","viewport","width","height","framebuffer","clear","set","clearColor","COLOR_BUFFER_BIT","pop","len","entry","reset","GL","context","CreateGLTexture","binding","flipY","unpackPremultiplyAlpha","minFilter","magFilter","wrapS","wrapT","generateMipmap","isPOT","source","image","glTexture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","DeleteGLTexture","isTexture","deleteTexture","GLTextureBinding","config","index","indexCounter","dirtyIndex","LINEAR","CLAMP_TO_EDGE","linear","mode","NEAREST","SetGLTextureFilterMode","UpdateGLTexture","isFramebuffer","deleteFramebuffer","DeleteFramebuffer","IndexedBuffer","batchSize","dataSize","indexSize","vertexElementSize","quadIndexSize","vertexByteSize","quadByteSize","quadElementSize","bufferByteSize","create","ibo","i","data","ArrayBuffer","Uint16Array","vertexViewF32","Float32Array","vertexViewU32","Uint32Array","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","Frame","key","x","y","trimmed","sourceSizeWidth","sourceSizeHeight","updateUVs","pivot","w","h","spriteSourceSizeX","spriteSourceSizeY","spriteSourceSizeWidth","spriteSourceSizeHeight","originX","originY","left","right","top","bottom","child","transform","origin","setExtent","baseTextureWidth","baseTextureHeight","u0","v0","u1","v1","Texture","frames","Map","addFrame","has","firstFrame","get","console","warn","setSize","destroy","WebGLRendererInstance","shaderSource","fragmentShader","vertexShader","SingleTextureQuadShader","attribs","aVertexPosition","aTextureCoord","aTextureId","aTintColor","uniforms","uProjectionMatrix","uCameraMatrix","uTexture","uTime","uResolution","renderToFBO","resolution","buffer","createShaders","count","attachment","COLOR_ATTACHMENT0","createFramebuffer","framebufferTexture2D","CreateFramebuffer","fragmentShaderSource","vertexShaderSource","createShader","FRAGMENT_SHADER","compileShader","failed","message","getShaderInfoLog","error","VERTEX_SHADER","program","createProgram","attachShader","linkProgram","useProgram","Object","keys","location","getAttribLocation","enableVertexAttribArray","getUniformLocation","projectionMatrix","cameraMatrix","textureID","uniformMatrix4fv","uniform1i","textures","textureIndex","uniform1f","performance","now","uniform2f","bindBuffers","stride","vertexAttribPointer","FLOAT","view","subarray","bufferSubData","fbo","add","drawElements","TRIANGLES","UNSIGNED_SHORT","draw","prevCount","MultiTextureQuadShader","super","src","replace","uniform1iv","ShaderSystem","currentShader","stackEntry","shader","currentEntry","singleQuadShader","flush","currentCamera","matrix","success","bind","rebind","flushTotal","fragTemplate","join","GenerateSrc","maxIfs","TextureSystem","startActiveTexture","tempTextures","maxGPUTextures","fragmentSrc","getShaderParameter","COMPILE_STATUS","CheckShaderMaxIfStatements","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxConfigTextures","Math","max","forEach","texturesIndex","tempTexture","Uint8Array","currentActiveTexture","temp","setIndex","TEXTURE1","WebGLRenderer","clearBeforeRender","optimizeRedraw","autoResize","contextLost","setBackgroundColor","canvas","createElement","addEventListener","event","onContextLost","onContextRestored","initContext","shaders","getContext","disable","DEPTH_TEST","CULL_FACE","resize","init","style","toString","near","far","Ortho","preventDefault","color","output","r","g","b","a","GetRGBArray","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","update","renderData","numDirtyFrames","numDirtyCameras","cls","worlds","worldData","camera","renderList","worldTransform","c","d","tx","ty","children","renderNode","node","renderGL","postRenderGL","undefined","Matrix2D","Rectangle","rect","Contains","value","NOOP","Vec2Callback","callback","compareValue","_x","_y","StaticCamera","type","dirtyRender","bounds","world","RemoveChild","currentIndex","indexOf","GetChildIndex","removed","splice","RemoveChildAt","Emit","emitter","args","events","size","listeners","ee","apply","once","delete","SetParent","parentWorld","SetWorld","shift","numChildren","unshift","DepthFirstSearch","AddChild","updateWorld","DIRTY_CONST","RemoveChildrenBetween","beginIndex","endIndex","range","EventInstance","Off","hasContext","hasOnce","listener","On","TypeError","Set","Once","SceneManagerInstance","manager","SceneManager","scenes","sceneIndex","renderResult","gameFrame","numTotalFrames","boot","scene","delta","time","values","results","ResetSceneRenderData","CreateCanvas","TextureManagerInstance","TextureManager","createDefaultTextures","missing","strokeStyle","moveTo","lineTo","stroke","strokeRect","GetVertices","extent","x0","y0","x1","y1","x2","y2","x3","y3","BoundsComponent","entity","fixed","includeChildren","visibleOnly","area","isDirty","min","updateLocal","clearDirty","visible","childBounds","InputComponent","enabled","enabledChildren","hitArea","Vec2","Copy","TransformComponent","passthru","_rotation","local","position","scale","skew","updateExtent","setDirty","rotation","scaleX","scaleY","skewX","skewY","cos","sin","UpdateLocalTransform","gameObject","lt","wt","pa","pb","pc","pd","ptx","pty","UpdateWorldTransform","updateChildren","out","id","GameObject","name","willUpdate","willUpdateChildren","willRender","willRenderChildren","willCacheChildren","dirty","dirtyFrame","input","flag","flag2","postUpdate","reparentChildren","newParent","moved","ReparentChildren","DestroyChildren","Container","_alpha","PackColor","rgb","PackColors","sprite","vertexAlpha","tint","vertexTint","vertexColor","SetFrame","getFrame","setOrigin","hasTexture","vertexData","Sprite","_tint","fill","setTexture","SetTexture","UpdateVertices","preRender","request","offset","U32","BatchTexturedQuad","ctx","save","setTransform","globalAlpha","drawImage","restore","DrawTexturedQuad","CanvasTexture","Text","text","font","fillStyle","splitRegExp","padding","verticalAlign","lineSpacing","backgroundStyle","cornerRadius","textAlign","textBaseline","lineWidth","lineDash","setText","preRenderCallback","lineCap","lineJoin","setLineDash","imageSmoothingEnabled","lines","_text","split","strokeWidth","strokeWidthHalf","clearRect","syncContext","maxWidth","maxHeight","lineMetrics","vAlignAscent","metrics","measureText","averageLineHeight","ceil","abs","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","ascent","descent","lineHeight","displayWidth","fixedWidth","displayHeight","fixedHeight","canvasWidth","canvasHeight","halfRadius","fillRect","isCenter","isRight","yOffset","line","strokeText","fillText","Array","isArray","updateText","UpdateCachedLayers","cachedLayers","dirtyCamera","layer","HasDirtyChildren","BuildRenderList","entries","WorldDepthFirstSearch","isRenderable","CalculateTotalRenderable","numRendered","numRenderable","forceRefresh","ResetWorldRenderData","BaseWorld","_updateListener","_renderListener","render","_shutdownListener","shutdown","sceneRenderData","worldRenderData","MergeRenderData","RemoveChildren","StaticWorld","Install","sceneManager","firstScene","property","defaultValue","prototype","hasOwnProperty","call","GetConfigValue","SetAlpha","GetXYKey","RemoveChessFromZMap","chessMap","z","zMap","AddChessToSet","chess","prevKey","currKey","chessSet","RemoveChessFromSet","AddChess","boardData","prevXYZ","chessToXYZ","prevX","prevY","prevZ","currX","currY","currZ","AddChessToZMap","XYToZMap","XToChessSet","YToChessSet","ZToChessSet","GetChess","GetMaxMapKey","map","result","Infinity","item","GetMinMapKey","BoardData","_xMax","_xMin","_yMax","_yMin","clearBounds","RemoveChess","HasChess","GetXYZ","xMax","xMin","yMax","yMin","SetBoardWidth","board","infinityMode","SetBoardHeight","TileXYZToChess","tileX","tileY","tileZ","getChess","ChessData","blocker","on","removeChess","tileXYZ","chessToTileXYZ","addChess","direction","blockEdges","dir","GetChessData","rexChess","GridAlign","chessArray","getAllChess","cnt","tileXYToWorldXY","AngleBetween","chessA","chessB","tileA","tileB","atan2","GetAngle","RAD_TO_DEG","PI","RadToDeg","radians","ShortestBetween","angle1","angle2","difference","floor","zeroTileXY","MirrorMode","ForEachTileXYOrder","RandomInt","random","GetRandomEmptyTileXY","globTileXY","tileXYZToChess","tileXYArray","getEmptyTileXYArray","tileXY","array","startIndex","randomIndex","GetRandomItem","GetTileXYAtDirection","directions","distance","srcTileXY","parseInt","resultTileXY","isNumberDirection","isNumberDistance","grid","getTileXYAtDirection","getWrapTileXY","allDirections","end","start","step","Wrap","IsEdgeBlocker","PI2","IsAngleInCone","face","cone","tileXYA","tileXYB","targetAngle","angleBetween","angle","deltaAngle","halfCone","epsilon","Equal","TileXYToChessArray","globWorldXY","LayoutMode","DirMode","OrthogonalMap","IsometricMap","ReverseDirMap","dirMap","OrthogonalMapIn","IsometricMapIn","StaggerAxis","StaggerIndex","SQRT3","sqrt","cr2cube","col","row","globCube","ODD_R","EVEN_R","ODD_Q","EVEN_Q","cube2cr","globCR","globCubeA","globCubeB","GetWorldXY","hexagon","worldX","worldY","_halfWidth","_halfHeight","DEG_TO_RAD","globPoints","DirectionToDeltaTileXY","DeltaTileXYToDirection","GetParity","parity","hexragon","srcTileX","srcTileY","newCubeX","newCubeY","newCubeZ","cubeXYZ","GetTileXY","q","cube","qr2cube","rx","round","ry","rz","dx","dy","dz","roundcube","Hexagon","radius","cellWidth","cellHeight","staggerAxis","staggerIndex","odd","setType","setDirectionMode","setOriginPosition","setRadius","setCellSize","even","sides","ALLDIR","halfDirections","HALFDIR","DirectionBetween","DirectionNormalize","roughMode","GetDistance","FillPositionArray","angleOffset","flat","angleRad","halfW","quarterW","halfH","quarterH","GetGridPoints","neighborTileXY","deltaTileXYToDirMap","deltaTileX","deltaTileY","xEntry","GetNeighborTileDirection","GetNeighborTileXY","GetOppositeDirection","isRMode","Mirror","offsetTileX","offsetTileY","offsetX","offsetY","newX","newY","Offset","centerTileXY","j","k","centerCube","cx","cz","cy","RingToTileXYArray","Rotate","_savedOriginX","_savedOriginY","MatchAtDir","match","pattern","startTileX","startTileY","patternLength","currSymbol","matchNMode","symbol","curTileXY","wildcard","matchedTileXY","getNeighborTileXY","getSymbol","MatchAll","scope","getFirst","dirMask","globalQueue","xyArray","xy","visited","Match","symbols","setBoard","setWildcard","setDirMask","clearSymbols","_dir","refreshSymbols","contains","tileXYToKey","keyToTileXY","targetSymbol","Group","MatchAny","GetStyle","CreatePolygonTexture","points","textureManager","DrawCanvasTexture","minX","GetMinProperty","minY","GetMaxProperty","halfLW","beginPath","point","Indent","closePath","items","halfBound","Direction","Colors","MyChess","MyBoard","wrap","inifinity","_isBoard","setGrid","setWrapMode","setInfinityMode","setBoardSize","wrapMode","align","curTileXYZ","minDeltaAngle","neighborAngle","angleToward","AngleSnapToDirection","wrapModeSave","infinityModeSave","AngleToward","getNeighborChessDirection","AreNeighbors","xyz","getXYZ","obj","window","constructor","e","IsPlainObject","isTileXYZ","ChessToTileXYZ","directionBetween","nearToFar","level","ringToTileXYArray","FilledRingToTileXYArray","maxX","maxY","Fit","order","ForEachTileXY","GetAllChess","getDistance","GetEmptyTileXYArray","getGridPoints","neighborTileZ","tileXYArrayToChessArray","tileXYToChessArray","GetNeighborChess","neighborChess","srcTileXYZ","neighborTileXYZ","getNeighborTileDirection","GetNeighborChessDirection","borad","angleSnapToDirection","GetNeighborTileXYAtAngle","baord","getOppositeDirection","GetWrapTileXY","getChessData","HasBlocker","HasEdgeBlocker","savedDirections","deltaDirection","IsDirectionInCone","worldXYToTileXY","IsOverlappingPoint","originTileXY","mirror","fromBoardRemove","RemoveAllChess","tileArray","rotate","tileXYZA","tileXYZB","SwapChess","tileZMode","TileXYArrayToChessArray","TileZToChessArray","TileXYArrayToWorldXYArray","getWorldXY","TileXYToWorldXY","WorldXYSnapToGrid","WorldXYToChess","getTileXY","WorldXYToTileXY","lastMatchedCount","forEachTileXY","worldXY","tile","SetTint","__symbol","matchedCount","parentElement","settings","VERSION","isBooted","isPaused","lastTick","readyState","check","removeEventListener","setTimeout","DOMContentLoaded","setting","appendChild","AddToDOM","version","log","GetBanner","requestAnimationFrame","WebGLRenderer$1","devicePixelRatio","Size","BackgroundColor","HexagonGrid","strokeGrid","fillChess","match3","concat"],"mappings":"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"}